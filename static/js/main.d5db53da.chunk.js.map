{"version":3,"sources":["components/getelement.js","components/checkprerequisites.js","components/degreeplanner.js","components/degreeplanner-course.jsx","components/degreeplanner-term.jsx","components/customnode1.js","components/customnode2.js","components/headernode1.js","components/hoverinfo.js","components/hoverprerequisites.js","components/unhoverprerequisites.js","components/dropdownDegrees.js","components/sidebar-modal.js","components/tutorialnode1.js","components/tutorialnode2.js","components/highlightelements.js","components/selectnode.js","components/unselectnode.js","components/getselectable.js","components/exclusionswap.js","components/unselectunconnected.js","components/interactivetutorial.js","components/tutorial-modal.js","components/sidebar.js","components/dropdownsearch.js","maps/EngineeringHonoursSoftware/map.js","components/teaching.js","App.js","serviceWorker.js","index.js","assets/refresh.svg"],"names":["getElement","id","elementsData","e","checkPrerequisites","node","elements","selectedNodes","data","conditions","units_required","level_for_units_required","checkPrerequisiteUnitsLevel","prerequisites","prereqs_executable","condition","replace","match","hasOwnProperty","eval","checkPrerequisiteUnits","total","target","Object","keys","selected","units","core_year","courseType","substr","concat","selectedList","takenNode","REGEX_COURSE_CODE","mapTermIds","term","mapTermFull","updateCourses","coursesJSON","dataJSON","forEach","course","terms","rawCoursesJSON","getCourses","selectedCourses","courses","c","termsAvailable","map","content","course_name","placeholderTerms","generateTerms","yearId","TSKey","T1Key","T2Key","T3Key","title","courseIds","addPriority","priority","courseId","unlocksCourse","prereq","unlocks","push","prioritiseCourses","level","Number","filter","t","length","prioritised","values","sort","a","b","checkPrereqsMet","termPlan","termId","prereqsExecutable","coursesTaken","addCourseToPlan","courseUnits","includes","substring","console","log","populateTerms","maxYears","prioritisedCourses","year","makePlan","plan","generatePlanScaffold","years","toString","DegreePlanner","state","props","onDragEnd","result","destination","source","draggableId","droppableId","index","sourceYear","start","destinationYear","finish","startCourseIds","Array","from","splice","newStart","finishCourseIds","newFinish","newState","setState","newCourseIds","newTerm","getConsiderationMessages","considerationMessages","getCourseLink","rel","href","Item","replaceAll","join","style","marginBottom","positive","Header","List","error","as","textAlign","marginTop","this","onDragStart","key","columns","termOrder","Column","allCourses","React","Component","Course","Container","provided","ref","innerRef","draggableProps","dragHandleProps","Label","margin","display","flexGrow","marginLeft","alignSelf","Icon","name","placeholder","checkTermAvailability","checkValidCourses","Term","snapshot","Segment","backgroundColor","isDraggingOver","draggingOverWith","transition","reduce","colour","color","floating","showUnits","droppableProps","minHeight","zIndex","pointerEvents","opacity","top","memo","type","position","course_code","iconSize","width","bottom","src","Refresh","alt","degree_name","padding","left","maxWidth","HoverInfo","raised","raw","exclusions","hoverPrerequisites","selectedEdges","selectableNodes","potentialEdges","hoverEdges","prereqQueue","current","shift","unhoverPrerequisites","edge","courseOptions","programOptions","code","programsJSON","degrees_involved","majors","honours","replacement","spec","specialisationsJSON","getMajors","minors","getMinors","DropdownDegrees","majorOptions","minorOptions","disabledPrimary","disabledSecondary","hiddenPrimary","hiddenSecondary","valProgram","valPrimary","valSecondary","phPrimary","phSecondary","chooseProgram","program","value","choosePrimary","chooseSecondary","minor","clickDone","Grid","centered","Row","Dropdown","selection","search","onChange","options","enabled","disabled","visibility","Button","onClick","exampleReducer","action","open","dimmer","Error","SideBarModal","useReducer","undefined","dispatch","size","Modal","closeIcon","onClose","instructions","selectedEdgeAnimated","stroke","strokeWidth","selectedEdgeStatic","hoverEdge","potentialHoverEdge","potentialEdge","unselectedEdge","highlightElements","isEdge","animated","canSelect","cannotSelect","selectNode","unlockCourse","unselectNode","unselectQueue","getSelectable","analyseNodesKeys","isNode","exclusionSwap","edges","exclusionGroups","newElements","group","prevCourse","curCourse","isHidden","curNode","edgesList","getConnectedEdges","newEdgesList","edgesIds","newEdgesIds","newEdge","checkedEdges","hideEdge","newEdgeId","split","sourceNode","targetNode","unselectUnconnected","selectedNode","trueSelectedNodes","selectedUnlockQueue","curUnlock","selectedUnitsNode","checkPrequisiteUnits","selectable","selectableNode","course_level","corequisites","other","equivalents","x","y","alignItems","justifyContent","fontSize","background","height","borderRadius","border","edgesData","exclusionNodes","nodeTypes","tutorial1","TutorialNode1","tutorial2","TutorialNode2","InteractiveTutorial","useState","setElements","setHoverNode","clickCount","singleClickTimer","selectUnselect","element","onLoad","reactFlowInstance","exclusion","last","pop","fitView","nodesConnectable","onElementClick","event","setTimeout","clearTimeout","toggleExclusion","paneMoveable","selectNodesOnDrag","elementsSelectable","nodesDraggable","onNodeMouseEnter","onNodeMouseLeave","TutorialModal","getSelectedCourses","specialisationCode","levels","structure","coreCourses","levelName","courseList","rawList","allCourseIds","getCoursesInLevel","flat","minUnits","unitsTaken","horizontal","Sidebar","paddingLeft","paddingRight","Message","info","flexDirection","Divider","selector","Content","visible","hidden","nodeOptions","elementsList","text","DropdownSearch","setSearch","setInitTransform","useStoreActions","actions","k","prop","onKeyPress","icon","require","nodesData","setTransform","zoom","custom1","CustomNode1","custom2","CustomNode2","header1","HeaderNode1","layoutStyle","overflowX","overflowY","BESengah","hoverDisplay","hoverText","setHoverText","hoverNode","layout","setLayout","positon","divided","onMouseEnter","onMouseLeave","right","minZoom","onNodeDragStop","initialElements","label","Teaching","els","nodeColor","n","Math","random","window","innerWidth","innerHeight","App","basename","path","component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.d5db53da.chunk.js","sourcesContent":["// Given an id, returns the element\r\nconst getElement = (id, elementsData) => {\r\n    //console.log(\"GET ELEMENT OF \" + id);\r\n    for (var e of elementsData) {\r\n        if (e.id === id) {\r\n            return e;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport default getElement;","// Returns true if all prerequisites are met for a given node\r\n// Returns false if prerequisites are not met for a given node\r\n// Will only analyse targets of potential edges\r\n\r\nimport getElement from './getelement.js';\r\n\r\n// NOTE: Assumes that source of potential edges are always selected\r\nexport default function checkPrerequisites(node, elements, selectedNodes) {\r\n    if (node.data.conditions.units_required !== null && node.data.conditions.level_for_units_required !== null) {\r\n        // Get the type of course this is\r\n        return(checkPrerequisiteUnitsLevel(node, elements, selectedNodes));\r\n    }\r\n\r\n    if (node.data.conditions.prerequisites !== null && node.data.conditions.prereqs_executable !== null) {\r\n        // Evaluate the condition\r\n        //console.log(\"HERE\");\r\n        //console.log(node.data.conditions.prereqs_executable);\r\n        var condition = node.data.conditions.prereqs_executable;\r\n        //console.log(condition);\r\n        condition = condition.replace(/[A-Z]{4}[A-Z0-9]+/gi, function(match) {\r\n            //console.log(match);\r\n            if (selectedNodes.hasOwnProperty(match)) {\r\n                return 1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        });\r\n        // eslint-disable-next-line\r\n        if (eval(condition)) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    return(checkPrerequisiteUnits(node, elements, selectedNodes));\r\n\r\n    // TODO: Check for corerequsiites and exclusion courses as well\r\n    // TODO: Check for completion of units and core_year\r\n\r\n    // Check if these nodes are enough to satisfy prerequisites\r\n    // Get the prerequisite condition and replace courses by 1 if they have been\r\n    // selected and 0 if they have not.\r\n\r\n}\r\n\r\n// Perform prerequisite check for units given the node to check, elements and all\r\n// the selected nodes. Returns true/false\r\nexport function checkPrerequisiteUnits(node, elements, selectedNodes) {\r\n    if (node.data.conditions.units_required !== null) {\r\n        if (node.data.conditions.level_for_units_required === null) {\r\n            // See if we meet the total for this course\r\n            var total = 0;\r\n            const target = node.data.conditions.units_required;\r\n            // console.log(selectedNodes);\r\n            const selectedList = Object.keys(selectedNodes);\r\n            for (const selected of selectedList) {\r\n                if (selected === node.id) continue; // The node can't include itself\r\n                const takenNode = getElement(selected, elements);\r\n                total += takenNode.data.units;\r\n            }\r\n\r\n            if (total >= target) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            // This should have been dealt with in the main function\r\n            // Only check specific level courses\r\n            // We will put it here anyways because unselectconnected imports this function alone\r\n            return(checkPrerequisiteUnitsLevel(node, elements, selectedNodes));\r\n        }\r\n    } else if (node.data.conditions.core_year !== null) {\r\n        // NOTE: Hardcoded this for comp courses in sengah\r\n        return true;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n// Perform prerequisite check for nodes which require X units of Y level courses\r\nfunction checkPrerequisiteUnitsLevel(node, elements, selectedNodes) {\r\n    // Determine the type of course\r\n    var courseType = node.id.substr(0, 4);\r\n    courseType = courseType.concat(node.data.conditions.level_for_units_required);\r\n\r\n    var total = 0;\r\n    const target = node.data.conditions.units_required;\r\n    const selectedList = Object.keys(selectedNodes);\r\n    for (const selected of selectedList) {\r\n        if (selected.substr(0, 5) !== courseType) continue; // Not the right course type\r\n        if (selected === node.id) continue; // The node can't include itself\r\n        const takenNode = getElement(selected, elements);\r\n        total += takenNode.data.units;\r\n    }\r\n\r\n    if (total >= target) {\r\n        // If it has conditions, check the conditions\r\n        if (node.data.conditions.prerequisites !== null && node.data.conditions.prereqs_executable !== null) {\r\n            // Evaluate the condition\r\n\r\n            var condition = node.data.conditions.prereqs_executable;\r\n            condition = condition.replace(/[A-Z]{4}[A-Z0-9]+/gi, function(match) {\r\n                if (selectedNodes.hasOwnProperty(match)) {\r\n                    return 1;\r\n                } else {\r\n                    return 0;\r\n                }\r\n            });\r\n            // eslint-disable-next-line\r\n            if (eval(condition)) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n    \r\n}","import React from 'react';\r\nimport { Container, Segment, Header, Message, Grid } from 'semantic-ui-react'\r\n\r\nimport dataJSON from \"../maps/EngineeringHonoursSoftware/data.json\"\r\nimport rawCoursesJSON from \"../webscraper/courses.json\"\r\n\r\nimport { DragDropContext } from \"react-beautiful-dnd\"\r\nimport Term from \"./degreeplanner-term\"\r\n\r\nconst REGEX_COURSE_CODE = /[A-Z]{4}\\d{4}/g;\r\n\r\nconst mapTermIds = (term) => {\r\n    if (term === \"Summer Term\") return \"TS\";\r\n    if (term === \"Term 1\") return \"T1\";\r\n    if (term === \"Term 2\") return \"T2\";\r\n    if (term === \"Term 3\") return \"T3\";\r\n    return;\r\n}\r\n\r\nconst mapTermFull = (term) => {\r\n    if (term === \"TS\") return \"Summer Term\";\r\n    if (term === \"T1\") return \"Term 1\";\r\n    if (term === \"T2\") return \"Term 2\";\r\n    if (term === \"T3\") return \"Term 3\";\r\n}\r\n\r\nconst updateCourses = (coursesJSON, dataJSON) => {\r\n    dataJSON.forEach(course => {\r\n        if (!(course.id in coursesJSON)) return;\r\n        coursesJSON[course.id].conditions.prereqs_executable = course.data.conditions.prereqs_executable\r\n        coursesJSON[course.id].terms = course.data.terms;\r\n    });\r\n    return coursesJSON;\r\n}\r\n\r\nconst coursesJSON = updateCourses(rawCoursesJSON, dataJSON);\r\n\r\nconst getCourses = (selectedCourses) => {\r\n    const courses = {}\r\n\r\n    selectedCourses.forEach(c => {\r\n        if (!(c in coursesJSON)) return;\r\n\r\n        let termsAvailable;\r\n        if (!coursesJSON[c].terms) {\r\n            termsAvailable = [\"TS\", \"T1\", \"T2\", \"T3\"];\r\n        } else {\r\n            termsAvailable = coursesJSON[c].terms.map(term => mapTermIds(term));\r\n        }\r\n\r\n        courses[c] = {\r\n            id: c,\r\n            content: `${c} - ${coursesJSON[c].course_name}`,\r\n            termsAvailable: termsAvailable,\r\n            placeholderTerms: !coursesJSON[c].terms,\r\n            units: coursesJSON[c].units\r\n        }\r\n    })\r\n\r\n    return courses\r\n}\r\n\r\nconst generateTerms = (yearId) => {\r\n    const terms = {}\r\n\r\n    // Terms have id of <YEAR>T<TERM TYPE> eg: 1TS is 1st Year, Summer Term\r\n\r\n    const TSKey = `${yearId}TS`;\r\n    const T1Key = `${yearId}T1`;\r\n    const T2Key = `${yearId}T2`;\r\n    const T3Key = `${yearId}T3`;\r\n    terms[\"termOrder\"] = [TSKey, T1Key, T2Key, T3Key];\r\n\r\n    terms[TSKey] = {\r\n        id: TSKey,\r\n        title: `Year ${yearId} - Summer Term`,\r\n        courseIds: []\r\n    }\r\n\r\n    terms[T1Key] = {\r\n        id: T1Key,\r\n        title: `Year ${yearId} - Term One`,\r\n        courseIds: []\r\n    }\r\n\r\n    terms[T2Key] = {\r\n        id: T2Key,\r\n        title: `Year ${yearId} - Term Two`,\r\n        courseIds: []\r\n    }\r\n\r\n    terms[T3Key] = {\r\n        id: T3Key,\r\n        title: `Year ${yearId} - Term Three`,\r\n        courseIds: []\r\n    }\r\n\r\n    return terms;\r\n}\r\n\r\nconst addPriority = (priority, courseId, unlocksCourse) => {\r\n    if (!(courseId in coursesJSON)) return priority;\r\n    if (!coursesJSON[courseId].conditions.prerequisites) return priority;\r\n\r\n    for (const prereq of coursesJSON[courseId].conditions.prerequisites) {\r\n        if (!(prereq in priority)) continue;\r\n        if (courseId === prereq) continue;\r\n\r\n        priority[prereq].unlocks.push(unlocksCourse);\r\n        priority = addPriority(priority, prereq, unlocksCourse);\r\n    }\r\n\r\n    return priority;\r\n}\r\n\r\nconst prioritiseCourses = (selectedCourses) => {\r\n    // Initiate priorities\r\n    var priority = {};\r\n    for (const courseId of selectedCourses) {\r\n        if (!(courseId in coursesJSON)) continue\r\n\r\n        priority[courseId] = {\r\n            courseId: courseId,\r\n            level: Number(courseId[4]),\r\n            unlocks: [],\r\n            termsAvailable: coursesJSON[courseId].terms ? coursesJSON[courseId].terms.filter(t => t !== \"Summer Term\").length : 0\r\n        }\r\n    }\r\n\r\n    // Calculate priorities\r\n    for (const courseId of selectedCourses) {\r\n        priority = addPriority(priority, courseId, courseId);\r\n    }\r\n\r\n    // Sort keys of priority into array to give into prioritised\r\n    const prioritised = Object.values(priority);\r\n\r\n    prioritised.sort((a, b) => {\r\n        // Sort by:\r\n        // 1. Level (ASC)\r\n        // 2. Unlocks (DESC)\r\n        // 3. Terms Available (ASC)\r\n\r\n        if (a.level === b.level) {\r\n            if (a.unlocks.length === b.unlocks.length) {\r\n                return a.termsAvailable - b.termsAvailable; // Ascending\r\n            }\r\n            return b.unlocks.length - a.unlocks.length; // Descending\r\n        }\r\n        return a.level - b.level; // Ascending\r\n    });\r\n\r\n    return prioritised;\r\n}\r\n\r\nconst checkPrereqsMet = (termPlan, termId, courseId) => {\r\n\r\n    let prereqsExecutable = coursesJSON[courseId].conditions.prereqs_executable;\r\n    if (!prereqsExecutable) return true; // No executable\r\n\r\n    // Get courses taken up to termId\r\n    const coursesTaken = [];\r\n    for (const t in termPlan) {\r\n        if (t === termId) break;\r\n        coursesTaken.push(...termPlan[t].courseIds);\r\n    }\r\n    // console.log(courseId, \"courses taken:\", coursesTaken);\r\n\r\n    for (const course of coursesTaken) {\r\n        prereqsExecutable = prereqsExecutable.replace(course, \"1\");\r\n    }\r\n    prereqsExecutable = prereqsExecutable.replace(REGEX_COURSE_CODE, \"0\");\r\n\r\n    // eslint-disable-next-line\r\n    return eval(prereqsExecutable);\r\n}\r\n\r\nconst addCourseToPlan = (termPlan, courseId) => {\r\n    const maxUOC = 18;\r\n\r\n    for (const termId in termPlan) {\r\n        if (termPlan[termId].units >= maxUOC) continue;\r\n\r\n        const courseUnits = coursesJSON[courseId].units;\r\n        if (termPlan[termId].units + courseUnits > maxUOC) continue;\r\n\r\n        let termsAvailable;\r\n        if (!(coursesJSON[courseId].terms)) {\r\n            termsAvailable = [\"TS\", \"T1\", \"T2\", \"T3\"];\r\n            // continue;\r\n        } else {\r\n            termsAvailable = coursesJSON[courseId].terms.map(term => mapTermIds(term));\r\n        }\r\n\r\n        if (!(termsAvailable.includes(termId.substring(1, 3)))) continue;\r\n\r\n        // Need to check prerequisites have been met here\r\n        if (!checkPrereqsMet(termPlan, termId, courseId)) continue;\r\n\r\n        // Add course to plan\r\n        termPlan[termId].units += coursesJSON[courseId].units;\r\n        termPlan[termId].courseIds.push(courseId);\r\n        return termPlan;\r\n    }\r\n\r\n    console.log(\"ERROR WITH \", courseId); // TODO: put in a \"error\" segment\r\n}\r\n\r\nconst populateTerms = (maxYears, prioritisedCourses) => {\r\n    const maxTerms = 3;\r\n\r\n    const termPlan = {};\r\n    for (let year = 1; year <= maxYears; year++) {\r\n        for (let term = 1; term <= maxTerms; term++) {\r\n            const termId = `${year}T${term}`;\r\n            termPlan[termId] = {\r\n                units: 0,\r\n                courseIds: []\r\n            };\r\n        }\r\n    }\r\n\r\n    // For each course in the prioritised, slot into earliest possible term\r\n    for (const course of prioritisedCourses) {\r\n        addCourseToPlan(termPlan, course.courseId);\r\n    }\r\n\r\n    return termPlan;\r\n}\r\n\r\nconst makePlan = (plan, maxYears, selectedCourses) => {\r\n    const prioritisedCourses = prioritiseCourses(selectedCourses);\r\n\r\n    const termPlan = populateTerms(maxYears, prioritisedCourses);\r\n\r\n    for (const termId in termPlan) {\r\n        const year = termId[0];\r\n        plan[year][termId].courseIds = termPlan[termId].courseIds\r\n    }\r\n\r\n    return plan;\r\n}\r\n\r\nconst generatePlanScaffold = (years, selectedCourses) => {\r\n    let plan = {};\r\n\r\n    for (let year = 1; year <= years; year++) {\r\n        plan[year.toString()] = generateTerms(year)\r\n    }\r\n\r\n    plan = makePlan(plan, years, selectedCourses)\r\n\r\n    return plan;\r\n}\r\n\r\nclass DegreePlanner extends React.Component {\r\n    state = {\r\n        courses: getCourses(this.props.selectedCourses),\r\n        selectedCourses: this.props.selectedCourses,\r\n        plan: generatePlanScaffold(4, this.props.selectedCourses),\r\n    };\r\n    /*shouldComponentUpdate(nextProps, nextState) {\r\n        const { selectedCourses: nextPropsSelectedCourses } = nextProps;\r\n        const { selectedCourses: propsSelectedCourses } = this.props;\r\n\r\n        const { selectedCourses } = this.state;\r\n\r\n        if (nextPropsSelectedCourses !== propsSelectedCourses && nextPropsSelectedCourses !== selectedCourses) {\r\n            console.log(\"UPDATE!!!!\");\r\n            console.log(nextProps);\r\n            console.log(nextState);\r\n            this.setState({\r\n                courses: getCourses(nextPropsSelectedCourses),\r\n                selectedCourses: nextPropsSelectedCourses,\r\n                plan: generatePlanScaffold(4, nextPropsSelectedCourses)\r\n            });\r\n        }\r\n\r\n        return selectedCourses !== nextState.selectedCourses;\r\n    }*/\r\n\r\n    onDragEnd = result => {\r\n        const { destination, source, draggableId } = result;\r\n\r\n        // Null destination means label was not dragged into a droppable\r\n        if (!destination) return;\r\n\r\n        // Label was dragged into the same position\r\n        if (destination.droppableId === source.droppableId && destination.index === source.index) return;\r\n\r\n        const sourceYear = source.droppableId[0];\r\n        const start = this.state.plan[sourceYear][source.droppableId];\r\n        const destinationYear = destination.droppableId[0];\r\n        const finish = this.state.plan[destinationYear][destination.droppableId];\r\n\r\n        if (start === finish) {\r\n            const newCourseIds = Array.from(start.courseIds);\r\n            newCourseIds.splice(source.index, 1); // Remove 1 item at source.index\r\n            newCourseIds.splice(destination.index, 0, draggableId); // Insert dragggableId into destination\r\n            const newTerm = {\r\n                ...start,\r\n                courseIds: newCourseIds\r\n            };\r\n\r\n            const newState = {\r\n                ...this.state,\r\n                plan: {\r\n                    ...this.state.plan,\r\n                    [sourceYear]: {\r\n                        ...this.state.plan[sourceYear],\r\n                        [newTerm.id]: newTerm,\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setState(newState);\r\n            return;\r\n        }\r\n\r\n        // Moving from one list to another\r\n        const startCourseIds = Array.from(start.courseIds)\r\n        startCourseIds.splice(source.index, 1);\r\n\r\n        const newStart = {\r\n            ...start,\r\n            courseIds: startCourseIds,\r\n        }\r\n\r\n        const finishCourseIds = Array.from(finish.courseIds)\r\n        finishCourseIds.splice(destination.index, 0, draggableId);\r\n\r\n        const newFinish = {\r\n            ...finish,\r\n            courseIds: finishCourseIds\r\n        }\r\n\r\n        const newState = this.state;\r\n        newState.plan[sourceYear][newStart.id] = newStart;\r\n        newState.plan[destinationYear][newFinish.id] = newFinish;\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    getConsiderationMessages = (state) => {\r\n        const plan = state.plan;\r\n        const courses = state.courses;\r\n        const considerationMessages = [];\r\n\r\n        // Check prereqs\r\n        const termPlan = {}\r\n        for (const year in plan) {\r\n            for (const term in plan[year]) {\r\n                if (term === \"termOrder\") continue;\r\n                termPlan[term] = plan[year][term]\r\n            }\r\n        }\r\n\r\n        const getCourseLink = (courseId) => {\r\n            const handbookVersion = 2021;\r\n            return <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://www.handbook.unsw.edu.au/undergraduate/courses/${handbookVersion}/${courseId}`}>{courseId}</a>;\r\n        }\r\n\r\n        for (const year in plan) {\r\n            for (const term in plan[year]) {\r\n                if (term === \"termOrder\") continue;\r\n                for (const courseId of plan[year][term].courseIds) {\r\n                    if (!checkPrereqsMet(termPlan, term, courseId)) {\r\n                        considerationMessages.push(\r\n                            <Message.Item>\r\n                                {getCourseLink(courseId)} prerequisites have not been met: {coursesJSON[courseId].conditions.prereqs_executable\r\n                                    .replaceAll(\"|| 0 ||\", \"||\")\r\n                                    .replaceAll(\"&& 0 &&\", \"&&\")\r\n                                    .replaceAll(\"&& 0 ||\", \"||\")\r\n                                    .replaceAll(\"|| 0 &&\", \"&&\")\r\n                                    .replaceAll(\"&&\", \"and\")\r\n                                    .replaceAll(\"||\", \"or\")\r\n                                }\r\n                            </Message.Item>\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Check terms\r\n        for (const yearId in plan) {\r\n            for (let termId in plan[yearId]) {\r\n                if (termId === \"termOrder\") continue;\r\n                const term = termId.substring(1, 3)\r\n                for (const courseId of plan[yearId][termId].courseIds) {\r\n                    // if (!courses[courseId].termsAvailable) {\r\n                    if (!courses[courseId]) {\r\n                        considerationMessages.push(\r\n                            <Message.Item>\r\n                                {getCourseLink(courseId)}: could not retrieve course. Check handbook for more details.\r\n                            </Message.Item>\r\n                        )\r\n                    } else if (courses[courseId].placeholderTerms) {\r\n                        considerationMessages.push(\r\n                            <Message.Item>\r\n                                {getCourseLink(courseId)}: unknown term availability. Check handbook for more details.\r\n                            </Message.Item>\r\n                        )\r\n                    } else if (!courses[courseId].termsAvailable.includes(term)) {\r\n                        considerationMessages.push(\r\n                            <Message.Item>\r\n                                {getCourseLink(courseId)} is only available in {courses[courseId].termsAvailable.map(term => mapTermFull(term)).join(\", \")}\r\n                            </Message.Item>\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const style = {\r\n            marginBottom: \"20px\"\r\n        }\r\n\r\n        if (considerationMessages.length === 0) {\r\n            return (\r\n                <Message style={style} positive>\r\n                    <Message.Header>Considerations</Message.Header>\r\n                    <Message.List>\r\n                        No considerations found\r\n                    </Message.List>\r\n                </Message>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <Message style={style} error>\r\n                <Message.Header>Considerations</Message.Header>\r\n                <Message.List>\r\n                    {considerationMessages}\r\n                </Message.List>\r\n            </Message>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Segment>\r\n                <Container>\r\n                    <Header as=\"h2\" textAlign=\"center\" style={{marginTop: \"50px\"}}>Plan your degree</Header>\r\n                    <p>The following degree plan has been generated based on the courses you have selected above. By default, our algorithm:</p>\r\n                    <ul>\r\n                        <li>allocates 18 UOC per term</li>\r\n                        <li>ensures courses have their prerequisites met</li>\r\n                        <li>ensures courses are offered in allocated terms</li>\r\n                        <li>does not allocate courses in Summer Term</li>\r\n                    </ul>\r\n\r\n                    <p>Drag and drop the courses below to further customise your degree plan!</p>\r\n\r\n                    <p><em>Please note that our data is scraped from the UNSW Handbook and may have some inconsistencies, e.g. a course may not have its term availability published on the Handbook.</em></p>\r\n\r\n                    <DragDropContext onDragEnd={this.onDragEnd} onDragStart={this.onDragStart}>\r\n                        {this.getConsiderationMessages(this.state)}\r\n\r\n                        {Object.keys(this.state.plan).map(yearId => (\r\n                            <Grid key={yearId} columns={4}>\r\n                                {this.state.plan[yearId].termOrder.map(termId => {\r\n                                    const term = this.state.plan[yearId][termId];\r\n                                    const courses = term.courseIds.map(courseId => this.state.courses[courseId]);\r\n                                    return (\r\n                                        <Grid.Column key={termId}>\r\n                                            <Term key={term.id} term={term} courses={courses} allCourses={this.state.courses}/>\r\n                                        </Grid.Column>\r\n                                    );\r\n                                })}\r\n                            </Grid>\r\n                        ))}\r\n                    </DragDropContext>\r\n                </Container>\r\n            </Segment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DegreePlanner","import React from \"react\";\r\nimport { Label, Container, Icon} from 'semantic-ui-react'\r\n\r\nimport { Draggable } from \"react-beautiful-dnd\"\r\n\r\nconst getCourseLink = (courseId) => {\r\n    const handbookVersion = 2021;\r\n    return <a style={{marginLeft: \"5px\", alignSelf: \"flex-start\"}} target=\"_blank\" rel=\"noopener noreferrer\" href={`https://www.handbook.unsw.edu.au/undergraduate/courses/${handbookVersion}/${courseId}`}><Icon name=\"external share\"/></a>;\r\n}\r\n\r\nexport default class Course extends React.Component {\r\n    render () {\r\n        return (\r\n            <Container>\r\n                <Draggable draggableId={this.props.course.id} index={this.props.index}>\r\n                    {provided => (\r\n                        <div>\r\n                            <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                                <Label style={{margin: \"5px\", display: \"flex\"}}>\r\n                                    <span style={{flexGrow: \"1\"}}>\r\n                                        {this.props.course.content}\r\n                                    </span>\r\n                                    {getCourseLink(this.props.course.id)}\r\n                                </Label>\r\n                            </div>\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Draggable>\r\n            </Container>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { Container, Segment, Header, Label } from 'semantic-ui-react'\r\n\r\nimport Course from \"./degreeplanner-course\"\r\n\r\nimport { Droppable } from \"react-beautiful-dnd\"\r\n\r\nconst SUCCESS = \"#FCFFF5\";\r\nconst ERROR = \"#FFF6F6\";\r\nconst UNKNOWN = \"#FFFAF3\"\r\n\r\nconst checkTermAvailability = (props, courseId) => {\r\n    const termId = props.term.id.substring(1, 3);\r\n    const termAvailability = props.allCourses[courseId].termsAvailable;\r\n\r\n    // return props.allCourses[courseId].placeholderTerms\r\n    //     ? UNKNOWN\r\n    //     : termAvailability.includes(termId)\r\n    //     ? SUCCESS\r\n    //     : ERROR;\r\n    return termAvailability.includes(termId)\r\n        ? props.allCourses[courseId].placeholderTerms\r\n            ? UNKNOWN\r\n            : SUCCESS\r\n        : ERROR\r\n}\r\n\r\nconst checkValidCourses = (props) => {\r\n    const termId = props.term.id.substring(1, 3);\r\n\r\n    for (const courseId of props.term.courseIds) {\r\n        if (!props.allCourses[courseId].termsAvailable.includes(termId)) return ERROR;\r\n        if (props.allCourses[courseId].placeholderTerms) return UNKNOWN;\r\n    }\r\n    return \"white\"\r\n}\r\n\r\nconst showUnits = (props) => {\r\n    const total = props.term.courseIds.filter(c => props.allCourses[c]).reduce((total, courseId) => total + props.allCourses[courseId].units, 0);\r\n    const partTime = 12;\r\n    const fullTime = 18;\r\n\r\n    let colour = \"\"\r\n    if (total === 0) {\r\n        colour = \"grey\";\r\n    } else if (total < partTime) {\r\n        colour = \"orange\";\r\n    } else if (total < fullTime) {\r\n        colour = \"blue\";\r\n    } else if (total === fullTime) {\r\n        colour = \"teal\";\r\n    } else {\r\n        colour = \"red\";\r\n    }\r\n\r\n    return <Label color={colour} floating style={{transition: \"0.2s ease\"}}>{total}</Label>;\r\n}\r\n\r\nexport default class Term extends React.Component {\r\n    render () {\r\n        return (\r\n            <Container>\r\n                <Droppable droppableId={this.props.term.id}>\r\n                    {(provided, snapshot) => (\r\n                        <Segment style={{backgroundColor: snapshot.isDraggingOver ? checkTermAvailability(this.props, snapshot.draggingOverWith) : checkValidCourses(this.props), transition: \"0.2s ease\"}}>\r\n                            <Header as=\"h4\">{this.props.term.title}</Header>\r\n                            {showUnits(this.props)}\r\n                            {/* {getTermTitle(this.props)} */}\r\n                            <div ref={provided.innerRef} {...provided.droppableProps} style={{minHeight: \"150px\"}}>\r\n                                {this.props.courses.map((course, index) => <Course key={course.id} course={course} index={index} />)}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        </Segment>\r\n                    )}\r\n                </Droppable>\r\n            </Container>\r\n        )\r\n    }\r\n}","// For normal nodes\r\nimport React, { memo } from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nconst style = {zIndex: -9999, pointerEvents: 'none', opacity: 0, top: '50%'};\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={style} />\r\n      <div>\r\n            <b>{data.course_code}</b>\r\n      </div>\r\n      <Handle type=\"source\" position=\"top\" style={style} />\r\n    </>\r\n  );\r\n});\r\n","// For normal nodes\r\nimport React, { memo } from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nimport Refresh from '../assets/refresh.svg';\r\n\r\nconst style = {zIndex: -9999, pointerEvents: 'none', opacity: 0, top: '50%'};\r\nconst iconSize = {width: 12, position: 'relative', bottom: 2};\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={style} />\r\n      <div>\r\n            <br></br>\r\n            <b>{data.course_code}</b>\r\n            <div>\r\n              <img src={Refresh} alt={data.course_code} style={iconSize}/>\r\n            </div>\r\n      </div>\r\n      <Handle type=\"source\" position=\"top\" style={style} />\r\n    </>\r\n  );\r\n});\r\n","import React, { memo } from 'react';\r\n\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={{opacity: 0, top: '50%'}} />\r\n      <div>\r\n            <b>{data.degree_name}</b>\r\n      </div>\r\n      <Handle type=\"source\" position=\"bottom\" style={{opacity: 0, bottom: '50%'}} />\r\n    </>\r\n  );\r\n});\r\n","// Displays hover text in top left corner which contains info about the course\r\nimport React from 'react';\r\nimport { Segment, Header } from \"semantic-ui-react\";\r\n\r\nconst style = {\r\n    padding: \"20px\",\r\n    margin: \"10px\",\r\n    position: \"absolute\",\r\n    top: \"0\",\r\n    left: \"0\",\r\n    zIndex: \"10\",\r\n    maxWidth: \"20%\"\r\n}\r\n\r\nexport default function HoverInfo(props) {\r\n    return (\r\n        <Segment raised id=\"hoverbox\" style={style}>\r\n            <Header as=\"h4\" textAlign=\"center\">{props.node.data.course_name}</Header>\r\n            <p><b>Terms: </b>{(props.node.data.terms !== null) ? props.node.data.terms.join(\", \") : <text>Unknown</text>}</p>\r\n\r\n            {props.node.data.conditions.raw !== null ? <p><b>Conditions: </b>{props.node.data.conditions.raw}</p> : <p><b>Conditions: </b> None</p>}\r\n\r\n            {props.node.data.exclusions !== null &&\r\n            <p><b>Exclusion courses: </b>{props.node.data.exclusions.join(\", \")}</p>}\r\n        </Segment>\r\n    );\r\n}","// HELPER FUNCTION to highlight prerequisites in purple on hover\r\n// When hovering over an unselected node, show a path of edges\r\n// which will stop at a selected/selectable node\r\nimport getElement from './getelement.js';\r\n\r\nexport default function hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges) {\r\n    if (node.data.conditions.prerequisites === null) return;\r\n    // Get all selected edges one layer down and add to hover edges\r\n    for (const prereq of node.data.conditions.prerequisites) {\r\n        if (selectedEdges.hasOwnProperty('e' + prereq + '-' + node.id)) {\r\n            hoverEdges['e' + prereq + '-' + node.id] = 1;\r\n        }\r\n    }\r\n\r\n    // hoverEdge all unselected (AND POTENTIAL???) edges until we hit selected node (NO LONGER STOPS AT SELECTABLE NODE)\r\n    var prereqQueue = [node.id];\r\n    while (prereqQueue.length !== 0) {\r\n        const current = getElement(prereqQueue.shift(), elements);\r\n        // Make sure this course exists as a node in our map\r\n        if (current === null) continue;\r\n\r\n        if (current.data.conditions.prerequisites === null) continue;\r\n\r\n        for (const prereq of current.data.conditions.prerequisites) {\r\n            if (!selectedEdges.hasOwnProperty('e' + prereq + '-' + current.id)) {\r\n                hoverEdges['e' + prereq + '-' + current.id] = 1;\r\n            }\r\n            /*if ((!selectedEdges.hasOwnProperty('e' + prereq + '-' + current.id)) && (!potentialEdges.hasOwnProperty('e' + prereq + '-' + current.id))) {\r\n                hoverEdges['e' + prereq + '-' + current.id] = 1;\r\n            }*/\r\n\r\n            if ((!selectedNodes.hasOwnProperty(prereq))) {\r\n                prereqQueue.push(prereq);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// HELPER FUNCTION to delete prerequisite edges\r\n// Usually used after unhovering or onclick\r\nexport default function unhoverPrerequisites(hoverEdges) {\r\n    for (var edge in hoverEdges) {\r\n        delete hoverEdges[edge];\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Button, Dropdown, Grid } from 'semantic-ui-react'\r\n\r\nimport programsJSON from \"../webscraper/programs.json\"\r\nimport specialisationsJSON from \"../webscraper/specialisations.json\"\r\n\r\nconst MAJORS = 1;\r\nconst MINORS = 2;\r\nconst HONOURS = 3;\r\n\r\nconst courseOptions = {}\r\nconst programOptions = []\r\n\r\nfor (const code in programsJSON) {\r\n    if (programsJSON[code].degrees_involved.majors.length === 0 && programsJSON[code].degrees_involved.honours.length === 0) continue;\r\n\r\n    programOptions.push({\r\n        \"key\": code,\r\n        \"value\": code,\r\n        \"text\": code + \" - \" + programsJSON[code].name\r\n    })\r\n\r\n    courseOptions[code] = programsJSON[code].degrees_involved\r\n}\r\n\r\nfor (const code in courseOptions) {\r\n    for (const type in courseOptions[code]) {\r\n\r\n        const replacement = [];\r\n        for (const spec of courseOptions[code][type]) {\r\n            if (!(spec in specialisationsJSON)) continue;\r\n            replacement.push({\r\n                \"key\": spec,\r\n                \"value\": spec,\r\n                \"text\": spec + \" - \" + specialisationsJSON[spec].name\r\n            })\r\n        }\r\n        courseOptions[code][type] = replacement;\r\n    }\r\n}\r\n\r\n// returns MAJORS if Majors but no Minors\r\n// returns MINORS if Majors and Minors exist\r\n// returns HONOURS if Honours exist\r\nconst getMajors = (code) => {\r\n    if (!(code in courseOptions)) {\r\n        console.log(\"code not found in majors\", code);\r\n        return [];\r\n    }\r\n\r\n    if (courseOptions[code].honours.length) return [HONOURS, courseOptions[code].honours];\r\n    if (courseOptions[code].minors.length) return [MINORS, courseOptions[code].majors];\r\n    return [MAJORS, courseOptions[code].majors];\r\n}\r\n\r\nconst getMinors = (code) => {\r\n    if (!(code in courseOptions)) {\r\n        console.log(\"code not found in minors\", code);\r\n        return [];\r\n    }\r\n\r\n    return courseOptions[code].minors;\r\n}\r\n\r\nclass DropdownDegrees extends Component {\r\n    state = {\r\n        programOptions: programOptions,\r\n        majorOptions: [],\r\n        minorOptions: [],\r\n\r\n        disabledPrimary: true,\r\n        disabledSecondary: true,\r\n        hiddenPrimary: 'hidden',\r\n        hiddenSecondary: 'hidden',\r\n\r\n        valProgram: null,\r\n        valPrimary: null,\r\n        valSecondary: null,\r\n\r\n        phPrimary: \"Select\",\r\n        phSecondary: \"N/A\"\r\n    }\r\n\r\n    chooseProgram = (e, program) => {\r\n        const [type, majors] = getMajors(program.value)\r\n        console.log(program.value)\r\n        this.setState({\r\n            valProgram: program.value,\r\n\r\n            valPrimary: null,\r\n            disabledPrimary: false,\r\n            hiddenPrimary: 'visible',\r\n            majorOptions: majors,\r\n            phPrimary: \"Select Major\",\r\n\r\n            valSecondary: null,\r\n            disabledSecondary: true,\r\n            hiddenSecondary: 'hidden',\r\n            minorOptions: [],\r\n            phSecondary: \"N/A\"\r\n        })\r\n\r\n        if (type === HONOURS) this.setState({phPrimary: \"Select Honour\"})\r\n        else if (type === MAJORS) this.setState({phPrimary: \"Select Major\"})\r\n        else {\r\n            this.setState({\r\n                phPrimary: \"Select Major\",\r\n                phSecondary: \"Select Minor\",\r\n                minorOptions: getMinors(program.value),\r\n                disabledSecondary: false,\r\n                hiddenSecondary: 'visible',\r\n            });\r\n        }\r\n    }\r\n\r\n    choosePrimary = (e, spec) => {\r\n        this.setState({\r\n            valPrimary: spec.value\r\n        })\r\n    }\r\n\r\n    chooseSecondary = (e, minor) => {\r\n        this.setState({\r\n            valSecondary: minor.value\r\n        })\r\n    }\r\n\r\n    clickDone = () => {\r\n        console.log('Running click')\r\n        // console.log(this.state)\r\n        console.log(this.state.valProgram, this.state.valPrimary, this.state.valSecondary)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <Grid centered style={{marginBottom: \"20px\"}}> \r\n                <Grid.Row>  \r\n                    <Dropdown\r\n                        selection\r\n                        search\r\n                        onChange={this.chooseProgram}\r\n                        options= {this.state.programOptions}\r\n                        enabled\r\n                        placeholder= 'Select Program'\r\n                    />\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Dropdown\r\n                        selection\r\n                        search\r\n                        onChange={this.choosePrimary}\r\n                        options= {this.state.majorOptions}\r\n                        disabled= {this.state.disabledPrimary}\r\n                        value= {this.state.valPrimary}\r\n                        placeholder= {this.state.phPrimary}\r\n                        style={{visibility: this.state.hiddenPrimary}}\r\n                    />\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Dropdown\r\n                        selection\r\n                        search\r\n                        onChange={this.chooseSecondary}\r\n                        options= {this.state.minorOptions}\r\n                        disabled= {this.state.disabledSecondary}\r\n                        value= {this.state.valSecondary}\r\n                        placeholder= {this.state.phSecondary}\r\n                        style={{visibility: this.state.hiddenSecondary}}\r\n                    />\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Button\r\n                    onClick={this.clickDone}\r\n                    color=\"red\"\r\n                    >Done! Print to console</Button>\r\n                </Grid.Row>\r\n            </Grid>\r\n            \r\n\r\n        </>;\r\n    }\r\n}\r\n\r\nexport default DropdownDegrees","import React from \"react\";\r\nimport DropdownDegrees from \"./dropdownDegrees.js\"\r\nimport { Button, Container, Modal, Header } from 'semantic-ui-react'\r\n\r\nfunction exampleReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'OPEN_MODAL':\r\n      return { open: true, dimmer: action.dimmer }\r\n    case 'CLOSE_MODAL':\r\n      return { open: false }\r\n    default:\r\n      throw new Error()\r\n  }\r\n}\r\n\r\nfunction SideBarModal() {\r\n  const [state, dispatch] = React.useReducer(exampleReducer, {\r\n    open: false,\r\n    dimmer: undefined,\r\n  })\r\n  const { open, dimmer } = state\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        size=\"mini\"\r\n        color=\"blue\"\r\n        onClick={() => dispatch({ type: 'OPEN_MODAL', dimmer: 'blurring' })}\r\n      >\r\n        Choose Degree\r\n      </Button>\r\n\r\n      <Modal\r\n        closeIcon\r\n        dimmer={dimmer}\r\n        open={open}\r\n        onClose={() => dispatch({ type: 'CLOSE_MODAL' })}\r\n      >\r\n        <Modal.Header textAlign=\"center\">Degree Planner</Modal.Header>\r\n        <Container>\r\n            <Header as=\"h3\" textAlign=\"center\" style={{marginTop: \"5px\"}}>Choose your degree</Header>\r\n            <DropdownDegrees />\r\n        </Container>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SideBarModal\r\n\r\n//DropdownDegrees.clickDone() \r\n\r\n//DropdownDegrees d = new DropdownDegrees(); \r\n//d.clickDone()","// For normal nodes\r\nimport React, { memo } from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nconst style = {zIndex: -9999, pointerEvents: 'none', opacity: 0, top: '50%'};\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={style} />\r\n      <div>\r\n            <text>{data.instructions}</text>\r\n      </div>\r\n      <Handle type=\"source\" position=\"top\" style={style} />\r\n    </>\r\n  );\r\n});\r\n","// For normal nodes\r\nimport React, { memo } from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nimport Refresh from '../assets/refresh.svg';\r\n\r\nconst style = {zIndex: -9999, pointerEvents: 'none', opacity: 0, top: '50%'};\r\nconst iconSize = {width: 12, position: 'relative', bottom: 2};\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={style} />\r\n      <div>\r\n            <br></br>\r\n            <b>{data.instructions}</b>\r\n            <div>\r\n              <img src={Refresh} alt={data.course_code} style={iconSize}/>\r\n            </div>\r\n      </div>\r\n      <Handle type=\"source\" position=\"top\" style={style} />\r\n    </>\r\n  );\r\n});\r\n","// Helper functions to highlight nodes and edges\r\n// Will highlight/unhighlight nodes based on selectedNodes dictionary\r\nimport { isEdge } from \"react-flow-renderer\";\r\n\r\nconst selectedEdgeAnimated = {\r\n    stroke: \"#e94646\",\r\n    strokeWidth: 2,\r\n    opacity: 1,\r\n    transition: \"0.3s ease\"\r\n}\r\nconst selectedEdgeStatic = {\r\n    stroke: \"#454545\",\r\n    strokeWidth: 2,\r\n    opacity: 1,\r\n    transition: \"0.3s ease\"\r\n}\r\n\r\nconst hoverEdge = {\r\n    stroke: \"#454545\",\r\n    strokeWidth: 2,\r\n    opacity: 1,\r\n    transition: \"0.3s ease\"\r\n}\r\n\r\nconst potentialHoverEdge = {\r\n    stroke: \"#454545\",\r\n    strokeWidth: 2,\r\n    opacity: 1,\r\n    transition: \"0.3s ease\"\r\n}\r\nconst potentialEdge = {\r\n    stroke: \"#cecece\",\r\n    strokeWidth: 1,\r\n    opacity: 1,\r\n    transition: \"0.3s ease\"\r\n}\r\n\r\nconst unselectedEdge = {\r\n    stroke: \"#cecece\",\r\n    strokeWidth: 1,\r\n    opacity: 1,\r\n    transition: \"0.3s ease\"\r\n}\r\n\r\nexport default function highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges) {\r\n    const newElements = elements.map((e) => {\r\n        // It is an edge\r\n        if (isEdge(e)) {\r\n            if (selectedEdges.hasOwnProperty(e.id)) {\r\n                if (hoverEdges.hasOwnProperty(e.id)) return {...e, style: selectedEdgeAnimated, animated: true};\r\n                else return {...e, style: selectedEdgeStatic, animated: false};\r\n            } else if (potentialEdges.hasOwnProperty(e.id)) {\r\n                if (hoverEdges.hasOwnProperty(e.id)) return {...e, style: potentialHoverEdge, animated: true};\r\n                else return {...e, style: potentialEdge, animated: false};\r\n            } else if (hoverEdges.hasOwnProperty(e.id)) {\r\n                return {...e, style: hoverEdge, animated: true};\r\n            } else {\r\n                return {...e, style: unselectedEdge, animated: false};\r\n            }\r\n        }\r\n\r\n        // It is a node\r\n        if (selectedNodes.hasOwnProperty(e.id)) {\r\n            // SELECTED NODE\r\n            const selected = e.selected;\r\n            return {...e, style: selected};\r\n\r\n            // if (e.style.background === 'white') {\r\n            //     // It was previously a selectable node. Adjust colours accordingly\r\n            //     const backgroundColour = e.style.color;\r\n            //     // return {...e, style: {...e.style, color: 'white', background: backgroundColour, filter: 'brightness(1.15)'}}\r\n            //     return {...e};\r\n            // } else {\r\n            //     // It was an unselected node or an already selected node. Simply make sure its brightness is adjusted\r\n            //     // return {...e, style: {...e.style, filter: 'brightness(1.15)'}};\r\n            //     return {...e};\r\n            // }\r\n        } else if (selectableNodes.hasOwnProperty(e.id)) {\r\n            // NOT SELECTED BUT CAN BE SELECTED\r\n            const canSelect = e.canSelect;\r\n            return {...e, style: canSelect};\r\n            // \r\n            // if (e.style.background === 'white') {\r\n            //     // It was already a selectable node. Do not need to adjust\r\n            //     return {...e};\r\n            // } else {\r\n            //     // It was an unselected node or an already selected node. Adjust text colour and background\r\n            //     const textColour = e.style.background;\r\n            //     // return {...e, style: {...e.style, color: textColour, background: 'white', filter: 'brightness(1.15)'}};\r\n            //     return {...e};\r\n            // }\r\n        } else {\r\n            // NOT SELECTED AND SHOULD NOT BE SHOWN AS CAN SELECTED\r\n            const cannotSelect = e.cannotSelect;\r\n            return {...e, style: cannotSelect};\r\n            // CONDITIONS NOT MET YET\r\n            // if (e.style.background === 'white') {\r\n            //     // It was a selectable node previously. Adjust colours accordingly\r\n            //     const backgroundColour = e.style.color;\r\n            //     return {...e};\r\n            //     // return {...e, style: {...e.style, color: 'white', background: backgroundColour, filter: 'brightness(0.65)'}}; \r\n            // } else {\r\n            //     // It was either unselected or an already selected node. Simply adjust brightness\r\n            //     // return {...e, style: {...e.style, filter: 'brightness(0.65)'}};\r\n            //     return {...e};\r\n            // }\r\n        }\r\n    })\r\n\r\n    return newElements;\r\n}","// HELPER FUNCTION for selecting nodes\r\n// Given a selectable node, highlights potential edges and fills in prereq edges\r\n// import checkPrerequisites from './checkprerequisites.js';\r\n// import getElement from './getelement.js';\r\n\r\nexport default function selectNode(elements, node, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    selectedNodes[node.id] = 1;\r\n    delete selectableNodes[node.id];\r\n\r\n    // Turn its prerequisite potential edges into actual edges\r\n    // Keep grey edges as grey\r\n    if (node.data.conditions.prerequisites !== null) {\r\n        for (const prereq of node.data.conditions.prerequisites) {\r\n            if (potentialEdges.hasOwnProperty('e' + prereq + '-' + node.id)) {\r\n                selectedEdges['e' + prereq + '-' + node.id] = 1;\r\n                delete potentialEdges['e' + prereq + '-' + node.id];\r\n            }\r\n        }\r\n    }\r\n\r\n    // Unlock its future edges\r\n    if (node.data.unlocks !== null) {\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            // Edges from node to unlocks should be unselected\r\n            if (selectedNodes.hasOwnProperty(unlockCourse)) {\r\n                // This course is already selected. Make the edge a selected edge\r\n                selectedEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n            } else {\r\n                // This course is either unselected or selectable\r\n                // In either case, add potential edge\r\n                potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n            }\r\n        }            \r\n    }\r\n\r\n    return;\r\n}\r\n","// HELPER FUNCTION for unselecting nodes\r\n// Given a selected node, unselects it and pushes it onto a queue to be analysed\r\n// ==================ON THE QUEUE==========================\r\n// Unshift node and Manages its prerequisites as follows:\r\n//  - if the prereq node is selected, turn selected edges into potential edges\r\n//  - if otherwise, do nothing\r\n// Determine the status of the current node:\r\n//  - if it meets prerequisites, leave it as is.\r\n//  - if it does not meet prerequisites, make it unselectable (delete from selectable/selected)\r\n// For each unlock:\r\n// - if the current node is not selected, turn edge grey no matter what\r\n// - if the current node is selected, keep edge as it is\r\n// - push the unlock onto queue if it was selectable/selected\r\nimport getElement from './getelement.js';\r\nimport checkPrerequisites from './checkprerequisites.js';\r\n\r\nexport default function unselectNode(elements, node, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    // Unselect this node\r\n    delete selectedNodes[node.id];\r\n    var unselectQueue = [node.id];\r\n    while (unselectQueue.length !== 0) {\r\n        // Unshift and get the node\r\n        const current = getElement(unselectQueue.shift(), elements);\r\n        \r\n        // Analyse its prerequisites\r\n        // If the prereq node is selected, turn selected edge into potential edges\r\n        if (current.data.conditions.prerequisites !== null) {\r\n            for (const prereq of current.data.conditions.prerequisites) {\r\n                if (selectedNodes.hasOwnProperty(prereq)) {\r\n                    if (selectedEdges.hasOwnProperty('e' + prereq + '-' + current.id)) {\r\n                        delete selectedEdges['e' + prereq + '-' + current.id];\r\n                        potentialEdges['e' + prereq + '-' + current.id] = 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Determine the status of the current node\r\n        if (! checkPrerequisites(current, elements, selectedNodes)) {\r\n            // Does not meet prerequisites. Make it unselectable\r\n            if (selectableNodes.hasOwnProperty(current.id)) delete selectableNodes[current.id];\r\n            else if (selectedNodes.hasOwnProperty(current.id)) delete selectedNodes[current.id];\r\n        } else {\r\n            // Meets prerequisites. Make it selectable\r\n            if (selectedNodes.hasOwnProperty(current.id)) delete selectedNodes[current.id];\r\n            selectableNodes[current.id] = 1;\r\n        }\r\n\r\n        // Analyse its unlocks\r\n        if (current.data.unlocks !== null) {\r\n            for (const unlockCourse of current.data.unlocks) {\r\n                if (! selectedNodes.hasOwnProperty(current.id)) {\r\n                    // Make edge grey\r\n                    if (potentialEdges.hasOwnProperty('e' + current.id + '-' + unlockCourse)) delete potentialEdges['e' + current.id + '-' + unlockCourse];\r\n                    else if (selectedEdges.hasOwnProperty('e' + current.id + '-' + unlockCourse)) delete selectedEdges['e' + current.id + '-' + unlockCourse];\r\n                }\r\n\r\n                // Lets push everything no matter what and try it out\r\n                unselectQueue.push(unlockCourse);\r\n                /*if (selectedNodes.hasOwnProperty(unlockCourse) || selectableNodes.hasOwnProperty(unlockCourse)) {\r\n                    unselectQueue.push(unlockCourse);\r\n                }*/\r\n            }\r\n        }\r\n    }\r\n}","// HELPER FUNCTION to determine which previously unselectable nodes\r\n// are now selectable\r\nimport checkPrerequisites from './checkprerequisites.js';\r\n// import getElement from './getelement.js';\r\nimport {isNode} from 'react-flow-renderer';\r\n\r\nexport default function getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    // TODO: Deal with outsider nodes\r\n\r\n    const analyseNodesKeys = [];\r\n    for (const e of elements) {\r\n        if (isNode(e)) {\r\n            analyseNodesKeys.push(e);\r\n        }\r\n    }\r\n\r\n    // Analyse the target of potential edges for potential nodes\r\n    /*var analyseNodes = {};\r\n    const potentialEdgesKeys = Object.keys(potentialEdges);\r\n    for (var edge of potentialEdgesKeys) {\r\n        // Get the target course\r\n        const target = edge.split('-')[1];\r\n\r\n        if ((! selectedNodes.hasOwnProperty(target)) && (! selectableNodes.hasOwnProperty(target))) {\r\n            analyseNodes[edge.split('-')[1]] = 1;\r\n        }\r\n    }*/\r\n\r\n    \r\n    //const analyseNodesKeys = Object.keys(analyseNodes);\r\n    //console.log(\"==========ANALYSE NODES KEYS===========\");\r\n    //console.log(analyseNodesKeys);\r\n    //console.log(\"==============ELEMENTS===============\");\r\n    //console.log(elements);\r\n\r\n    for (const node of analyseNodesKeys) {\r\n        // Determine if the prerequisite has been met\r\n        //const node = getElement(nodeID, elements);\r\n        //console.log(node);\r\n        \r\n        // If the node is already selected, don't bother making it selectable\r\n        if (selectedNodes.hasOwnProperty(node.id)) continue;\r\n\r\n\r\n        if (checkPrerequisites(node, elements, selectedNodes)) {\r\n            //console.log(\"SELECTABLE\");\r\n            //console.log(node.id);\r\n            selectableNodes[node.id] = 1;\r\n        } else {\r\n            if (selectableNodes.hasOwnProperty(node.id)) delete selectableNodes[node.id];\r\n            //console.log(\"DELETE UNSELECTABLE\");\r\n            //console.log(node.id);\r\n            // TODO: Deal with selected nodes cases? (e.g. unselecting a child???)\r\n\r\n        }\r\n    }\r\n}","// HELPER FUNCTION to toggle exclusion courses\r\n// Will hide the current course and its edges, unhide the next course and edges\r\n// in the queue. Finds new edges to show by regex substitution???\r\nimport { getConnectedEdges } from 'react-flow-renderer';\r\nimport getElement from './getelement.js';\r\nimport checkPrerequisites from './checkprerequisites.js';\r\nimport unselectNode from './unselectnode.js';\r\n\r\nexport default function exclusionSwap(node, elements, edges, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups) {\r\n    /*console.log(\"EXCLUSION SWAP\");\r\n    console.log(exclusionGroups);\r\n    console.log(node.id);*/\r\n    const newElements = [...elements];\r\n    for (var group of exclusionGroups) {\r\n        //console.log(\"CHECKING\", group);\r\n        if (group.includes(node.id)) {\r\n            //console.log(\"FOUND THE EXCLUSION GROUP\");\r\n            //console.log(group);\r\n\r\n            // Move this to the back\r\n            const prevCourse = group.shift();\r\n            group.push(prevCourse);\r\n\r\n            // Current course we need to display is now at front of queue\r\n            const curCourse = group[0];\r\n\r\n            //console.log(prevCourse);-\r\n            //console.log(curCourse);\r\n\r\n\r\n            // Toggle the nodes themselves accordingly\r\n            for (var e of elements) {\r\n                if (e.id === prevCourse) {\r\n                    /*console.log(e);\r\n                    console.log(\"HIDING\");\r\n                    console.log(prevCourse);*/\r\n                    e.isHidden = true;\r\n                    //console.log(e);\r\n                } else if (e.id === curCourse) {\r\n                    /*console.log(e);\r\n                    console.log(\"REVEALING\");\r\n                    console.log(curCourse);*/\r\n                    e.isHidden = false;\r\n                    //console.log(e);\r\n                }\r\n            }\r\n\r\n            // Determine state of the nodes (E.g. COMP6441 can be selectable\r\n            // whilst COMP6841 is not)\r\n            var curNode = getElement(curCourse, elements);\r\n            if (checkPrerequisites(curNode, elements, selectedNodes)) {\r\n                // The new node is selectable\r\n                //console.log(\"================== SELECTABLE\", curCourse);\r\n                selectableNodes[curCourse] = 1;\r\n                \r\n                // Determine previous node condition\r\n                if (selectedNodes.hasOwnProperty(prevCourse)) {\r\n                    //console.log(\"PREVIOUS SELECTED\", prevCourse);\r\n                    delete selectedNodes[prevCourse];\r\n                    delete selectableNodes[curCourse];\r\n                    selectedNodes[curCourse] = 1;\r\n                } else if (selectableNodes.hasOwnProperty(prevCourse)) {\r\n                    //console.log(\"PREVIOUS SELECTABLE\", prevCourse);\r\n                    delete selectableNodes[prevCourse];\r\n                }\r\n            } else {\r\n                // The new node is not selectable\r\n                // Unselect the original node\r\n                unselectNode(elements, node, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            }         \r\n\r\n            // Get all the edges of the previous course and hide all of them\r\n            // Then use regex sub to determine the new edges to reveal\r\n            // Transfer over selected, potential and hover edges if they are in newedgeslist\r\n            var edgesList = getConnectedEdges([node], edges);\r\n            var newEdgesList = getConnectedEdges([curNode], edges);\r\n            var edgesIds = [];\r\n            var newEdgesIds = [];\r\n            for (const edge of edgesList) {\r\n                edgesIds.push(edge.id);\r\n            }\r\n            for (const newEdge of newEdgesList) {\r\n                newEdgesIds.push(newEdge.id);\r\n            }        \r\n\r\n            // Stores all the common edges\r\n            var checkedEdges = [];\r\n\r\n            // Go through each edge we need to hide and check what we should do\r\n            // with the edge in hideEdgesList\r\n            for (const edge of edgesList) {\r\n                var hideEdge = getElement(edge.id, elements);\r\n                hideEdge.isHidden = true;\r\n                var newEdgeId = hideEdge.id.replace(prevCourse, curCourse);\r\n                if (getElement(newEdgeId, edges) !== null) {\r\n                    checkedEdges.push(newEdgeId);\r\n                } \r\n\r\n                // If selected, unselect it\r\n                if (selectedEdges.hasOwnProperty(hideEdge.id)) {\r\n                    delete selectedEdges[hideEdge.id];\r\n                    if (newEdgesIds.includes(newEdgeId)) {\r\n                        // This is in the newEdges list. Transfer the edge property\r\n                        selectedEdges[newEdgeId] = 1;\r\n                    }\r\n                }\r\n\r\n                // If potential, unpotential it\r\n                if (potentialEdges.hasOwnProperty(hideEdge.id)) {\r\n                    delete potentialEdges[hideEdge.id];\r\n                    if (newEdgesIds.includes(newEdgeId)) {\r\n                        // This is in the newEdges list. Transfer the edge property\r\n                        potentialEdges[newEdgeId] = 1;\r\n                    }\r\n                }\r\n\r\n                // If hover, unhover it\r\n                if (hoverEdges.hasOwnProperty(hideEdge.id)) {\r\n                    delete hoverEdges[hideEdge.id];\r\n                    if (newEdgesIds.includes(newEdgeId)) {\r\n                        // This is in the newEdges list. Transfer the edge property\r\n                        hoverEdges[newEdgeId] = 1;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            //console.log(\"CHECKED EDGES\", checkedEdges);\r\n            \r\n            for (const edge of edgesIds) {\r\n                const newEdgeId = edge.replace(prevCourse, curCourse);\r\n                if (! checkedEdges.includes(newEdgeId)) {\r\n                    // Old edge which has not been transferred to new edge.\r\n                    // Deal with the TARGET NODE SELECTABILITY right here\r\n                    var target = newEdgeId.split('-')[1];\r\n                    //console.log(\"CHECKING\", newEdgeId);\r\n                    //console.log(\"TARGET IS\", target);\r\n                    // Note that we cannot use newEdge.target as this edge\r\n                    // DOES NOT EXIST ( i think )\r\n\r\n                    // TODO: TEMPORARY FIX. Make sure target is not current course\r\n                    if (target === curCourse) continue;\r\n\r\n                    if (selectableNodes.hasOwnProperty(target)) {\r\n                        //console.log(\"Deleting \" + target);\r\n                        delete selectableNodes[target];\r\n                    }\r\n                }\r\n            }\r\n\r\n            // For each edge, show it IF TARGET AND SOURCE ARE NOT HIDDEN\r\n            // Will also show any additional edges\r\n            // (Example: COMP6441, COMP6841. COMP6841 -> COMP6448 but COMP6441 does not)\r\n            for (const newEdge of newEdgesList) {\r\n                var edge = getElement(newEdge.id, elements);\r\n                const sourceNode = getElement(edge.source, elements);\r\n                const targetNode = getElement(edge.target, elements);\r\n                if ((!sourceNode.isHidden) && (!targetNode.isHidden)) {\r\n                    // Show the edge if both nodes are not hidden\r\n                    edge.isHidden = false;    \r\n                }\r\n\r\n                // Determine if this edge has been checked before\r\n                if (checkedEdges.includes(newEdge.id)) {\r\n                    // It has been checked before\r\n                    // TODO: THIS CAN BREAK if both nodes have same edges\r\n                    // but one has an additional prerequisite??????\r\n                    continue;\r\n                } else {\r\n                    //console.log(newEdge.id + \" NOT BEEN CHECKED BEFORE\")\r\n                    // It has NOT been checked before\r\n                    if (selectedNodes.hasOwnProperty(curCourse)) {\r\n                        //console.log(curCourse + \" was previously selected\");\r\n                        \r\n                        if (sourceNode.id === curCourse) {\r\n                            // Reveal node is selected and source of edge. Make potential edge.\r\n                            potentialEdges[newEdge.id] = 1;\r\n                            // Check if the target node is selectable\r\n                            if (! selectableNodes.hasOwnProperty(edge.target)) {\r\n                                if (checkPrerequisites(targetNode, elements, selectedNodes)) {\r\n                                    //console.log(edge.target + \" DOES MEET PREREQS\");\r\n                                    selectableNodes[targetNode.id] = 1;\r\n                                } else {\r\n                                    //console.log(edge.target + \" DOES NOT MEET PREREQS\");\r\n                                }\r\n                            }\r\n                        } else {\r\n                            // Reveal node is selected and target of edge. Check previous edges/nodes\r\n                            if (curNode.data.conditions.prerequisites !== null) {\r\n                                for (const prereq of curNode.data.conditions.prerequisites) {\r\n                                    if (selectedNodes.hasOwnProperty(prereq)) {\r\n                                        // This node was selected. Make the edge selected\r\n                                        if (potentialEdges.hasOwnProperty('e' + prereq + '-' + curCourse)) delete potentialEdges['e' + prereq + '-' + curCourse];\r\n                                        selectedEdges['e' + prereq + '-' + curCourse] = 1;\r\n                                    } else {\r\n                                        // This node was not selected. Make sure the edge is unselected\r\n                                        if (potentialEdges.hasOwnProperty('e' + prereq + '-' + curCourse)) delete potentialEdges['e' + prereq + '-' + curCourse];\r\n                                        if (selectedEdges.hasOwnProperty('e' + prereq + '-' + curCourse)) delete selectedEdges['e' + prereq + '-' + curCourse];\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        //console.log(curCourse + \" was not previously selected\")\r\n                        // The node was not selected before. Delete any potential edges\r\n                        // Make target node unselectable if prereqs are not met\r\n                        if (potentialEdges.hasOwnProperty(edge.id)) {\r\n                            //console.log(\"DELETING \" + edge.id);\r\n                            delete potentialEdges[edge.id];\r\n                            if (selectableNodes.hasOwnProperty(edge.target)) {\r\n                                //console.log(edge.target + \" WAS SELECTABLE\")\r\n                                if (! checkPrerequisites(targetNode, elements, selectedNodes)) {\r\n                                    //console.log(edge.target + \" DOES NOT MEET PREREQS\");\r\n                                    delete selectableNodes[targetNode.id];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            /*for (const newEdge of newEdgesList) {\r\n                for (const edge of newElements) {\r\n                    if (newEdge.id === edge.id) {\r\n                        const sourceNode = getElement(edge.source, elements);\r\n                        const targetNode = getElement(edge.target, elements);\r\n                        if ((!sourceNode.isHidden) && (!targetNode.isHidden)) {\r\n                            edge.isHidden = false;\r\n                            \r\n                            \r\n                            // If the new node is selected, make this edge blue\r\n                            // Else, make this edge grey. Deals with differing edge\r\n                            // cases COMP6441 and COMP6841\r\n                            if (selectedNodes.hasOwnProperty(curCourse)) {\r\n                                potentialEdges[edge.id] = 1;\r\n                                // Make sure the target node is selectable\r\n                                if (! selectableNodes.hasOwnProperty(edge.target)) {\r\n                                    if (checkPrerequisites(targetNode, selectedNodes)) {\r\n                                        selectableNodes[targetNode.id] = 1;\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                if (potentialEdges.hasOwnProperty(edge.id)) {\r\n                                   delete potentialEdges[edge.id];\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }*/\r\n\r\n\r\n            break;\r\n        }\r\n    }\r\n\r\n    return newElements;\r\n}","// HELPER FUNCTION FOR unselecting nodes\r\n// Determines if any nodes not connected to unselect node needs to be unselected.\r\n// For example, nodes which rely on N units completed\r\nimport checkPrerequisites from './checkprerequisites.js';\r\nimport checkPrequisiteUnits from './checkprerequisites.js';\r\nimport unselectNode from './unselectnode.js';\r\nimport getElement from './getelement.js';\r\n\r\nexport default function unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    console.log(\"UNSELECTUNCONNECTED\");\r\n    const selectedNodesList = Object.keys(selectedNodes);\r\n    for (const selected of selectedNodesList) {\r\n        if (selected === \"SENGAH\") continue;\r\n        console.log(\"CHECKING \" + selected);\r\n\r\n        // Determine if prerequisites are met\r\n        const selectedNode = getElement(selected, elements);\r\n        if (! checkPrerequisites(selectedNode, elements, selectedNodes)) {\r\n            // Prerequisites are not met\r\n            unselectNode(elements, selectedNode, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            continue;\r\n        }\r\n\r\n        // CASE if the node is selected and it has n_course prerequisite \r\n        if (selectedNode.data.conditions.units_required !== null) {\r\n            console.log(\"+++++++++++++++++++\", selectedNode.id);\r\n            // Units required exists\r\n            // Do not count the nodes it \"unlocks\" towards its unit count\r\n            // DO not count nodes with a higher \"units_required\" towards its unit count\r\n            // NOTE: This might backfire if it has an unlock which DOES NOT\r\n            // require it as a prerequisite\r\n            \r\n            var trueSelectedNodes = {...selectedNodes};\r\n\r\n            if (selectedNode.data.unlocks !== null) {\r\n                // Create unlock queue to process \"selected\" unlocks\"\r\n                const selectedUnlockQueue = [];\r\n                for (const unlockCourse of selectedNode.data.unlocks) {\r\n                    if (selectedNodes.hasOwnProperty(unlockCourse)) selectedUnlockQueue.push(unlockCourse);\r\n                }\r\n\r\n                while (selectedUnlockQueue.length !== 0) {\r\n                    const curUnlock = getElement(selectedUnlockQueue.shift(), elements);\r\n                    console.log(\"------------- deleting \" + curUnlock.id);\r\n                    delete trueSelectedNodes[curUnlock.id];\r\n\r\n                    if (curUnlock.data.unlocks !== null) {\r\n                        for (const unlockCourse of curUnlock.data.unlocks) {\r\n                            if (selectedNodes.hasOwnProperty(unlockCourse)) selectedUnlockQueue.push(unlockCourse);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // We now have a list of nodes which will count towards our current node's unit requirements\r\n            // Final check = Check for other selected nodes which have unit requirements\r\n            // Do not count them unless their unit requirements are smaller than current node's.\r\n            const trueSelectedNodesList = Object.keys(trueSelectedNodes);\r\n            for (const selected of trueSelectedNodesList) {\r\n                console.log(\"Checking \", selected);\r\n                const selectedUnitsNode = getElement(selected, elements);\r\n                if (selectedUnitsNode.data.conditions.units_required !== null) {\r\n                    if (selectedUnitsNode.data.conditions.units_required >= selectedNode.data.conditions.units_required) {\r\n                        delete trueSelectedNodes[selected];\r\n                    }\r\n                }\r\n            }\r\n\r\n            console.log(\"TRUE SELECTED LOOKS LIKE\", trueSelectedNodes);\r\n            // Perform prerequisite unit check once more\r\n            if (! checkPrequisiteUnits(selectedNode, elements, trueSelectedNodes)) {\r\n                unselectNode(elements, selectedNode, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            }\r\n        }\r\n    }\r\n\r\n    const selectableNodesList = Object.keys(selectableNodes);\r\n    for (const selectable of selectableNodesList) {\r\n        // Determine if prerequisites are met\r\n        const selectableNode = getElement(selectable, elements);\r\n        if (! checkPrerequisites(selectableNode, elements, selectedNodes)) {\r\n            // Prerequisites are not met\r\n            delete selectableNode[selectable];\r\n        }\r\n    }\r\n}","import React, {useState} from 'react';\r\nimport ReactFlow, {isNode, isEdge, ReactFlowProvider} from 'react-flow-renderer';\r\nimport TutorialNode1 from './tutorialnode1.js';\r\nimport TutorialNode2 from './tutorialnode2.js';\r\n\r\nimport hoverPrerequisites from './hoverprerequisites.js';\r\nimport unhoverPrerequisites from './unhoverprerequisites.js';\r\nimport highlightElements from './highlightelements.js';\r\nimport checkPrerequisites from './checkprerequisites.js';\r\n\r\nimport selectNode from './selectnode.js';\r\nimport unselectNode from './unselectnode.js';\r\nimport getSelectable from './getselectable.js';\r\nimport exclusionSwap from './exclusionswap.js';\r\nimport unselectUnconnected from './unselectunconnected.js';\r\n\r\nvar elementsData = [\r\n    {id: \"CODE0000\", type: \"tutorial1\", data: {instructions: \"Circles is an interactive graph to aid with your degree planning. Our timetable will automatically generate an plan for you which you can then adjust.\", course_level: null, units: 0, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: null, prerequisites: null, corequisites: null, units_required: null, level_for_units_required: null, core_year: null, other: null}, equivalents: null, exclusions: null, unlocks: [\"CODE1111\"]}, position: {x: 0, y: -100}, style: {display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 6, color: \"white\", background: \"black\", width: 64, height: 64, borderRadius: 32, filter: \"brightness(1.15)\", border: \"2px dashed black\"}, isHidden: false},\r\n    {id: \"CODE1111\", type: \"tutorial1\", data: {instructions: \"Click on a node to take the course\", course_level: null, units: 6, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: \"CODE0000\", prerequisites: [\"CODE0000\"], corequisites: null, units_required: null, level_for_units_required: null, core_year: null, other: null}, equivalents: null, exclusions: null, unlocks: [\"CODE2222\"]}, position: {x: -150, y: 0}, style: {display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 6, color: \"white\", background: \"black\", width: 64, height: 64, borderRadius: 32, filter: \"brightness(1.15)\", border: \"2px dashed black\"}, isHidden: false},\r\n    {id: \"CODE2222\", type: \"tutorial1\", data: {instructions: \"Courses light up when you meet all the prerequisites\", course_level: null, units: 6, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: \"CODE1111\", prerequisites: [\"CODE1111\"], corequisites: null, units_required: null, level_for_units_required: null, core_year: null, other: null}, equivalents: null, exclusions: null, unlocks: [\"CODE3333\", \"CODE4444\"]}, position: {x: 0, y: 0}, style: {display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 6, color: \"white\", background: \"black\", width: 64, height: 64, borderRadius: 32, filter: \"brightness(1.15)\", border: \"2px dashed black\"}, isHidden: false},\r\n    {id: \"CODE3333\", type: \"tutorial2\", data: {instructions: \"Some courses are togglable. Double click to try!\", course_level: null, units: 6, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: \"CODE2222\", prerequisites: [\"CODE2222\"], corequisites: null, units_required: null, level_for_units_required: null, core_year: null, other: null}, equivalents: null, exclusions: [\"CODE4444\"], unlocks: null}, position: {x: 150, y: 0}, style: {display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 6, color: \"white\", background: \"black\", width: 64, height: 64, borderRadius: 32, filter: \"brightness(1.15)\", border: \"2px dashed black\"}, isHidden: false},\r\n    {id: \"CODE4444\", type: \"tutorial2\", data: {instructions: \"SOME COURSES ARE TOGGLABLE. DOUBLE CLICK TO TRY!\", course_level: null, units: 6, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: \"CODE2222\", prerequisites: [\"CODE2222\"], corequisites: null, units_required: null, level_for_units_required: null, core_year: null, other: null}, equivalents: null, exclusions: [\"CODE3333\"], unlocks: null}, position: {x: 150, y: 0}, style: {display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 6, color: \"white\", background: \"black\", width: 64, height: 64, borderRadius: 32, filter: \"brightness(1.15)\", border: \"2px dashed black\"}, isHidden: false},\r\n    {id: \"CODE5555\", type: \"tutorial1\", data: {instructions: \"This course has a prerequisite of 18UOC. It will become selectable once you have taken enough units.\", course_level: null, units: 6, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: null, prerequisites: null, corequisites: null, units_required: 18, level_for_units_required: null, core_year: null, other: null}, equivalents: null, unlocks: null}, position: {x: 0, y: 100}, style: {display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 6, color: \"white\", background: \"black\", width: 64, height: 64, borderRadius: 32, filter: \"brightness(1.15)\", border: \"2px dashed black\"}, isHidden: false},\r\n\r\n    {id: 'eCODE0000-CODE1111', source: 'CODE0000', target: 'CODE1111', type: 'straight', style: {opacity: '0.2', stroke: 'grey'}, animated: false, isHidden: false},\r\n    {id: 'eCODE1111-CODE2222', source: 'CODE1111', target: 'CODE2222', type: 'straight', style: {opacity: '0.2', stroke: 'grey'}, animated: false, isHidden: false},\r\n    {id: 'eCODE2222-CODE3333', source: 'CODE2222', target: 'CODE3333', type: 'straight', style: {opacity: '0.2', stroke: 'grey'}, animated: false, isHidden: false},\r\n    {id: 'eCODE2222-CODE4444', source: 'CODE2222', target: 'CODE4444', type: 'straight', style: {opacity: '0.2', stroke: 'grey'}, animated: false, isHidden: false},\r\n];\r\n\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {\"CODE0000\": 1};\r\nvar selectedEdges = {};\r\nvar selectableNodes = {\"CODE1111\": 1};\r\nvar potentialEdges = {\"CODE0000-CODE1111\": 1};\r\nvar hoverEdges = {};\r\nvar exclusionGroups = [[\"CODE3333\", \"CODE4444\"]];\r\nvar exclusionNodes = {};\r\n\r\nconst nodeTypes = {\r\n    tutorial1: TutorialNode1,\r\n    tutorial2: TutorialNode2,\r\n};\r\n\r\n\r\n// elementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\n\r\n\r\n\r\nconst InteractiveTutorial = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n\r\n    const onLoad = (reactFlowInstance) => {\r\n        // HARD RESET STATE ON LOAD\r\n        console.log(\"ONLOAD\");\r\n        selectedNodes = {\"CODE0000\": 1};\r\n        selectedEdges = {};\r\n        selectableNodes = {\"CODE1111\": 1};\r\n        potentialEdges = {\"CODE0000-CODE1111\": 1};\r\n        hoverEdges = {};\r\n        exclusionGroups = [[\"CODE3333\", \"CODE4444\"]];\r\n        exclusionNodes = {};        \r\n        \r\n        for (var e of elements) {\r\n            e.isHidden = false;\r\n        }\r\n        for (const group of exclusionGroups) {\r\n            for (const exclusion of group) {\r\n                exclusionNodes[exclusion] = 1;\r\n            }\r\n        }\r\n        for (var group of exclusionGroups) {\r\n            const last = group.pop();\r\n            for (var course of elements) {\r\n                if (last === course.id) {\r\n                    course.isHidden = true;\r\n                    for (var edge of elements) {\r\n                        if (isNode(edge)) continue;\r\n                        if (edge.source === last || edge.target === last) {\r\n                            edge.isHidden = true;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            group.push(last);\r\n        }\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n        console.log(exclusionNodes);\r\n        reactFlowInstance.fitView();\r\n    };\r\n\r\n    const selectUnselect = (element) => {\r\n        unhoverPrerequisites(hoverEdges);\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n    \r\n    const toggleExclusion = (element) => {\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onElementClick = (event, element) => {\r\n        if (element.id === \"CODE0000\") return;\r\n        if (isEdge(element)) return;\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return;\r\n\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 200);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            selectUnselect(element);\r\n        }\r\n    }\r\n\r\n    const onNodeMouseEnter = (event, node) => {\r\n        setHoverNode(node);\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    return (\r\n        <ReactFlow\r\n            elements={elements}\r\n            style={{width: \"100%\", height: \"90vh\"}}\r\n            onLoad={onLoad}\r\n            nodeTypes={nodeTypes}\r\n            nodesConnectable={false}\r\n            onElementClick={onElementClick}\r\n            paneMoveable={false}\r\n            selectNodesOnDrag={false}\r\n            elementsSelectable={false}\r\n            nodesDraggable={false}\r\n            onNodeMouseEnter={onNodeMouseEnter}\r\n            onNodeMouseLeave={onNodeMouseLeave}\r\n        >\r\n        </ReactFlow>\r\n    );\r\n}\r\n\r\nexport default InteractiveTutorial;","import React from \"react\";\r\nimport { Button, Container, Modal } from 'semantic-ui-react'\r\nimport InteractiveTutorial from './interactivetutorial.js';\r\n\r\nfunction exampleReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'OPEN_MODAL':\r\n      return { open: true, dimmer: action.dimmer }\r\n    case 'CLOSE_MODAL':\r\n      return { open: false }\r\n    default:\r\n      throw new Error()\r\n  }\r\n}\r\n\r\nfunction TutorialModal() {\r\n  const [state, dispatch] = React.useReducer(exampleReducer, {\r\n    open: false,\r\n    dimmer: undefined,\r\n  })\r\n  const { open, dimmer } = state\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        size=\"mini\"\r\n        color=\"black\"\r\n        onClick={() => dispatch({ type: 'OPEN_MODAL', dimmer: 'blurring' })}\r\n      >\r\n        <text>Need Help?</text>  \r\n      </Button>\r\n\r\n      <Modal\r\n        closeIcon\r\n        dimmer={dimmer}\r\n        open={open}\r\n        onClose={() => dispatch({ type: 'CLOSE_MODAL' })}\r\n      >\r\n        <Container>\r\n          <InteractiveTutorial />\r\n        </Container>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TutorialModal\r\n\r\n//DropdownDegrees.clickDone() \r\n\r\n//DropdownDegrees d = new DropdownDegrees(); \r\n//d.clickDone()","import React from 'react';\r\nimport SidebarModal from \"./sidebar-modal.js\";\r\nimport TutorialModal from \"./tutorial-modal.js\";\r\nimport { Icon, Button, Container, Header, Divider, Grid, Segment, Message, Label } from 'semantic-ui-react';\r\nimport ScrollTo from \"react-scroll-into-view\";\r\nimport specialisationsJSON from \"../webscraper/specialisations.json\";\r\nimport coursesJSON from \"../webscraper/courses.json\";\r\n\r\nconst REGEX_COURSE_CODE = /[A-Z]{4}\\d{4}/g;\r\n\r\nconst getCoursesInLevel = (rawList) => {\r\n    rawList = rawList.filter(c => c !== \"ANY COURSE\");\r\n    const allCourseIds = Object.keys(coursesJSON);\r\n    const courseList = [];\r\n    rawList.forEach(courseId => {\r\n        if (courseId.match(REGEX_COURSE_CODE)) {\r\n            courseList.push(courseId);\r\n        } else if (courseId.match(/^[A-Z]{4}\\d$/)) {\r\n            const relevantCourses = allCourseIds.filter(c => c.includes(courseId));\r\n            relevantCourses.forEach(c => {\r\n                if (courseList.includes(c)) return;\r\n                courseList.push(c);\r\n            });\r\n        }\r\n    });\r\n\r\n    return courseList;\r\n}\r\n\r\nconst getSelectedCourses = (specialisationCode, selectedNodes) => {\r\n    const levels = Object.keys(specialisationsJSON[specialisationCode].structure);\r\n    const coreCourses = [];\r\n\r\n    return levels.filter(levelName => {\r\n        const courseList = specialisationsJSON[specialisationCode].structure[levelName].courses;\r\n        if (!courseList) return false;\r\n        if (courseList.length === 1 && courseList.includes(\"ANY COURSE\")) return false;\r\n        return true;\r\n    }).map(levelName => {\r\n        const rawList = specialisationsJSON[specialisationCode].structure[levelName].courses.flat();\r\n        const courseList = getCoursesInLevel(rawList);\r\n        const minUnits = specialisationsJSON[specialisationCode].structure[levelName].units_required;\r\n        const style = {\r\n            transition: \"0.3s ease\"\r\n        }\r\n        if (levelName.match(/[Cc]ore/g)) {\r\n            // CORE COURSE\r\n            courseList.forEach(c => coreCourses.push(c));\r\n            const unitsTaken = courseList.reduce((total, c) => total + (c in selectedNodes ? coursesJSON[c].units : 0), 0);\r\n            const showUnits = minUnits\r\n                ? <Label horizontal style={{transition: \"0.3s ease\", alignSelf: \"flex-start\"}} color={unitsTaken >= minUnits ? \"green\" : \"red\"}>{unitsTaken}/{minUnits}</Label>\r\n                : null;\r\n            return (\r\n                <Segment key={levelName} color=\"red\">\r\n                    <div style={{display: \"flex\"}}>\r\n                        <Header style={{flexGrow: \"1\"}} as=\"h5\">{levelName}</Header>\r\n                        {showUnits}\r\n                    </div>\r\n                    {courseList.map(c => c in selectedNodes ? <Label key={c} size=\"small\" color=\"grey\" style={style}>{c}</Label> : <Label key={c} size=\"small\" style={style}>{c}</Label>)}\r\n                </Segment>\r\n            )\r\n        } else {\r\n            // Not core course. Render segment with chosen electives only.\r\n            const unitsTaken = courseList.reduce((total, c) => total + (c in selectedNodes && !coreCourses.includes(c) ? coursesJSON[c].units : 0), 0);\r\n            const showUnits = minUnits\r\n                ? <Label horizontal style={{transition: \"0.3s ease\", alignSelf: \"flex-start\"}} color={unitsTaken >= minUnits ? \"green\" : \"red\"}>{unitsTaken}/{minUnits}</Label>\r\n                : null;\r\n            return (\r\n                <Segment key={levelName} style={{minHeight: \"70px\"}}>\r\n                    <div style={{display: \"flex\"}}>\r\n                        <Header style={{flexGrow: \"1\"}} as=\"h5\">{levelName}</Header>\r\n                        {showUnits}\r\n                    </div>\r\n                    {courseList.filter(c => (c in selectedNodes && !coreCourses.includes(c))).map(c => <Label key={c} size=\"small\" color=\"grey\" style={style}>{c}</Label>)}\r\n                </Segment>\r\n            )\r\n        }\r\n    })\r\n}\r\nclass Sidebar extends React.Component {\r\n    render() {\r\n        return (\r\n            <Container style={{paddingLeft: \"10px\", paddingRight: \"20px\"}}>\r\n                <Header as=\"h1\" textAlign=\"center\" style={{marginTop: \"10px\"}}>Circles</Header>\r\n                <Message info>\r\n                    <p>Circles is a <b>visual degree planner</b> for UNSW undergraduate students. Choose your program and degree to begin!</p>\r\n                    <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\"}}>\r\n                        <SidebarModal />\r\n                        <TutorialModal />\r\n                    </div>\r\n                </Message>\r\n                <Divider></Divider>\r\n                <Container>\r\n                    <Header as=\"h3\" textAlign=\"center\">Your selected courses</Header>\r\n                    {getSelectedCourses(\"SENGAH\", this.props.selectedNodes)}\r\n                </Container>\r\n                <Container textAlign=\"center\">\r\n                    <ScrollTo selector=\"#DegreePlanner\">\r\n                        <Button\r\n                            animated=\"vertical\"\r\n                            color=\"red\"\r\n                            style={{marginTop: \"10px\", marginBottom: \"10px\"}}\r\n                        >\r\n                            <Button.Content visible>Generate degree planner</Button.Content>\r\n                            <Button.Content hidden>\r\n                                <Icon name=\"arrow down\" />\r\n                            </Button.Content>\r\n                        </Button>\r\n                    </ScrollTo>\r\n\r\n                </Container>\r\n            </Container>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Sidebar","import React, { useState } from \"react\";\r\nimport { Button, Dropdown } from \"semantic-ui-react\";\r\nimport { useStoreActions } from \"react-flow-renderer\";\r\nimport dataJSON from \"../maps/EngineeringHonoursSoftware/data.json\";\r\nimport getElement from \"./getelement.js\";\r\n\r\nconst nodeOptions = [];\r\nconst elementsList = [];\r\n\r\nfor (const code in dataJSON) {\r\n    const id = dataJSON[code].id;\r\n    //console.log(\"Printing id\", id);\r\n    if (id.includes(\"-\")) continue;\r\n\r\n    elementsList.push(dataJSON[code]);\r\n    nodeOptions.push({\r\n        key: id,\r\n        value: id,\r\n        text: id,\r\n    });\r\n}\r\n\r\n// console.log(\"Printing NodeOptions\", nodeOptions);\r\n\r\nexport default function DropdownSearch() {\r\n    const [search, setSearch] = useState(null);\r\n\r\n    /*state = {\r\n        search: null,\r\n        getOptions: nodeOptions\r\n    }*/\r\n\r\n    const handleChange = (e, prop) => {\r\n        setSearch(prop.value);\r\n    };\r\n\r\n    const { setInitTransform } = useStoreActions((actions) => actions);\r\n    const transformUpdater = (x, y, zoom) => {\r\n        setInitTransform({ x, y, k: zoom });\r\n    };\r\n\r\n    const clickDone = () => {\r\n        if (search === null) return;\r\n        const element = getElement(search, elementsList);\r\n        transformUpdater(\r\n            -element.position.x + 600,\r\n            -element.position.y + 350,\r\n            1\r\n        );\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dropdown\r\n                selection\r\n                search\r\n                options={nodeOptions}\r\n                placeholder=\"Looking for a course?\"\r\n                onChange={handleChange}\r\n                onKeyPress={event => {\r\n                    if (event.key === 'Enter') {\r\n                      clickDone();\r\n                    }\r\n                  }}\r\n                value={search}\r\n            />\r\n            <Button\r\n                onClick={clickDone}\r\n                icon=\"search\"\r\n                color=\"blue\"\r\n                style={{marginLeft: \"5px\"}}\r\n            >\r\n            </Button>\r\n        </>\r\n    );\r\n}\r\n","import React, {useState} from 'react';\r\n// import ReactFlow, {Background, Controls, getConnectedEdges, isNode, isEdge, useStoreState, useStoreActions, ReactFlowProvider, EdgeText} from 'react-flow-renderer';\r\nimport ReactFlow, { isNode, isEdge, ReactFlowProvider } from 'react-flow-renderer';\r\n\r\nimport CustomNode1 from '../../components/customnode1.js';\r\nimport CustomNode2 from '../../components/customnode2.js';\r\nimport HeaderNode1 from '../../components/headernode1.js';\r\n\r\nimport HoverInfo from '../../components/hoverinfo.js';\r\nimport hoverPrerequisites from '../../components/hoverprerequisites.js';\r\nimport unhoverPrerequisites from '../../components/unhoverprerequisites.js';\r\n\r\nimport { Grid } from 'semantic-ui-react'\r\nimport Sidebar from \"../../components/sidebar.js\"\r\n// import pkg from 'semantic-ui-react/package.json'\r\n\r\nimport DegreePlanner from \"../../components/degreeplanner.js\"\r\nimport DropdownSearch from \"../../components/dropdownsearch.js\"\r\n\r\n// import positionHelper from '../../components/positionhelper.js';\r\nimport selectNode from '../../components/selectnode.js';\r\nimport unselectNode from '../../components/unselectnode.js';\r\nimport highlightElements from '../../components/highlightelements.js';\r\nimport getSelectable from '../../components/getselectable.js';\r\nimport checkPrerequisites from '../../components/checkprerequisites';\r\nimport exclusionSwap from '../../components/exclusionswap.js';\r\n// import getElement from '../../components/getelement.js';\r\nimport unselectUnconnected from '../../components/unselectunconnected.js';\r\n\r\n// import SearchPan from '../../components/searchpan.js';\r\n\r\n// import GetPan from '../../components/getpan.js';\r\n\r\nvar elementsData = require(\"./data.json\");\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {\r\n    'SENGAH': 1,\r\n}\r\nvar selectedEdges = {};\r\nvar selectableNodes = {};\r\nvar potentialEdges = {};\r\nvar hoverEdges = {};\r\n\r\n// Load up the chart with initial selectable nodes and edges\r\nfor (const node of nodesData) {\r\n    if (selectedNodes.hasOwnProperty(node.id)) {\r\n        if (node.data.unlocks === null) continue;\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n        }\r\n    } else if (checkPrerequisites(node, elementsData, selectedNodes)) {\r\n        selectableNodes[node.id] = 1;\r\n    }\r\n}\r\n\r\nvar exclusionGroups = require(\"./data_exclusion.json\");\r\nvar exclusionNodes = {};\r\nfor (const group of exclusionGroups) {\r\n    for (const exclusion of group) {\r\n        exclusionNodes[exclusion] = 1;\r\n    }\r\n}\r\n\r\nelementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\n\r\nconst onLoad = (reactFlowInstance) => {\r\n    for (var group of exclusionGroups) {\r\n        const last = group.pop();\r\n\r\n        for (var course of elementsData) {\r\n            if (last === course.id) {\r\n                course.isHidden = true;\r\n                // console.log(\"Hiding \" + course.id);\r\n                // Get all the edges and hide them too\r\n                for (var edge of elementsData) {\r\n                    if (isNode(edge)) continue;\r\n                    if (edge.source === last || edge.target === last) {\r\n                        // console.log(\"hiding \" + edge.id);\r\n                        edge.isHidden = true;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        group.push(last);\r\n    }\r\n    reactFlowInstance.setTransform({x: 470, y: 350, zoom: 0.38});\r\n};\r\n\r\nconst nodeTypes = {\r\n    custom1: CustomNode1,\r\n    custom2: CustomNode2,\r\n    header1: HeaderNode1\r\n};\r\n\r\nconst layoutStyle = {overflowX: \"hidden\", overflowY: \"overlay\", width: \"100vw\", height: \"100vh\"};\r\n\r\nconst BESengah = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverText, setHoverText] = useState(false);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    // const [sidebarOpen, setSidebarOpen] = useState(false);\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n    const [layout, setLayout] = useState(layoutStyle);\r\n\r\n    const selectUnselect = (element) => {\r\n        // NOTE: Might not need this?????\r\n        // EXPLANATION: Reason we dont need it is because we have to leave node\r\n        // anyways to hover another node. But maybe good practise to have just in case\r\n        // Unhover edges which lit up on nodeMouseEnter\r\n        unhoverPrerequisites(hoverEdges);\r\n\r\n        // 1. Select the node and fill in edges.\r\n        // - Deal with unselecting nodes\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"MAINSELECT\");\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"UNSELECTING\");\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n\r\n        console.log(\"==========SelectedNodes==========\");\r\n        console.log(selectedNodes);\r\n        console.log(\"==========SelectedEdges==========\");\r\n        console.log(selectedEdges);\r\n        console.log(\"==========SelectableNodes==========\");\r\n        console.log(selectableNodes);\r\n        console.log(\"==========PotentialEdges==========\");\r\n        console.log(potentialEdges);\r\n\r\n        // 2. Determine which nodes are now selectable\r\n        // - Determine which previously selectable nodes are now unselectable\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n\r\n        // Render graph accordingly\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const toggleExclusion = (element) => {\r\n        // TODO: ARE there courses which do not \r\n        // For all immediate edges of the element, swap\r\n        // with the exclusion course\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    // ==========ONCLICK==========\r\n    const onElementClick = (event, element) => {\r\n        // console.log(\"ONELEMENTCLICK\");\r\n        if (isEdge(element)) return; // Don't care about edges\r\n        if (element.id === 'SENGAH') return; // Cannot click on main node\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return; // Cannot select non selectable nodes\r\n\r\n        // Determine double or single click for exclusion nodes\r\n        // This will prevent normal nodes from waiting the double click delay\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 200);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            // Not an exclusion node.\r\n            selectUnselect(element);\r\n        }\r\n    };\r\n    // ===========================\r\n\r\n    // ==========ONHOVER==========\r\n    const onNodeMouseEnter = (event, node) => {\r\n        if (node.id === 'SENGAH') return;\r\n        // Display node information in top left\r\n        setHoverText(true);\r\n        setHoverNode(node);\r\n\r\n        // If the node is unselected, highlight prerequisite edges in purple\r\n        //if ((!selectedNodes.hasOwnProperty(node.id)) && (!selectableNodes.hasOwnProperty(node.id))) {\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        //}\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        if (node.id === 'SENGAH') return;\r\n        setHoverText(false);\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    let hoverDisplay;\r\n    if (hoverText) {\r\n        hoverDisplay = <HoverInfo node={hoverNode}/>\r\n    }\r\n\r\n    // ===========================\r\n\r\n    const onNodeDragStop = (event, node) => {\r\n        for (var e of elements) {\r\n            if (e.id === node.id) {\r\n                e.position.x = node.position.x;\r\n                e.position.y = node.position.y;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const disableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'hidden'});\r\n    }\r\n\r\n    const enableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'overlay'});\r\n    }\r\n\r\n    return (\r\n        <div style={{positon: \"relative\"}}>\r\n            <div style={layout}>\r\n                <Grid columns={2} divided>\r\n                    <Grid.Column width=\"12\">\r\n                        <ReactFlowProvider onMouseEnter={disableBodyScroll} onMouseLeave={enableBodyScroll}>\r\n                            <div style={{position: \"absolute\", zIndex: \"10\", top: \"30px\", right: \"30px\"}}>\r\n                                <DropdownSearch/>\r\n                            </div>\r\n                            <ReactFlow\r\n                                elements={elements}\r\n                                style={{width: '100%', height: '100vh'}}\r\n                                onLoad={onLoad}\r\n                                nodeTypes={nodeTypes}\r\n                                nodesConnectable={false}\r\n                                onElementClick={onElementClick}\r\n                                minZoom={0.38}\r\n                                //setInitTransform={TransformUpdater({x: 100, y: 100, z: 1})}\r\n                                //nodesDraggable={false}\r\n                                onNodeMouseEnter={onNodeMouseEnter}\r\n                                onNodeMouseLeave={onNodeMouseLeave}\r\n                                selectNodesOnDrag={false}\r\n                                onNodeDragStop={onNodeDragStop}\r\n                                elementsSelectable={false}\r\n                            >\r\n                            </ReactFlow>\r\n                        </ReactFlowProvider>\r\n                    </Grid.Column>\r\n                    <Grid.Column width=\"4\">\r\n                        <Sidebar selectedNodes={selectedNodes}/>\r\n                    </Grid.Column>\r\n                </Grid>\r\n                {hoverDisplay}\r\n                {/* <button onClick={positionHelper(elements)}>GENERATE POSITION</button> */}\r\n                <div id=\"DegreePlanner\">\r\n                    <DegreePlanner key={Object.keys(selectedNodes).join(\"\")}selectedCourses={Object.keys(selectedNodes)} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BESengah;","import React, {useState, Fragment} from 'react';\r\nimport ReactFlow, {Background, Controls, MiniMap} from 'react-flow-renderer';\r\n\r\nvar initialElements = [\r\n    {id: '1', style: {opacity: 1}, position: {x: 0, y: 0}, data: {label: 'VINCENT'}, type: 'default'},\r\n    {id: '2', style: {opacity: 1}, position: {x: 0, y: 100}, data: {label: 'HAYES'}, type: 'default'},\r\n    {id: '3', style: {opacity: 1}, position: {x: 0, y: -100}, data: {label: 'JAMES'}, type: 'default'},\r\n    \r\n    {id: 'e1-2', source: '1', target: '2', type: 'step', animated: true}\r\n];\r\n\r\nconst onLoad = (reactFlowInstance) => {\r\n    reactFlowInstance.fitView();\r\n}\r\n\r\nconst Teaching = () => {\r\n    const [elements, setElements] = useState(initialElements);\r\n    // const [isDraggable, setIsDraggable] = useState(true);\r\n\r\n    const addNode = () => {\r\n        setElements(e => e.concat({\r\n            id: (e.length+1).toString(),\r\n            data: {label: 'new node' + e.length},\r\n            position: {x: Math.random() * window.innerWidth, y: Math.random() * window.innerHeight}\r\n        }));\r\n    };\r\n    \r\n\r\n    const onClick = (event, element) => {\r\n        console.log('hi');\r\n        setElements((els) =>\r\n            els.map((e) => {\r\n                if (e.id === element.id) {\r\n                    console.log(element);    \r\n                    console.log(e.style.opacity);\r\n                    return e;\r\n                }\r\n                return e;\r\n            })\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <ReactFlow\r\n                elements={elements}\r\n                onLoad={onLoad}\r\n                style={{width: \"100%\", height: \"99vh\"}}\r\n                onElementClick={onClick}\r\n                nodesDraggable={false}\r\n            >\r\n                <Background />\r\n                <MiniMap \r\n                    nodeColor = {n=>{\r\n                        if (n.data.label === 'VINCENT') return 'red';\r\n                        return 'blue';\r\n                    }}\r\n                />\r\n                <Controls />\r\n            </ReactFlow>\r\n            <div>\r\n                <button type=\"button\" onClick={addNode}>\r\n                    ADD NEW NODE HERE!!!!\r\n                </button>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Teaching;","import React, {Component} from 'react';\r\nimport { Route, HashRouter } from 'react-router-dom';\r\n\r\nimport BESengah from './maps/EngineeringHonoursSoftware/map.js';\r\nimport Teaching from './components/teaching.js';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <HashRouter basename='/'>\r\n        <div>\r\n          <Route path=\"/\" component={BESengah} />\r\n          <Route path=\"/Teaching\" component={Teaching}/>\r\n        </div>\r\n      </HashRouter>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType !== null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/refresh.5c376b6e.svg\";"],"sourceRoot":""}