{"version":3,"sources":["assets/refresh.svg","components/checkprerequisites.js","components/getelement.js","components/degreeplanner.js","components/degreeplanner-course.jsx","components/degreeplanner-term.jsx","components/customnode1.js","components/customnode2.js","components/headernode1.js","components/hoverinfo.js","components/hoverprerequisites.js","components/unhoverprerequisites.js","components/dropdownDegrees.js","components/sidebar-modal.js","components/tutorialnode1.js","components/tutorialnode2.js","components/highlightelements.js","components/selectnode.js","components/unselectnode.js","components/getselectable.js","components/exclusionswap.js","components/unselectunconnected.js","components/interactivetutorial.js","components/tutorial-modal.js","components/sidebar.js","components/dropdownsearch.js","components/positionhelper.js","maps/EngineeringHonoursSoftware/map.js","maps/ComputerScienceCOMPA1ACCTA2/map.js","maps/ComputerScienceCOMPA1FINSA2/map.js","maps/ComputerScienceCOMPA1MARKA2/map.js","maps/ComputerScienceCOMPA1INFSA2/map.js","maps/ComputerScienceCOMPA1PSYCM2/map.js","maps/EngineeringHonoursSoftware/teaching.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","checkPrerequisites","node","elements","selectedNodes","data","conditions","units_required","level_for_units_required","checkPrerequisiteUnitsLevel","prerequisites","prereqs_executable","checkPrerequisiteUnits","condition","replace","match","hasOwnProperty","eval","total","target","Object","keys","selected","id","getElement","units","core_year","courseType","substr","concat","selectedList","takenNode","elementsData","e","REGEX_COURSE_CODE","mapTermIds","term","mapTermFull","updateCourses","coursesJSON","dataJSON","forEach","course","terms","rawCoursesJSON","getCourses","selectedCourses","courses","c","termsAvailable","map","content","course_name","placeholderTerms","generateTerms","yearId","TSKey","T1Key","T2Key","T3Key","title","courseIds","addPriority","priority","courseId","unlocksCourse","prereq","unlocks","push","prioritiseCourses","level","Number","filter","t","length","prioritised","values","sort","a","b","checkPrereqsMet","termPlan","termId","runningTotalUnits","prereqsExecutable","coursesTaken","reduce","addCourseToPlan","includes","courseUnits","substring","populateTerms","maxYears","prioritisedCourses","year","makePlan","plan","generatePlanScaffold","years","toString","DegreePlanner","state","props","program","specialisations","onDragEnd","result","destination","source","draggableId","droppableId","index","sourceYear","start","destinationYear","finish","startCourseIds","Array","from","splice","newStart","finishCourseIds","newFinish","newState","setState","newCourseIds","newTerm","getConsiderationMessages","programId","programUnits","programsJSON","considerationMessages","getCourseLink","rel","href","getCoursesInLevel","rawList","flat","allCourseIds","courseList","totalUnits","Item","name","degree","coursesInDegree","levelName","specialisationsJSON","structure","specialisationId","degreeUnitsRequired","degreeUnitsTaken","coreCourses","levelCourses","selectedUnits","replaceAll","join","style","marginBottom","transition","positive","Header","List","error","as","textAlign","marginTop","this","onDragStart","key","columns","termOrder","Column","allCourses","fluid","height","padding","React","Component","Course","Container","provided","ref","innerRef","draggableProps","dragHandleProps","Label","margin","display","flexGrow","marginLeft","alignSelf","Icon","placeholder","checkTermAvailability","checkValidCourses","Term","snapshot","Segment","backgroundColor","isDraggingOver","draggingOverWith","colour","color","floating","showUnits","droppableProps","minHeight","zIndex","pointerEvents","opacity","top","memo","type","position","course_code","iconSize","width","bottom","src","Refresh","alt","degree_name","left","maxWidth","HoverInfo","raised","raw","exclusions","hoverPrerequisites","selectedEdges","selectableNodes","potentialEdges","hoverEdges","prereqQueue","current","shift","unhoverPrerequisites","edge","courseOptions","programOptions","code","degrees_involved","majors","honours","replacement","spec","getMajors","minors","console","log","getMinors","DropdownDegrees","majorOptions","minorOptions","disabledPrimary","disabledSecondary","hiddenPrimary","hiddenSecondary","valProgram","valPrimary","valSecondary","phPrimary","phSecondary","chooseProgram","value","choosePrimary","chooseSecondary","minor","getLink","supported","isDisabled","messageVisible","getMessage","Message","warning","Grid","centered","Row","Dropdown","selection","search","onChange","options","enabled","disabled","visibility","clearable","Button","exampleReducer","action","open","dimmer","Error","SideBarModal","useReducer","undefined","dispatch","size","onClick","Modal","closeIcon","onClose","instructions","selectedEdgeAnimated","stroke","strokeWidth","selectedEdgeStatic","hoverEdge","potentialHoverEdge","potentialEdge","unselectedEdge","highlightElements","isEdge","animated","textSelectedColour","background","selectedColour","textColour","selectableColour","selectNode","unlockCourse","unselectNode","unselectQueue","getSelectable","analyseNodesKeys","isNode","exclusionSwap","edges","exclusionGroups","newElements","group","prevCourse","curCourse","isHidden","curNode","edgesList","getConnectedEdges","newEdgesList","edgesIds","newEdgesIds","newEdge","checkedEdges","hideEdge","newEdgeId","split","sourceNode","targetNode","unselectUnconnected","selectedNode","trueSelectedNodes","selectedUnlockQueue","curUnlock","selectedUnitsNode","checkPrequisiteUnits","selectable","selectableNode","course_level","corequisites","other","equivalents","x","y","cursor","alignItems","justifyContent","fontSize","borderRadius","border","boxShadow","edgesData","exclusionNodes","nodeTypes","tutorial1","TutorialNode1","tutorial2","TutorialNode2","InteractiveTutorial","useState","setElements","setHoverNode","clickCount","singleClickTimer","selectUnselect","element","onLoad","reactFlowInstance","exclusion","last","pop","fitView","nodesConnectable","onElementClick","event","setTimeout","clearTimeout","toggleExclusion","paneMoveable","selectNodesOnDrag","elementsSelectable","nodesDraggable","onNodeMouseEnter","onNodeMouseLeave","TutorialModal","getSelectedCourses","specialisationCodes","specId","levels","minUnits","unitsTaken","horizontal","Sidebar","paddingLeft","paddingRight","info","flexDirection","Divider","selector","Content","visible","hidden","DropdownSearch","setSearch","setInitTransform","useStoreActions","actions","clickDone","searchElements","window","innerWidth","innerHeight","k","searchNodeOptions","prop","onKeyPress","icon","positionHelper","positioning_data","slice","text","nodesData","specialisation","require","custom1","CustomNode1","custom2","CustomNode2","header1","HeaderNode1","layoutStyle","overflowX","overflowY","getMoreCoursesForDropdown","moreOptions","nodesOnFlowchart","BESengah","hoverDisplay","hoverText","setHoverText","hoverNode","layout","setLayout","additionalCourses","setAdditionalCourses","positon","divided","onMouseEnter","onMouseLeave","instance","setTransform","zoom","minZoom","right","multiple","ComputerScienceCOMPA1ACCTA2","ComputerScienceCOMPA1FINSA2","ComputerScienceCOMPA1MARKA2","ComputerScienceCOMPA1INFSA2","ComputerScienceCOMPA1PSYCM2","Teaching","setReactFlowInstance","dropSearch","canvasSize","size1","project","size2","getCanvasSize","onNodeDragStop","App","basename","path","component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.423a76eb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/refresh.5c376b6e.svg\";","// Returns true if all prerequisites are met for a given node\r\n// Returns false if prerequisites are not met for a given node\r\n// Will only analyse targets of potential edges\r\n\r\nimport getElement from './getelement.js';\r\n\r\n// NOTE: Assumes that source of potential edges are always selected\r\nexport default function checkPrerequisites(node, elements, selectedNodes) {\r\n    if (node.data.conditions.units_required !== null && node.data.conditions.level_for_units_required !== null) {\r\n        // Get the type of course this is\r\n        return(checkPrerequisiteUnitsLevel(node, elements, selectedNodes));\r\n    }\r\n\r\n    if (node.data.conditions.prerequisites !== null && node.data.conditions.prereqs_executable !== null) {\r\n        // Evaluate the condition\r\n        //console.log(\"HERE\");\r\n        //console.log(node.data.conditions.prereqs_executable);\r\n\r\n        // Check if units have been met if it has a unit requirement\r\n        if (node.data.conditions.units_required !== null) {\r\n            if (! checkPrerequisiteUnits(node, elements, selectedNodes)) return false;\r\n            // Remember we also have to check its prerequisites!!!\r\n        }\r\n\r\n        var condition = node.data.conditions.prereqs_executable;\r\n        //console.log(condition);\r\n        condition = condition.replace(/[A-Z]{4}[A-Z0-9]+/gi, function(match) {\r\n            //console.log(match);\r\n            if (selectedNodes.hasOwnProperty(match)) {\r\n                return 1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        });\r\n        // eslint-disable-next-line\r\n        if (eval(condition)) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    return(checkPrerequisiteUnits(node, elements, selectedNodes));\r\n\r\n    // TODO: Check for corerequsiites and exclusion courses as well\r\n    // TODO: Check for completion of units and core_year\r\n\r\n    // Check if these nodes are enough to satisfy prerequisites\r\n    // Get the prerequisite condition and replace courses by 1 if they have been\r\n    // selected and 0 if they have not.\r\n\r\n}\r\n\r\n// Perform prerequisite check for units given the node to check, elements and all\r\n// the selected nodes. Returns true/false\r\nexport function checkPrerequisiteUnits(node, elements, selectedNodes) {\r\n    if (node.data.conditions.units_required !== null) {\r\n        if (node.data.conditions.level_for_units_required === null) {\r\n            // See if we meet the total for this course\r\n            var total = 0;\r\n            const target = node.data.conditions.units_required;\r\n            // console.log(selectedNodes);\r\n            const selectedList = Object.keys(selectedNodes);\r\n            for (const selected of selectedList) {\r\n                if (selected === node.id) continue; // The node can't include itself\r\n                const takenNode = getElement(selected, elements);\r\n                total += takenNode.data.units;\r\n            }\r\n            \r\n            if (total >= target) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            // This should have been dealt with in the main function\r\n            // Only check specific level courses\r\n            // We will put it here anyways because unselectconnected imports this function alone\r\n            return(checkPrerequisiteUnitsLevel(node, elements, selectedNodes));\r\n        }\r\n    } else if (node.data.conditions.core_year !== null) {\r\n        // NOTE: Hardcoded this for comp courses in sengah\r\n        return true;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n// Perform prerequisite check for nodes which require X units of Y level courses\r\nfunction checkPrerequisiteUnitsLevel(node, elements, selectedNodes) {\r\n    // Determine the type of course\r\n    var courseType = node.id.substr(0, 4);\r\n    courseType = courseType.concat(node.data.conditions.level_for_units_required);\r\n\r\n    var total = 0;\r\n    const target = node.data.conditions.units_required;\r\n    const selectedList = Object.keys(selectedNodes);\r\n    for (const selected of selectedList) {\r\n        if (selected.substr(0, 5) !== courseType) continue; // Not the right course type\r\n        if (selected === node.id) continue; // The node can't include itself\r\n        const takenNode = getElement(selected, elements);\r\n        total += takenNode.data.units;\r\n    }\r\n\r\n    if (total >= target) {\r\n        // If it has conditions, check the conditions\r\n        if (node.data.conditions.prerequisites !== null && node.data.conditions.prereqs_executable !== null) {\r\n            // Evaluate the condition\r\n\r\n            var condition = node.data.conditions.prereqs_executable;\r\n            condition = condition.replace(/[A-Z]{4}[A-Z0-9]+/gi, function(match) {\r\n                if (selectedNodes.hasOwnProperty(match)) {\r\n                    return 1;\r\n                } else {\r\n                    return 0;\r\n                }\r\n            });\r\n            // eslint-disable-next-line\r\n            if (eval(condition)) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n    \r\n}","// Given an id, returns the element\r\nconst getElement = (id, elementsData) => {\r\n    //console.log(\"GET ELEMENT OF \" + id);\r\n    for (var e of elementsData) {\r\n        if (e.id === id) {\r\n            return e;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport default getElement;","import React from 'react';\r\nimport { Container, Segment, Header, Message, Grid } from 'semantic-ui-react'\r\n\r\nimport dataJSON from \"../maps/EngineeringHonoursSoftware/data.json\"\r\nimport rawCoursesJSON from \"../webscraper/courses.json\"\r\n\r\nimport programsJSON from \"../webscraper/programs.json\"\r\nimport specialisationsJSON from \"../webscraper/specialisations.json\"\r\n\r\nimport { DragDropContext } from \"react-beautiful-dnd\"\r\nimport Term from \"./degreeplanner-term\"\r\n\r\nconst REGEX_COURSE_CODE = /[A-Z]{4}\\d{4}/g;\r\n\r\nconst mapTermIds = (term) => {\r\n    if (term === \"Summer Term\") return \"TS\";\r\n    if (term === \"Term 1\") return \"T1\";\r\n    if (term === \"Term 2\") return \"T2\";\r\n    if (term === \"Term 3\") return \"T3\";\r\n    return;\r\n}\r\n\r\nconst mapTermFull = (term) => {\r\n    if (term === \"TS\") return \"Summer Term\";\r\n    if (term === \"T1\") return \"Term 1\";\r\n    if (term === \"T2\") return \"Term 2\";\r\n    if (term === \"T3\") return \"Term 3\";\r\n}\r\n\r\nconst updateCourses = (coursesJSON, dataJSON) => {\r\n    dataJSON.forEach(course => {\r\n        if (!(course.id in coursesJSON)) return;\r\n        coursesJSON[course.id].conditions.prereqs_executable = course.data.conditions.prereqs_executable\r\n        coursesJSON[course.id].terms = course.data.terms;\r\n    });\r\n    return coursesJSON;\r\n}\r\n\r\nconst coursesJSON = updateCourses(rawCoursesJSON, dataJSON);\r\n\r\nconst getCourses = (selectedCourses) => {\r\n    const courses = {}\r\n\r\n    selectedCourses.forEach(c => {\r\n        if (!(c in coursesJSON)) return;\r\n\r\n        let termsAvailable;\r\n        if (!coursesJSON[c].terms) {\r\n            termsAvailable = [\"TS\", \"T1\", \"T2\", \"T3\"];\r\n        } else {\r\n            termsAvailable = coursesJSON[c].terms.map(term => mapTermIds(term));\r\n        }\r\n\r\n        courses[c] = {\r\n            id: c,\r\n            content: `${c} - ${coursesJSON[c].course_name}`,\r\n            termsAvailable: termsAvailable,\r\n            placeholderTerms: !coursesJSON[c].terms,\r\n            units: coursesJSON[c].units\r\n        }\r\n    })\r\n\r\n    return courses\r\n}\r\n\r\nconst generateTerms = (yearId) => {\r\n    const terms = {}\r\n\r\n    // Terms have id of <YEAR>T<TERM TYPE> eg: 1TS is 1st Year, Summer Term\r\n\r\n    const TSKey = `${yearId}TS`;\r\n    const T1Key = `${yearId}T1`;\r\n    const T2Key = `${yearId}T2`;\r\n    const T3Key = `${yearId}T3`;\r\n    terms[\"termOrder\"] = [TSKey, T1Key, T2Key, T3Key];\r\n\r\n    terms[TSKey] = {\r\n        id: TSKey,\r\n        title: `Year ${yearId} - Summer Term`,\r\n        courseIds: []\r\n    }\r\n\r\n    terms[T1Key] = {\r\n        id: T1Key,\r\n        title: `Year ${yearId} - Term One`,\r\n        courseIds: []\r\n    }\r\n\r\n    terms[T2Key] = {\r\n        id: T2Key,\r\n        title: `Year ${yearId} - Term Two`,\r\n        courseIds: []\r\n    }\r\n\r\n    terms[T3Key] = {\r\n        id: T3Key,\r\n        title: `Year ${yearId} - Term Three`,\r\n        courseIds: []\r\n    }\r\n\r\n    return terms;\r\n}\r\n\r\nconst addPriority = (priority, courseId, unlocksCourse) => {\r\n    if (!(courseId in coursesJSON)) return priority;\r\n    if (!coursesJSON[courseId].conditions.prerequisites) return priority;\r\n\r\n    for (const prereq of coursesJSON[courseId].conditions.prerequisites) {\r\n        if (!(prereq in priority)) continue;\r\n        if (courseId === prereq) continue;\r\n\r\n        priority[prereq].unlocks.push(unlocksCourse);\r\n        priority = addPriority(priority, prereq, unlocksCourse);\r\n    }\r\n\r\n    return priority;\r\n}\r\n\r\nconst prioritiseCourses = (selectedCourses) => {\r\n    // Initiate priorities\r\n    var priority = {};\r\n    for (const courseId of selectedCourses) {\r\n        if (!(courseId in coursesJSON)) continue\r\n\r\n        priority[courseId] = {\r\n            courseId: courseId,\r\n            level: Number(courseId[4]),\r\n            unlocks: [],\r\n            termsAvailable: coursesJSON[courseId].terms ? coursesJSON[courseId].terms.filter(t => t !== \"Summer Term\").length : 0\r\n        }\r\n    }\r\n\r\n    // Calculate priorities\r\n    for (const courseId of selectedCourses) {\r\n        priority = addPriority(priority, courseId, courseId);\r\n    }\r\n\r\n    // Sort keys of priority into array to give into prioritised\r\n    const prioritised = Object.values(priority);\r\n\r\n    prioritised.sort((a, b) => {\r\n        // Sort by:\r\n        // 1. Level (ASC)\r\n        // 2. Unlocks (DESC)\r\n        // 3. Terms Available (ASC)\r\n\r\n        if (a.level === b.level) {\r\n            if (a.unlocks.length === b.unlocks.length) {\r\n                return a.termsAvailable - b.termsAvailable; // Ascending\r\n            }\r\n            return b.unlocks.length - a.unlocks.length; // Descending\r\n        }\r\n        return a.level - b.level; // Ascending\r\n    });\r\n\r\n    return prioritised;\r\n}\r\n\r\nconst checkPrereqsMet = (termPlan, termId, courseId) => {\r\n\r\n    let runningTotalUnits = 0;\r\n    let prereqsExecutable = coursesJSON[courseId].conditions.prereqs_executable;\r\n\r\n    // Get courses taken up to termId\r\n    const coursesTaken = [];\r\n    for (const t in termPlan) {\r\n        if (t === termId) break;\r\n        coursesTaken.push(...termPlan[t].courseIds);\r\n        runningTotalUnits += termPlan[t].courseIds.reduce((total, c) => total + (c in coursesJSON ? coursesJSON[c].units : 0), 0);\r\n    }\r\n    // console.log(courseId, \"courses taken:\", coursesTaken);\r\n\r\n    if (coursesJSON[courseId].conditions.units_required) {\r\n        if (runningTotalUnits < coursesJSON[courseId].conditions.units_required) return false;\r\n    }\r\n\r\n    if (!prereqsExecutable) return true; // No executable\r\n\r\n    for (const course of coursesTaken) {\r\n        prereqsExecutable = prereqsExecutable.replace(course, \"1\");\r\n    }\r\n    prereqsExecutable = prereqsExecutable.replace(REGEX_COURSE_CODE, \"0\");\r\n\r\n    // eslint-disable-next-line\r\n    return eval(prereqsExecutable);\r\n}\r\n\r\nconst addCourseToPlan = (termPlan, courseId) => {\r\n    const maxUOC = 18;\r\n\r\n    for (const termId in termPlan) {\r\n        if (termId.includes(\"TS\")) continue;\r\n        if (termPlan[termId].units >= maxUOC) continue;\r\n\r\n        const courseUnits = coursesJSON[courseId].units;\r\n        if (termPlan[termId].units + courseUnits > maxUOC) continue;\r\n\r\n        let termsAvailable;\r\n        if (!(coursesJSON[courseId].terms)) {\r\n            termsAvailable = [\"TS\", \"T1\", \"T2\", \"T3\"];\r\n        } else {\r\n            termsAvailable = coursesJSON[courseId].terms.map(term => mapTermIds(term));\r\n        }\r\n\r\n        if (!(termsAvailable.includes(termId.substring(1, 3)))) continue;\r\n\r\n        // Need to check prerequisites have been met here\r\n        if (!checkPrereqsMet(termPlan, termId, courseId)) continue;\r\n\r\n        // Add course to plan\r\n        termPlan[termId].units += coursesJSON[courseId].units;\r\n        termPlan[termId].courseIds.push(courseId);\r\n        return termPlan;\r\n    }\r\n\r\n    // Default put in Year 1 Summer Term if cannot find a good position for it.\r\n    let termsAvailable;\r\n    if (!(coursesJSON[courseId].terms)) {\r\n        termsAvailable = [\"TS\", \"T1\", \"T2\", \"T3\"];\r\n    } else {\r\n        termsAvailable = coursesJSON[courseId].terms.map(term => mapTermIds(term));\r\n    }\r\n\r\n    termPlan[\"1TS\"].units += coursesJSON[courseId].units;\r\n    termPlan[\"1TS\"].courseIds.push(courseId);\r\n    return termPlan;\r\n}\r\n\r\nconst populateTerms = (maxYears, prioritisedCourses) => {\r\n    const maxTerms = 3;\r\n\r\n    const termPlan = {};\r\n    for (let year = 1; year <= maxYears; year++) {\r\n        termPlan[`${year}TS`] = {\r\n            units: 0,\r\n            courseIds: []\r\n        };\r\n        for (let term = 1; term <= maxTerms; term++) {\r\n            const termId = `${year}T${term}`;\r\n            termPlan[termId] = {\r\n                units: 0,\r\n                courseIds: []\r\n            };\r\n        }\r\n    }\r\n\r\n    // For each course in the prioritised, slot into earliest possible term\r\n    for (const course of prioritisedCourses) {\r\n        addCourseToPlan(termPlan, course.courseId);\r\n    }\r\n\r\n    return termPlan;\r\n}\r\n\r\nconst makePlan = (plan, maxYears, selectedCourses) => {\r\n    const prioritisedCourses = prioritiseCourses(selectedCourses);\r\n\r\n    const termPlan = populateTerms(maxYears, prioritisedCourses);\r\n\r\n    for (const termId in termPlan) {\r\n        const year = termId[0];\r\n        plan[year][termId].courseIds = termPlan[termId].courseIds\r\n    }\r\n\r\n    return plan;\r\n}\r\n\r\nconst generatePlanScaffold = (years, selectedCourses) => {\r\n    let plan = {};\r\n\r\n    for (let year = 1; year <= years; year++) {\r\n        plan[year.toString()] = generateTerms(year)\r\n    }\r\n\r\n    plan = makePlan(plan, years, selectedCourses)\r\n\r\n    return plan;\r\n}\r\n\r\nclass DegreePlanner extends React.Component {\r\n    state = {\r\n        courses: getCourses(this.props.selectedCourses),\r\n        selectedCourses: this.props.selectedCourses,\r\n        plan: generatePlanScaffold(4, this.props.selectedCourses),\r\n        program: this.props.program,\r\n        specialisations: this.props.specialisations\r\n    };\r\n\r\n    onDragEnd = result => {\r\n        const { destination, source, draggableId } = result;\r\n\r\n        // Null destination means label was not dragged into a droppable\r\n        if (!destination) return;\r\n\r\n        // Label was dragged into the same position\r\n        if (destination.droppableId === source.droppableId && destination.index === source.index) return;\r\n\r\n        const sourceYear = source.droppableId[0];\r\n        const start = this.state.plan[sourceYear][source.droppableId];\r\n        const destinationYear = destination.droppableId[0];\r\n        const finish = this.state.plan[destinationYear][destination.droppableId];\r\n\r\n        if (start === finish) {\r\n            const newCourseIds = Array.from(start.courseIds);\r\n            newCourseIds.splice(source.index, 1); // Remove 1 item at source.index\r\n            newCourseIds.splice(destination.index, 0, draggableId); // Insert dragggableId into destination\r\n            const newTerm = {\r\n                ...start,\r\n                courseIds: newCourseIds\r\n            };\r\n\r\n            const newState = {\r\n                ...this.state,\r\n                plan: {\r\n                    ...this.state.plan,\r\n                    [sourceYear]: {\r\n                        ...this.state.plan[sourceYear],\r\n                        [newTerm.id]: newTerm,\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setState(newState);\r\n            return;\r\n        }\r\n\r\n        // Moving from one list to another\r\n        const startCourseIds = Array.from(start.courseIds)\r\n        startCourseIds.splice(source.index, 1);\r\n\r\n        const newStart = {\r\n            ...start,\r\n            courseIds: startCourseIds,\r\n        }\r\n\r\n        const finishCourseIds = Array.from(finish.courseIds)\r\n        finishCourseIds.splice(destination.index, 0, draggableId);\r\n\r\n        const newFinish = {\r\n            ...finish,\r\n            courseIds: finishCourseIds\r\n        }\r\n\r\n        const newState = this.state;\r\n        newState.plan[sourceYear][newStart.id] = newStart;\r\n        newState.plan[destinationYear][newFinish.id] = newFinish;\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    getConsiderationMessages = (state) => {\r\n        const plan = state.plan;\r\n        const courses = state.courses;\r\n        const selectedCourses = state.selectedCourses;\r\n        const program = state.program;\r\n        const programUnits = programsJSON[program].units;\r\n        const specialisations = state.specialisations;\r\n\r\n        const considerationMessages = [];\r\n        const handbookVersion = 2021;\r\n\r\n        const getCourseLink = (courseId) => {\r\n            return <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://www.handbook.unsw.edu.au/undergraduate/courses/${handbookVersion}/${courseId}`}>{courseId}</a>;\r\n        }\r\n\r\n        const getProgramLink = (programId) => {\r\n            return <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://www.handbook.unsw.edu.au/undergraduate/programs/${handbookVersion}/${programId}`}>{programId} - {programsJSON[programId].name}</a>;\r\n        }\r\n\r\n        const getSpecialisationsLink = (specialisationId) => {\r\n            return <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://www.handbook.unsw.edu.au/undergraduate/specialisations/${handbookVersion}/${specialisationId}`}>{specialisationId} - {specialisationsJSON[specialisationId].name}</a>;\r\n        }\r\n\r\n        const getCoursesInLevel = (rawList) => {\r\n            rawList = rawList.flat().filter(c => c !== \"ANY COURSE\");\r\n            const allCourseIds = Object.keys(coursesJSON);\r\n            const courseList = [];\r\n            rawList.forEach(courseId => {\r\n                if (courseId.match(REGEX_COURSE_CODE)) {\r\n                    courseList.push(courseId);\r\n                } else if (courseId.match(/^[A-Z]{4}\\d$/)) {\r\n                    const relevantCourses = allCourseIds.filter(c => c.includes(courseId));\r\n                    relevantCourses.forEach(c => {\r\n                        if (courseList.includes(c)) return;\r\n                        courseList.push(c);\r\n                    });\r\n                }\r\n            });\r\n            return courseList;\r\n        }\r\n\r\n        let totalUnits = 0;\r\n        const termPlan = {}\r\n        for (const year in plan) {\r\n            for (const term in plan[year]) {\r\n                if (term === \"termOrder\") continue;\r\n                termPlan[term] = plan[year][term]\r\n                totalUnits += termPlan[term].courseIds.reduce((total, c) => total + (c in coursesJSON ? coursesJSON[c].units : 0), 0);\r\n            }\r\n        }\r\n\r\n        if (totalUnits < programUnits) {\r\n            considerationMessages.push(\r\n                <Message.Item>\r\n                    {getProgramLink(program)} requires {programUnits} units. You have taken {totalUnits} units.\r\n                </Message.Item>\r\n            )\r\n        }\r\n        specialisations.forEach(degree => {\r\n            const coursesInDegree = [];\r\n            for (const levelName in specialisationsJSON[degree].structure) {\r\n                const level = specialisationsJSON[degree].structure[levelName];\r\n                if (!level.courses) continue;\r\n                coursesInDegree.push(...getCoursesInLevel(level.courses))\r\n            }\r\n            const degreeUnitsRequired = specialisationsJSON[degree].units\r\n            let degreeUnitsTaken = 0;\r\n            for (const term in termPlan) {\r\n                degreeUnitsTaken += termPlan[term].courseIds.reduce((total, c) => total + ((c in coursesJSON && coursesInDegree.includes(c)) ? coursesJSON[c].units : 0), 0);\r\n            }\r\n\r\n            if (degreeUnitsTaken < degreeUnitsRequired) {\r\n                considerationMessages.push(\r\n                    <Message.Item>\r\n                        {getSpecialisationsLink(degree)} requires {degreeUnitsRequired} units. You have taken {degreeUnitsTaken} units.\r\n                    </Message.Item>\r\n                )\r\n            }\r\n        })\r\n\r\n\r\n        totalUnits = 0;\r\n        for (const year in plan) {\r\n            for (const term in plan[year]) {\r\n                if (term === \"termOrder\") continue;\r\n                for (const courseId of termPlan[term].courseIds) {\r\n                    const conditions = coursesJSON[courseId].conditions\r\n                    if (!conditions.units_required) continue;\r\n                    if (totalUnits < conditions.units_required) {\r\n                        considerationMessages.push(\r\n                            <Message.Item>\r\n                                {getCourseLink(courseId)} prerequisites have not been met: {conditions.units_required} UOC required.\r\n                            </Message.Item>\r\n                        )\r\n                    }\r\n                }\r\n\r\n                totalUnits += termPlan[term].courseIds.reduce((total, c) => total + (c in coursesJSON ? coursesJSON[c].units : 0), 0);\r\n            }\r\n        }\r\n\r\n        // Check levels for each\r\n        specialisations.forEach(degree => {\r\n            const coreCourses = []\r\n            for (const levelName in specialisationsJSON[degree].structure) {\r\n                const level = specialisationsJSON[degree].structure[levelName];\r\n                if (!level.units_required) continue;\r\n                if (level.courses.filter(c => c !== \"ANY COURSE\").length === 0) continue;\r\n                if (level.name.match(/[Cc]ore/g)) level.courses.flat().forEach(c => coreCourses.push(c));\r\n\r\n                let levelCourses = getCoursesInLevel(level.courses);\r\n                if (!level.name.match(/[Cc]ore/g)) levelCourses = levelCourses.filter(c => !coreCourses.includes(c))\r\n                const selectedInLevel = levelCourses.filter(c => selectedCourses.includes(c));\r\n                const selectedUnits = selectedInLevel.reduce((total, c) => total + (c in coursesJSON ? coursesJSON[c].units : 0), 0);\r\n\r\n                if (selectedUnits < level.units_required) {\r\n                    considerationMessages.push(\r\n                        <Message.Item>\r\n                            {degree} - {level.name} requires {level.units_required} units. You have taken {selectedUnits} units.\r\n                        </Message.Item>\r\n                    );\r\n                }\r\n            }\r\n        })\r\n\r\n        for (const year in plan) {\r\n            for (const term in plan[year]) {\r\n                if (term === \"termOrder\") continue;\r\n                for (const courseId of plan[year][term].courseIds) {\r\n                    if (!checkPrereqsMet(termPlan, term, courseId)) {\r\n                        if (coursesJSON[courseId].conditions.prereqs_executable) {\r\n                            considerationMessages.push(\r\n                                <Message.Item>\r\n                                    {getCourseLink(courseId)} prerequisites have not been met: {coursesJSON[courseId].conditions.prereqs_executable\r\n                                        .replaceAll(\"|| 0 ||\", \"||\")\r\n                                        .replaceAll(\"&& 0 &&\", \"&&\")\r\n                                        .replaceAll(\"&& 0 ||\", \"||\")\r\n                                        .replaceAll(\"|| 0 &&\", \"&&\")\r\n                                        .replaceAll(\"&&\", \"and\")\r\n                                        .replaceAll(\"||\", \"or\")\r\n                                    }\r\n                                </Message.Item>\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Check terms\r\n        for (const yearId in plan) {\r\n            for (let termId in plan[yearId]) {\r\n                if (termId === \"termOrder\") continue;\r\n                const term = termId.substring(1, 3)\r\n                for (const courseId of plan[yearId][termId].courseIds) {\r\n                    // if (!courses[courseId].termsAvailable) {\r\n                    if (!courses[courseId]) {\r\n                        considerationMessages.push(\r\n                            <Message.Item>\r\n                                {getCourseLink(courseId)}: could not retrieve course. Check handbook for more details.\r\n                            </Message.Item>\r\n                        )\r\n                    } else if (courses[courseId].placeholderTerms) {\r\n                        considerationMessages.push(\r\n                            <Message.Item>\r\n                                {getCourseLink(courseId)}: unknown term availability. Check handbook for more details.\r\n                            </Message.Item>\r\n                        )\r\n                    } else if (!courses[courseId].termsAvailable.includes(term)) {\r\n                        considerationMessages.push(\r\n                            <Message.Item>\r\n                                {getCourseLink(courseId)} is only available in {courses[courseId].termsAvailable.map(term => mapTermFull(term)).join(\", \")}\r\n                            </Message.Item>\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const style = {\r\n            marginBottom: \"20px\",\r\n            transition: \"0.3s ease\"\r\n        }\r\n\r\n        if (considerationMessages.length === 0) {\r\n            return (\r\n                <Message style={style} positive>\r\n                    <Message.Header>Considerations</Message.Header>\r\n                    <Message.List>\r\n                        Looks good to me!\r\n                    </Message.List>\r\n                </Message>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <Message style={style} error>\r\n                <Message.Header>Considerations</Message.Header>\r\n                <Message.List>\r\n                    {considerationMessages}\r\n                </Message.List>\r\n            </Message>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Segment>\r\n                <Container>\r\n                    <Header as=\"h2\" textAlign=\"center\" style={{marginTop: \"50px\"}}>Plan your degree</Header>\r\n                    <p>The following degree plan has been generated based on the courses you have selected above. By default, our algorithm:</p>\r\n                    <ul>\r\n                        <li>allocates 18 UOC per term</li>\r\n                        <li>ensures courses have their prerequisites met</li>\r\n                        <li>ensures courses are offered in allocated terms</li>\r\n                        <li>does not allocate courses in Summer Term</li>\r\n                    </ul>\r\n                    <p>If the algorithm cannot place the course in a valid term, then it will place it <em>Year 1 - Semmmer Term</em> for you.</p>\r\n\r\n                    <p><b>Drag and drop the courses below to customise your degree plan!</b></p>\r\n\r\n                    <DragDropContext onDragEnd={this.onDragEnd} onDragStart={this.onDragStart}>\r\n                        {this.getConsiderationMessages(this.state)}\r\n                        {Object.keys(this.state.plan).map(yearId => (\r\n                            <Grid key={yearId} columns={4}>\r\n                                {this.state.plan[yearId].termOrder.map(termId => {\r\n                                    const term = this.state.plan[yearId][termId];\r\n                                    const courses = term.courseIds.map(courseId => this.state.courses[courseId]);\r\n                                    return (\r\n                                        <Grid.Column key={termId}>\r\n                                            <Term key={term.id} term={term} courses={courses} allCourses={this.state.courses}/>\r\n                                        </Grid.Column>\r\n                                    );\r\n                                })}\r\n                            </Grid>\r\n                        ))}\r\n                    </DragDropContext>\r\n                </Container>\r\n                <Container fluid style={{textAlign: \"center\", marginTop: \"50px\", height: \"auto\", padding: \"20px\"}}>\r\n                    <p><b>Disclaimer:</b> While we try our best, Circles is not an official UNSW website and does not guarantee accuracy or reliability (e.g. a course may not have its term availability published on the Handbook)</p>\r\n                    <p>Made by SRKO, 2020</p>\r\n                    <a href=\"https://github.com/Circles360/Circles360.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>\r\n                </Container>\r\n            </Segment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DegreePlanner","import React from \"react\";\r\nimport { Label, Container, Icon} from 'semantic-ui-react'\r\n\r\nimport { Draggable } from \"react-beautiful-dnd\"\r\n\r\nconst getCourseLink = (courseId) => {\r\n    const handbookVersion = 2021;\r\n    return <a style={{marginLeft: \"5px\", alignSelf: \"flex-start\"}} target=\"_blank\" rel=\"noopener noreferrer\" href={`https://www.handbook.unsw.edu.au/undergraduate/courses/${handbookVersion}/${courseId}`}><Icon name=\"external share\"/></a>;\r\n}\r\n\r\nexport default class Course extends React.Component {\r\n    render () {\r\n        return (\r\n            <Container>\r\n                <Draggable draggableId={this.props.course.id} index={this.props.index}>\r\n                    {provided => (\r\n                        <div>\r\n                            <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                                <Label style={{margin: \"5px\", display: \"flex\"}}>\r\n                                    <span style={{flexGrow: \"1\"}}>\r\n                                        {this.props.course.content}\r\n                                    </span>\r\n                                    {getCourseLink(this.props.course.id)}\r\n                                </Label>\r\n                            </div>\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Draggable>\r\n            </Container>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { Container, Segment, Header, Label } from 'semantic-ui-react'\r\n\r\nimport Course from \"./degreeplanner-course\"\r\n\r\nimport { Droppable } from \"react-beautiful-dnd\"\r\n\r\nconst SUCCESS = \"#FCFFF5\";\r\nconst ERROR = \"#FFF6F6\";\r\nconst UNKNOWN = \"#FFFAF3\"\r\n\r\nconst checkTermAvailability = (props, courseId) => {\r\n    const termId = props.term.id.substring(1, 3);\r\n    const termAvailability = props.allCourses[courseId].termsAvailable;\r\n\r\n    // return props.allCourses[courseId].placeholderTerms\r\n    //     ? UNKNOWN\r\n    //     : termAvailability.includes(termId)\r\n    //     ? SUCCESS\r\n    //     : ERROR;\r\n    return termAvailability.includes(termId)\r\n        ? props.allCourses[courseId].placeholderTerms\r\n            ? UNKNOWN\r\n            : SUCCESS\r\n        : ERROR\r\n}\r\n\r\nconst checkValidCourses = (props) => {\r\n    const termId = props.term.id.substring(1, 3);\r\n\r\n    for (const courseId of props.term.courseIds) {\r\n        if (!props.allCourses[courseId].termsAvailable.includes(termId)) return ERROR;\r\n        if (props.allCourses[courseId].placeholderTerms) return UNKNOWN;\r\n    }\r\n    return \"white\"\r\n}\r\n\r\nconst showUnits = (props) => {\r\n    const total = props.term.courseIds.filter(c => props.allCourses[c]).reduce((total, courseId) => total + props.allCourses[courseId].units, 0);\r\n    const partTime = 12;\r\n    const fullTime = 18;\r\n\r\n    let colour = \"\"\r\n    if (total === 0) {\r\n        colour = \"grey\";\r\n    } else if (total < partTime) {\r\n        colour = \"orange\";\r\n    } else if (total < fullTime) {\r\n        colour = \"blue\";\r\n    } else if (total === fullTime) {\r\n        colour = \"teal\";\r\n    } else {\r\n        colour = \"red\";\r\n    }\r\n\r\n    return <Label color={colour} floating style={{transition: \"0.2s ease\"}}>{total}</Label>;\r\n}\r\n\r\nexport default class Term extends React.Component {\r\n    render () {\r\n        return (\r\n            <Container>\r\n                <Droppable droppableId={this.props.term.id}>\r\n                    {(provided, snapshot) => (\r\n                        <Segment style={{backgroundColor: snapshot.isDraggingOver ? checkTermAvailability(this.props, snapshot.draggingOverWith) : checkValidCourses(this.props), transition: \"0.2s ease\"}}>\r\n                            <Header as=\"h4\">{this.props.term.title}</Header>\r\n                            {showUnits(this.props)}\r\n                            {/* {getTermTitle(this.props)} */}\r\n                            <div ref={provided.innerRef} {...provided.droppableProps} style={{minHeight: \"150px\"}}>\r\n                                {this.props.courses.map((course, index) => <Course key={course.id} course={course} index={index} />)}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        </Segment>\r\n                    )}\r\n                </Droppable>\r\n            </Container>\r\n        )\r\n    }\r\n}","// For normal nodes\r\nimport React, { memo } from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nconst style = {zIndex: -9999, pointerEvents: 'none', opacity: 0, top: '50%'};\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={style} />\r\n      <div>\r\n            <b>{data.course_code}</b>\r\n      </div>\r\n      <Handle type=\"source\" position=\"top\" style={style} />\r\n    </>\r\n  );\r\n});\r\n","// For normal nodes\r\nimport React, { memo } from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nimport Refresh from '../assets/refresh.svg';\r\n\r\nconst style = {zIndex: -9999, pointerEvents: 'none', opacity: 0, top: '50%'};\r\nconst iconSize = {width: 12, position: 'relative', bottom: 2};\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={style} />\r\n      <div>\r\n            <br></br>\r\n            <b>{data.course_code}</b>\r\n            <div>\r\n              <img src={Refresh} alt={data.course_code} style={iconSize}/>\r\n            </div>\r\n      </div>\r\n      <Handle type=\"source\" position=\"top\" style={style} />\r\n    </>\r\n  );\r\n});\r\n","import React, { memo } from 'react';\r\n\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={{opacity: 0, top: '50%'}} />\r\n      <div>\r\n            <b>{data.degree_name}</b>\r\n      </div>\r\n      <Handle type=\"source\" position=\"bottom\" style={{opacity: 0, bottom: '50%'}} />\r\n    </>\r\n  );\r\n});\r\n","// Displays hover text in top left corner which contains info about the course\r\nimport React from 'react';\r\nimport { Segment, Header } from \"semantic-ui-react\";\r\n\r\nconst style = {\r\n    padding: \"20px\",\r\n    margin: \"10px\",\r\n    position: \"absolute\",\r\n    top: \"0\",\r\n    left: \"0\",\r\n    zIndex: \"10\",\r\n    maxWidth: \"20%\"\r\n}\r\n\r\nexport default function HoverInfo(props) {\r\n    return (\r\n        <Segment raised id=\"hoverbox\" style={style}>\r\n            <Header as=\"h4\" textAlign=\"center\">{props.node.data.course_name}</Header>\r\n            <p><b>Terms: </b>{(props.node.data.terms !== null) ? props.node.data.terms.join(\", \") : <text>Unknown</text>}</p>\r\n\r\n            {props.node.data.conditions.raw !== null ? <p><b>Conditions: </b>{props.node.data.conditions.raw}</p> : <p><b>Conditions: </b> None</p>}\r\n\r\n            {props.node.data.exclusions !== null &&\r\n            <p><b>Exclusion courses: </b>{props.node.data.exclusions.join(\", \")}</p>}\r\n        </Segment>\r\n    );\r\n}","// HELPER FUNCTION to highlight prerequisites in purple on hover\r\n// When hovering over an unselected node, show a path of edges\r\n// which will stop at a selected/selectable node\r\nimport getElement from './getelement.js';\r\n\r\nexport default function hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges) {\r\n    if (node.data.conditions.prerequisites === null) return;\r\n    // Get all selected edges one layer down and add to hover edges\r\n    for (const prereq of node.data.conditions.prerequisites) {\r\n        if (selectedEdges.hasOwnProperty('e' + prereq + '-' + node.id)) {\r\n            hoverEdges['e' + prereq + '-' + node.id] = 1;\r\n        }\r\n    }\r\n\r\n    // hoverEdge all unselected (AND POTENTIAL???) edges until we hit selected node (NO LONGER STOPS AT SELECTABLE NODE)\r\n    var prereqQueue = [node.id];\r\n    while (prereqQueue.length !== 0) {\r\n        const current = getElement(prereqQueue.shift(), elements);\r\n        // Make sure this course exists as a node in our map\r\n        if (current === null) continue;\r\n\r\n        if (current.data.conditions.prerequisites === null) continue;\r\n\r\n        for (const prereq of current.data.conditions.prerequisites) {\r\n            if (!selectedEdges.hasOwnProperty('e' + prereq + '-' + current.id)) {\r\n                hoverEdges['e' + prereq + '-' + current.id] = 1;\r\n            }\r\n            /*if ((!selectedEdges.hasOwnProperty('e' + prereq + '-' + current.id)) && (!potentialEdges.hasOwnProperty('e' + prereq + '-' + current.id))) {\r\n                hoverEdges['e' + prereq + '-' + current.id] = 1;\r\n            }*/\r\n\r\n            if ((!selectedNodes.hasOwnProperty(prereq))) {\r\n                prereqQueue.push(prereq);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// HELPER FUNCTION to delete prerequisite edges\r\n// Usually used after unhovering or onclick\r\nexport default function unhoverPrerequisites(hoverEdges) {\r\n    for (var edge in hoverEdges) {\r\n        delete hoverEdges[edge];\r\n    }\r\n}","import { findAllByDisplayValue } from '@testing-library/react';\r\nimport React, { Component } from 'react'\r\nimport { Button, Dropdown, Grid, Message } from 'semantic-ui-react'\r\n\r\nimport programsJSON from \"../webscraper/programs.json\"\r\nimport specialisationsJSON from \"../webscraper/specialisations.json\"\r\n\r\nconst MAJORS = 1;\r\nconst MINORS = 2;\r\nconst HONOURS = 3;\r\n\r\nconst courseOptions = {}\r\nconst programOptions = []\r\n\r\nfor (const code in programsJSON) {\r\n    if (programsJSON[code].degrees_involved.majors.length === 0 && programsJSON[code].degrees_involved.honours.length === 0) continue;\r\n\r\n    programOptions.push({\r\n        \"key\": code,\r\n        \"value\": code,\r\n        \"text\": code + \" - \" + programsJSON[code].name\r\n    })\r\n\r\n    courseOptions[code] = programsJSON[code].degrees_involved\r\n}\r\n\r\nfor (const code in courseOptions) {\r\n    for (const type in courseOptions[code]) {\r\n\r\n        const replacement = [];\r\n        for (const spec of courseOptions[code][type]) {\r\n            if (!(spec in specialisationsJSON)) continue;\r\n            replacement.push({\r\n                \"key\": spec,\r\n                \"value\": spec,\r\n                \"text\": spec + \" - \" + specialisationsJSON[spec].name\r\n            })\r\n        }\r\n        courseOptions[code][type] = replacement;\r\n    }\r\n}\r\n\r\n// returns MAJORS if Majors but no Minors\r\n// returns MINORS if Majors and Minors exist\r\n// returns HONOURS if Honours exist\r\nconst getMajors = (code) => {\r\n    if (!(code in courseOptions)) {\r\n        console.log(\"code not found in majors\", code);\r\n        return [];\r\n    }\r\n\r\n    if (courseOptions[code].honours.length) return [HONOURS, courseOptions[code].honours];\r\n    if (courseOptions[code].minors.length) return [MINORS, courseOptions[code].majors];\r\n    return [MAJORS, courseOptions[code].majors];\r\n}\r\n\r\nconst getMinors = (code) => {\r\n    if (!(code in courseOptions)) {\r\n        console.log(\"code not found in minors\", code);\r\n        return [];\r\n    }\r\n\r\n    return courseOptions[code].minors;\r\n}\r\n\r\nclass DropdownDegrees extends Component {\r\n    state = {\r\n        programOptions: programOptions,\r\n        majorOptions: [],\r\n        minorOptions: [],\r\n\r\n        disabledPrimary: true,\r\n        disabledSecondary: true,\r\n        hiddenPrimary: 'hidden',\r\n        hiddenSecondary: 'hidden',\r\n\r\n        valProgram: null,\r\n        valPrimary: null,\r\n        valSecondary: null,\r\n\r\n        phPrimary: \"Select\",\r\n        phSecondary: \"N/A\",\r\n    }\r\n\r\n    chooseProgram = (e, program) => {\r\n        const [type, majors] = getMajors(program.value)\r\n        console.log(program.value)\r\n        this.setState({\r\n            valProgram: program.value,\r\n\r\n            valPrimary: null,\r\n            disabledPrimary: false,\r\n            hiddenPrimary: 'visible',\r\n            majorOptions: majors,\r\n            phPrimary: \"Select Major\",\r\n\r\n            valSecondary: null,\r\n            disabledSecondary: true,\r\n            hiddenSecondary: 'hidden',\r\n            minorOptions: [],\r\n            phSecondary: \"N/A\"\r\n        })\r\n\r\n        if (type === HONOURS) this.setState({phPrimary: \"Select Honour\"})\r\n        else if (type === MAJORS) this.setState({phPrimary: \"Select Major\"})\r\n        else {\r\n            this.setState({\r\n                phPrimary: \"Select Major\",\r\n                phSecondary: \"Select Minor\",\r\n                minorOptions: getMinors(program.value),\r\n                disabledSecondary: false,\r\n                hiddenSecondary: 'visible',\r\n            });\r\n        }\r\n    }\r\n\r\n    choosePrimary = (e, spec) => {\r\n        this.setState({\r\n            valPrimary: spec.value\r\n        })\r\n    }\r\n\r\n    chooseSecondary = (e, minor) => {\r\n        this.setState({\r\n            valSecondary: minor.value\r\n        })\r\n    }\r\n\r\n    getLink = () => {\r\n        if (this.state.valSecondary) return `#/${this.state.valProgram}/${this.state.valPrimary}/${this.state.valSecondary}`\r\n        return `#/${this.state.valProgram}/${this.state.valPrimary}`\r\n    }\r\n\r\n    supported = {\r\n        \"3707\": [\"SENGAH\"],\r\n        \"3778\": [\"COMPA1\"]\r\n    };\r\n\r\n    isDisabled = () => {\r\n        this.state.messageVisible = \"hidden\"\r\n\r\n        if (!!this.state.valSecondary) return true;\r\n        if (!(this.state.valProgram in this.supported)) return true;\r\n        if (!this.supported[this.state.valProgram].includes(this.state.valPrimary)) return true;\r\n\r\n        const isSupported = this.state.valProgram === null || this.state.valPrimary === null;\r\n        return isSupported;\r\n    }\r\n\r\n    getMessage = () => {\r\n        if (!!this.state.valSecondary) {\r\n            return (\r\n                <Message warning>\r\n                    Minors not supported yet\r\n                </Message>\r\n            )\r\n        }\r\n\r\n        if (!(this.state.valProgram in this.supported)) {\r\n            return (\r\n                <Message warning>\r\n                    {`Only ${Object.keys(this.supported).join(\", \")} is supported`}\r\n                </Message>\r\n            )\r\n        }\r\n\r\n\r\n        if (!this.supported[this.state.valProgram].includes(this.state.valPrimary)) {\r\n            return (\r\n                <Message warning>\r\n                    {`Only ${this.supported[this.state.valProgram].join(\", \")} is supported`}\r\n                </Message>\r\n            )\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <Grid centered style={{marginBottom: \"20px\"}}>\r\n                <Grid.Row>\r\n                    <Dropdown\r\n                        selection\r\n                        search\r\n                        onChange={this.chooseProgram}\r\n                        options= {this.state.programOptions}\r\n                        enabled\r\n                        placeholder= 'Select Program'\r\n                    />\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Dropdown\r\n                        selection\r\n                        search\r\n                        onChange={this.choosePrimary}\r\n                        options= {this.state.majorOptions}\r\n                        disabled= {this.state.disabledPrimary}\r\n                        value= {this.state.valPrimary}\r\n                        placeholder= {this.state.phPrimary}\r\n                        style={{visibility: this.state.hiddenPrimary}}\r\n                    />\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Dropdown\r\n                        selection\r\n                        search\r\n                        clearable\r\n                        onChange={this.chooseSecondary}\r\n                        options= {this.state.minorOptions}\r\n                        disabled= {this.state.disabledSecondary}\r\n                        value= {this.state.valSecondary}\r\n                        placeholder= {this.state.phSecondary}\r\n                        style={{visibility: this.state.hiddenSecondary}}\r\n                    />\r\n                </Grid.Row>\r\n                {this.getMessage()}\r\n                <Grid.Row>\r\n                    <a href={this.getLink()}>\r\n                        <Button\r\n                            disabled={this.isDisabled()}\r\n                            color=\"red\"\r\n                        >\r\n                            Load flowchart\r\n                        </Button>\r\n                    </a>\r\n                </Grid.Row>\r\n            </Grid>\r\n\r\n        </>;\r\n    }\r\n}\r\n\r\nexport default DropdownDegrees","import React from \"react\";\r\nimport DropdownDegrees from \"./dropdownDegrees.js\"\r\nimport { Button, Container, Modal, Header } from 'semantic-ui-react'\r\n\r\nfunction exampleReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'OPEN_MODAL':\r\n      return { open: true, dimmer: action.dimmer }\r\n    case 'CLOSE_MODAL':\r\n      return { open: false }\r\n    default:\r\n      throw new Error()\r\n  }\r\n}\r\n\r\nfunction SideBarModal() {\r\n  const [state, dispatch] = React.useReducer(exampleReducer, {\r\n    open: false,\r\n    dimmer: undefined,\r\n  })\r\n  const { open, dimmer } = state\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        size=\"mini\"\r\n        color=\"blue\"\r\n        onClick={() => dispatch({ type: 'OPEN_MODAL', dimmer: 'blurring' })}\r\n      >\r\n        Choose Degree\r\n      </Button>\r\n\r\n      <Modal\r\n        closeIcon\r\n        dimmer={dimmer}\r\n        open={open}\r\n        onClose={() => dispatch({ type: 'CLOSE_MODAL' })}\r\n      >\r\n        <Modal.Header textAlign=\"center\">Degree Planner</Modal.Header>\r\n        <Container>\r\n            <Header as=\"h3\" textAlign=\"center\" style={{marginTop: \"5px\"}}>Choose your degree</Header>\r\n            <DropdownDegrees />\r\n        </Container>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SideBarModal\r\n\r\n//DropdownDegrees.clickDone() \r\n\r\n//DropdownDegrees d = new DropdownDegrees(); \r\n//d.clickDone()","// For normal nodes\r\nimport React, { memo } from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nconst style = {zIndex: -9999, pointerEvents: 'none', opacity: 0, top: '50%'};\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={style} />\r\n      <div>\r\n            <text>{data.instructions}</text>\r\n      </div>\r\n      <Handle type=\"source\" position=\"top\" style={style} />\r\n    </>\r\n  );\r\n});\r\n","// For normal nodes\r\nimport React, { memo } from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nimport Refresh from '../assets/refresh.svg';\r\n\r\nconst style = {zIndex: -9999, pointerEvents: 'none', opacity: 0, top: '50%'};\r\nconst iconSize = {width: 12, position: 'relative'};\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={style} />\r\n      <div>\r\n            <br></br>\r\n            <text>{data.instructions}</text>\r\n            <br></br>\r\n            <div>\r\n              <img src={Refresh} alt={data.course_code} style={iconSize}/>\r\n            </div>\r\n      </div>\r\n      <Handle type=\"source\" position=\"top\" style={style} />\r\n    </>\r\n  );\r\n});\r\n","// Helper functions to highlight nodes and edges\r\n// Will highlight/unhighlight nodes based on selectedNodes dictionary\r\nimport { isEdge } from \"react-flow-renderer\";\r\n\r\nconst selectedEdgeAnimated = {\r\n    stroke: \"#e94646\",\r\n    strokeWidth: 2,\r\n    opacity: 1,\r\n    transition: \"0.3s ease\"\r\n}\r\nconst selectedEdgeStatic = {\r\n    stroke: \"#454545\",\r\n    strokeWidth: 2,\r\n    opacity: 1,\r\n    transition: \"0.3s ease\"\r\n}\r\n\r\nconst hoverEdge = {\r\n    stroke: \"#e94646\",\r\n    strokeWidth: 2,\r\n    opacity: 1,\r\n    transition: \"0.3s ease\"\r\n}\r\n\r\nconst potentialHoverEdge = {\r\n    stroke: \"#e94646\",\r\n    strokeWidth: 2,\r\n    opacity: 1,\r\n    transition: \"0.3s ease\"\r\n}\r\nconst potentialEdge = {\r\n    stroke: \"#cecece\",\r\n    strokeWidth: 1,\r\n    opacity: 1,\r\n    transition: \"0.3s ease\"\r\n}\r\n\r\nconst unselectedEdge = {\r\n    stroke: \"#cecece\",\r\n    strokeWidth: 1,\r\n    opacity: 1,\r\n    transition: \"0.3s ease\"\r\n}\r\n\r\nexport default function highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges) {\r\n    // console.log(\"=================\");\r\n    // console.log(selectedNodes);\r\n    // console.log(selectedEdges);\r\n    // console.log(selectableNodes);\r\n    // console.log(potentialEdges);\r\n    const newElements = elements.map((e) => {\r\n        // It is an edge\r\n        if (isEdge(e)) {\r\n            if (selectedEdges.hasOwnProperty(e.id)) {\r\n                if (hoverEdges.hasOwnProperty(e.id)) return {...e, style: selectedEdgeAnimated, animated: true};\r\n                else return {...e, style: selectedEdgeStatic, animated: false};\r\n            } else if (potentialEdges.hasOwnProperty(e.id)) {\r\n                if (hoverEdges.hasOwnProperty(e.id)) return {...e, style: potentialHoverEdge, animated: true};\r\n                else return {...e, style: potentialEdge, animated: false};\r\n            } else if (hoverEdges.hasOwnProperty(e.id)) {\r\n                return {...e, style: hoverEdge, animated: true};\r\n            } else {\r\n                return {...e, style: unselectedEdge, animated: false};\r\n            }\r\n        }\r\n\r\n        // It is a node\r\n        if (selectedNodes.hasOwnProperty(e.id)) {\r\n            // SELECTED NODE\r\n            return {...e, style: {...e.style, color: e.textSelectedColour, background: e.selectedColour}};\r\n        } else if (selectableNodes.hasOwnProperty(e.id)) {\r\n            // NOT SELECTED BUT CAN BE SELECTED\r\n            // console.log(e.textColour);\r\n            return {...e, style: {...e.style, color: e.textColour, background: e.selectableColour}};\r\n        } else {\r\n            // UNSELECTED NODE\r\n            return {...e, style: {...e.style, color: e.textColour, background: 'white'}};\r\n        }\r\n    })\r\n\r\n    return newElements;\r\n}","// HELPER FUNCTION for selecting nodes\r\n// Given a selectable node, highlights potential edges and fills in prereq edges\r\n// import checkPrerequisites from './checkprerequisites.js';\r\n// import getElement from './getelement.js';\r\n\r\nexport default function selectNode(elements, node, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    selectedNodes[node.id] = 1;\r\n    delete selectableNodes[node.id];\r\n\r\n    // Turn its prerequisite potential edges into actual edges\r\n    // Keep grey edges as grey\r\n    if (node.data.conditions.prerequisites !== null) {\r\n        for (const prereq of node.data.conditions.prerequisites) {\r\n            if (potentialEdges.hasOwnProperty('e' + prereq + '-' + node.id)) {\r\n                selectedEdges['e' + prereq + '-' + node.id] = 1;\r\n                delete potentialEdges['e' + prereq + '-' + node.id];\r\n            }\r\n        }\r\n    }\r\n\r\n    // Unlock its future edges\r\n    if (node.data.unlocks !== null) {\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            // Edges from node to unlocks should be unselected\r\n            if (selectedNodes.hasOwnProperty(unlockCourse)) {\r\n                // This course is already selected. Make the edge a selected edge\r\n                selectedEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n            } else {\r\n                // This course is either unselected or selectable\r\n                // In either case, add potential edge\r\n                potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n            }\r\n        }            \r\n    }\r\n\r\n    return;\r\n}\r\n","// HELPER FUNCTION for unselecting nodes\r\n// Given a selected node, unselects it and pushes it onto a queue to be analysed\r\n// ==================ON THE QUEUE==========================\r\n// Unshift node and Manages its prerequisites as follows:\r\n//  - if the prereq node is selected, turn selected edges into potential edges\r\n//  - if otherwise, do nothing\r\n// Determine the status of the current node:\r\n//  - if it meets prerequisites, leave it as is.\r\n//  - if it does not meet prerequisites, make it unselectable (delete from selectable/selected)\r\n// For each unlock:\r\n// - if the current node is not selected, turn edge grey no matter what\r\n// - if the current node is selected, keep edge as it is\r\n// - push the unlock onto queue if it was selectable/selected\r\nimport getElement from './getelement.js';\r\nimport checkPrerequisites from './checkprerequisites.js';\r\n\r\nexport default function unselectNode(elements, node, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    // Unselect this node\r\n    delete selectedNodes[node.id];\r\n    var unselectQueue = [node.id];\r\n    while (unselectQueue.length !== 0) {\r\n        // Unshift and get the node\r\n        const current = getElement(unselectQueue.shift(), elements);\r\n        \r\n        // Analyse its prerequisites\r\n        // If the prereq node is selected, turn selected edge into potential edges\r\n        if (current.data.conditions.prerequisites !== null) {\r\n            for (const prereq of current.data.conditions.prerequisites) {\r\n                if (selectedNodes.hasOwnProperty(prereq)) {\r\n                    if (selectedEdges.hasOwnProperty('e' + prereq + '-' + current.id)) {\r\n                        delete selectedEdges['e' + prereq + '-' + current.id];\r\n                        potentialEdges['e' + prereq + '-' + current.id] = 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Determine the status of the current node\r\n        if (! checkPrerequisites(current, elements, selectedNodes)) {\r\n            // Does not meet prerequisites. Make it unselectable\r\n            if (selectableNodes.hasOwnProperty(current.id)) delete selectableNodes[current.id];\r\n            else if (selectedNodes.hasOwnProperty(current.id)) delete selectedNodes[current.id];\r\n        } else {\r\n            // Meets prerequisites. Make it selectable\r\n            if (selectedNodes.hasOwnProperty(current.id)) delete selectedNodes[current.id];\r\n            selectableNodes[current.id] = 1;\r\n        }\r\n\r\n        // Analyse its unlocks\r\n        if (current.data.unlocks !== null) {\r\n            for (const unlockCourse of current.data.unlocks) {\r\n                if (! selectedNodes.hasOwnProperty(current.id)) {\r\n                    // Make edge grey\r\n                    if (potentialEdges.hasOwnProperty('e' + current.id + '-' + unlockCourse)) delete potentialEdges['e' + current.id + '-' + unlockCourse];\r\n                    else if (selectedEdges.hasOwnProperty('e' + current.id + '-' + unlockCourse)) delete selectedEdges['e' + current.id + '-' + unlockCourse];\r\n                }\r\n\r\n                // Lets push everything no matter what and try it out\r\n                unselectQueue.push(unlockCourse);\r\n                /*if (selectedNodes.hasOwnProperty(unlockCourse) || selectableNodes.hasOwnProperty(unlockCourse)) {\r\n                    unselectQueue.push(unlockCourse);\r\n                }*/\r\n            }\r\n        }\r\n    }\r\n}","// HELPER FUNCTION to determine which previously unselectable nodes\r\n// are now selectable\r\nimport checkPrerequisites from './checkprerequisites.js';\r\n// import getElement from './getelement.js';\r\nimport {isNode} from 'react-flow-renderer';\r\n\r\nexport default function getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    // TODO: Deal with outsider nodes\r\n\r\n    const analyseNodesKeys = [];\r\n    for (const e of elements) {\r\n        if (isNode(e)) {\r\n            analyseNodesKeys.push(e);\r\n        }\r\n    }\r\n\r\n    // Analyse the target of potential edges for potential nodes\r\n    /*var analyseNodes = {};\r\n    const potentialEdgesKeys = Object.keys(potentialEdges);\r\n    for (var edge of potentialEdgesKeys) {\r\n        // Get the target course\r\n        const target = edge.split('-')[1];\r\n\r\n        if ((! selectedNodes.hasOwnProperty(target)) && (! selectableNodes.hasOwnProperty(target))) {\r\n            analyseNodes[edge.split('-')[1]] = 1;\r\n        }\r\n    }*/\r\n\r\n    \r\n    //const analyseNodesKeys = Object.keys(analyseNodes);\r\n    //console.log(\"==========ANALYSE NODES KEYS===========\");\r\n    //console.log(analyseNodesKeys);\r\n    //console.log(\"==============ELEMENTS===============\");\r\n    //console.log(elements);\r\n\r\n    for (const node of analyseNodesKeys) {\r\n        // Determine if the prerequisite has been met\r\n        //const node = getElement(nodeID, elements);\r\n        //console.log(node);\r\n        \r\n        // If the node is already selected, don't bother making it selectable\r\n        if (selectedNodes.hasOwnProperty(node.id)) continue;\r\n\r\n\r\n        if (checkPrerequisites(node, elements, selectedNodes)) {\r\n            //console.log(\"SELECTABLE\");\r\n            //console.log(node.id);\r\n            selectableNodes[node.id] = 1;\r\n        } else {\r\n            if (selectableNodes.hasOwnProperty(node.id)) delete selectableNodes[node.id];\r\n            //console.log(\"DELETE UNSELECTABLE\");\r\n            //console.log(node.id);\r\n            // TODO: Deal with selected nodes cases? (e.g. unselecting a child???)\r\n\r\n        }\r\n    }\r\n}","// HELPER FUNCTION to toggle exclusion courses\r\n// Will hide the current course and its edges, unhide the next course and edges\r\n// in the queue. Finds new edges to show by regex substitution???\r\nimport { getConnectedEdges } from 'react-flow-renderer';\r\nimport getElement from './getelement.js';\r\nimport checkPrerequisites from './checkprerequisites.js';\r\nimport unselectNode from './unselectnode.js';\r\n\r\nexport default function exclusionSwap(node, elements, edges, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups) {\r\n    /*console.log(\"EXCLUSION SWAP\");\r\n    console.log(exclusionGroups);\r\n    console.log(node.id);*/\r\n    const newElements = [...elements];\r\n    for (var group of exclusionGroups) {\r\n        //console.log(\"CHECKING\", group);\r\n        if (group.includes(node.id)) {\r\n            //console.log(\"FOUND THE EXCLUSION GROUP\");\r\n            //console.log(group);\r\n\r\n            // Move this to the back\r\n            const prevCourse = group.shift();\r\n            group.push(prevCourse);\r\n\r\n            // Current course we need to display is now at front of queue\r\n            const curCourse = group[0];\r\n\r\n            //console.log(prevCourse);-\r\n            //console.log(curCourse);\r\n\r\n\r\n            // Toggle the nodes themselves accordingly\r\n            for (var e of elements) {\r\n                if (e.id === prevCourse) {\r\n                    /*console.log(e);\r\n                    console.log(\"HIDING\");\r\n                    console.log(prevCourse);*/\r\n                    e.isHidden = true;\r\n                    //console.log(e);\r\n                } else if (e.id === curCourse) {\r\n                    /*console.log(e);\r\n                    console.log(\"REVEALING\");\r\n                    console.log(curCourse);*/\r\n                    e.isHidden = false;\r\n                    //console.log(e);\r\n                }\r\n            }\r\n\r\n            // Determine state of the nodes (E.g. COMP6441 can be selectable\r\n            // whilst COMP6841 is not)\r\n            var curNode = getElement(curCourse, elements);\r\n            if (checkPrerequisites(curNode, elements, selectedNodes)) {\r\n                // The new node is selectable\r\n                //console.log(\"================== SELECTABLE\", curCourse);\r\n                selectableNodes[curCourse] = 1;\r\n                \r\n                // Determine previous node condition\r\n                if (selectedNodes.hasOwnProperty(prevCourse)) {\r\n                    //console.log(\"PREVIOUS SELECTED\", prevCourse);\r\n                    delete selectedNodes[prevCourse];\r\n                    delete selectableNodes[curCourse];\r\n                    selectedNodes[curCourse] = 1;\r\n                } else if (selectableNodes.hasOwnProperty(prevCourse)) {\r\n                    //console.log(\"PREVIOUS SELECTABLE\", prevCourse);\r\n                    delete selectableNodes[prevCourse];\r\n                }\r\n            } else {\r\n                // The new node is not selectable\r\n                // Unselect the original node\r\n                unselectNode(elements, node, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            }         \r\n\r\n            // Get all the edges of the previous course and hide all of them\r\n            // Then use regex sub to determine the new edges to reveal\r\n            // Transfer over selected, potential and hover edges if they are in newedgeslist\r\n            var edgesList = getConnectedEdges([node], edges);\r\n            var newEdgesList = getConnectedEdges([curNode], edges);\r\n            var edgesIds = [];\r\n            var newEdgesIds = [];\r\n            for (const edge of edgesList) {\r\n                edgesIds.push(edge.id);\r\n            }\r\n            for (const newEdge of newEdgesList) {\r\n                newEdgesIds.push(newEdge.id);\r\n            }        \r\n\r\n            // Stores all the common edges\r\n            var checkedEdges = [];\r\n\r\n            // Go through each edge we need to hide and check what we should do\r\n            // with the edge in hideEdgesList\r\n            for (const edge of edgesList) {\r\n                var hideEdge = getElement(edge.id, elements);\r\n                hideEdge.isHidden = true;\r\n                var newEdgeId = hideEdge.id.replace(prevCourse, curCourse);\r\n                if (getElement(newEdgeId, edges) !== null) {\r\n                    checkedEdges.push(newEdgeId);\r\n                } \r\n\r\n                // If selected, unselect it\r\n                if (selectedEdges.hasOwnProperty(hideEdge.id)) {\r\n                    delete selectedEdges[hideEdge.id];\r\n                    if (newEdgesIds.includes(newEdgeId)) {\r\n                        // This is in the newEdges list. Transfer the edge property\r\n                        selectedEdges[newEdgeId] = 1;\r\n                    }\r\n                }\r\n\r\n                // If potential, unpotential it\r\n                if (potentialEdges.hasOwnProperty(hideEdge.id)) {\r\n                    delete potentialEdges[hideEdge.id];\r\n                    if (newEdgesIds.includes(newEdgeId)) {\r\n                        // This is in the newEdges list. Transfer the edge property\r\n                        potentialEdges[newEdgeId] = 1;\r\n                    }\r\n                }\r\n\r\n                // If hover, unhover it\r\n                if (hoverEdges.hasOwnProperty(hideEdge.id)) {\r\n                    delete hoverEdges[hideEdge.id];\r\n                    if (newEdgesIds.includes(newEdgeId)) {\r\n                        // This is in the newEdges list. Transfer the edge property\r\n                        hoverEdges[newEdgeId] = 1;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            //console.log(\"CHECKED EDGES\", checkedEdges);\r\n            \r\n            for (const edge of edgesIds) {\r\n                const newEdgeId = edge.replace(prevCourse, curCourse);\r\n                if (! checkedEdges.includes(newEdgeId)) {\r\n                    // Old edge which has not been transferred to new edge.\r\n                    // Deal with the TARGET NODE SELECTABILITY right here\r\n                    var target = newEdgeId.split('-')[1];\r\n                    //console.log(\"CHECKING\", newEdgeId);\r\n                    //console.log(\"TARGET IS\", target);\r\n                    // Note that we cannot use newEdge.target as this edge\r\n                    // DOES NOT EXIST ( i think )\r\n\r\n                    // TODO: TEMPORARY FIX. Make sure target is not current course\r\n                    if (target === curCourse) continue;\r\n\r\n                    if (selectableNodes.hasOwnProperty(target)) {\r\n                        //console.log(\"Deleting \" + target);\r\n                        delete selectableNodes[target];\r\n                    }\r\n                }\r\n            }\r\n\r\n            // For each edge, show it IF TARGET AND SOURCE ARE NOT HIDDEN\r\n            // Will also show any additional edges\r\n            // (Example: COMP6441, COMP6841. COMP6841 -> COMP6448 but COMP6441 does not)\r\n            for (const newEdge of newEdgesList) {\r\n                var edge = getElement(newEdge.id, elements);\r\n                const sourceNode = getElement(edge.source, elements);\r\n                const targetNode = getElement(edge.target, elements);\r\n                if ((!sourceNode.isHidden) && (!targetNode.isHidden)) {\r\n                    // Show the edge if both nodes are not hidden\r\n                    edge.isHidden = false;    \r\n                }\r\n\r\n                // Determine if this edge has been checked before\r\n                if (checkedEdges.includes(newEdge.id)) {\r\n                    // It has been checked before\r\n                    // TODO: THIS CAN BREAK if both nodes have same edges\r\n                    // but one has an additional prerequisite??????\r\n                    continue;\r\n                } else {\r\n                    //console.log(newEdge.id + \" NOT BEEN CHECKED BEFORE\")\r\n                    // It has NOT been checked before\r\n                    if (selectedNodes.hasOwnProperty(curCourse)) {\r\n                        //console.log(curCourse + \" was previously selected\");\r\n                        \r\n                        if (sourceNode.id === curCourse) {\r\n                            // Reveal node is selected and source of edge. Make potential edge.\r\n                            potentialEdges[newEdge.id] = 1;\r\n                            // Check if the target node is selectable\r\n                            if (! selectableNodes.hasOwnProperty(edge.target)) {\r\n                                if (checkPrerequisites(targetNode, elements, selectedNodes)) {\r\n                                    //console.log(edge.target + \" DOES MEET PREREQS\");\r\n                                    selectableNodes[targetNode.id] = 1;\r\n                                } else {\r\n                                    //console.log(edge.target + \" DOES NOT MEET PREREQS\");\r\n                                }\r\n                            }\r\n                        } else {\r\n                            // Reveal node is selected and target of edge. Check previous edges/nodes\r\n                            if (curNode.data.conditions.prerequisites !== null) {\r\n                                for (const prereq of curNode.data.conditions.prerequisites) {\r\n                                    if (selectedNodes.hasOwnProperty(prereq)) {\r\n                                        // This node was selected. Make the edge selected\r\n                                        if (potentialEdges.hasOwnProperty('e' + prereq + '-' + curCourse)) delete potentialEdges['e' + prereq + '-' + curCourse];\r\n                                        selectedEdges['e' + prereq + '-' + curCourse] = 1;\r\n                                    } else {\r\n                                        // This node was not selected. Make sure the edge is unselected\r\n                                        if (potentialEdges.hasOwnProperty('e' + prereq + '-' + curCourse)) delete potentialEdges['e' + prereq + '-' + curCourse];\r\n                                        if (selectedEdges.hasOwnProperty('e' + prereq + '-' + curCourse)) delete selectedEdges['e' + prereq + '-' + curCourse];\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        //console.log(curCourse + \" was not previously selected\")\r\n                        // The node was not selected before. Delete any potential edges\r\n                        // Make target node unselectable if prereqs are not met\r\n                        if (potentialEdges.hasOwnProperty(edge.id)) {\r\n                            //console.log(\"DELETING \" + edge.id);\r\n                            delete potentialEdges[edge.id];\r\n                            if (selectableNodes.hasOwnProperty(edge.target)) {\r\n                                //console.log(edge.target + \" WAS SELECTABLE\")\r\n                                if (! checkPrerequisites(targetNode, elements, selectedNodes)) {\r\n                                    //console.log(edge.target + \" DOES NOT MEET PREREQS\");\r\n                                    delete selectableNodes[targetNode.id];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            /*for (const newEdge of newEdgesList) {\r\n                for (const edge of newElements) {\r\n                    if (newEdge.id === edge.id) {\r\n                        const sourceNode = getElement(edge.source, elements);\r\n                        const targetNode = getElement(edge.target, elements);\r\n                        if ((!sourceNode.isHidden) && (!targetNode.isHidden)) {\r\n                            edge.isHidden = false;\r\n                            \r\n                            \r\n                            // If the new node is selected, make this edge blue\r\n                            // Else, make this edge grey. Deals with differing edge\r\n                            // cases COMP6441 and COMP6841\r\n                            if (selectedNodes.hasOwnProperty(curCourse)) {\r\n                                potentialEdges[edge.id] = 1;\r\n                                // Make sure the target node is selectable\r\n                                if (! selectableNodes.hasOwnProperty(edge.target)) {\r\n                                    if (checkPrerequisites(targetNode, selectedNodes)) {\r\n                                        selectableNodes[targetNode.id] = 1;\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                if (potentialEdges.hasOwnProperty(edge.id)) {\r\n                                   delete potentialEdges[edge.id];\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }*/\r\n\r\n\r\n            break;\r\n        }\r\n    }\r\n\r\n    return newElements;\r\n}","// HELPER FUNCTION FOR unselecting nodes\r\n// Determines if any nodes not connected to unselect node needs to be unselected.\r\n// For example, nodes which rely on N units completed\r\nimport checkPrerequisites from './checkprerequisites.js';\r\nimport checkPrequisiteUnits from './checkprerequisites.js';\r\nimport unselectNode from './unselectnode.js';\r\nimport getElement from './getelement.js';\r\n\r\nexport default function unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    console.log(\"UNSELECTUNCONNECTED\");\r\n    const selectedNodesList = Object.keys(selectedNodes);\r\n    for (const selected of selectedNodesList) {\r\n        if (selected === \"SENGAH\") continue;\r\n        console.log(\"CHECKING \" + selected);\r\n\r\n        // Determine if prerequisites are met\r\n        const selectedNode = getElement(selected, elements);\r\n        if (! checkPrerequisites(selectedNode, elements, selectedNodes)) {\r\n            // Prerequisites are not met\r\n            unselectNode(elements, selectedNode, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            continue;\r\n        }\r\n\r\n        // CASE if the node is selected and it has n_course prerequisite \r\n        if (selectedNode.data.conditions.units_required !== null) {\r\n            console.log(\"+++++++++++++++++++\", selectedNode.id);\r\n            // Units required exists\r\n            // Do not count the nodes it \"unlocks\" towards its unit count\r\n            // DO not count nodes with a higher \"units_required\" towards its unit count\r\n            // NOTE: This might backfire if it has an unlock which DOES NOT\r\n            // require it as a prerequisite\r\n            \r\n            var trueSelectedNodes = {...selectedNodes};\r\n\r\n            if (selectedNode.data.unlocks !== null) {\r\n                // Create unlock queue to process \"selected\" unlocks\"\r\n                const selectedUnlockQueue = [];\r\n                for (const unlockCourse of selectedNode.data.unlocks) {\r\n                    if (selectedNodes.hasOwnProperty(unlockCourse)) selectedUnlockQueue.push(unlockCourse);\r\n                }\r\n\r\n                while (selectedUnlockQueue.length !== 0) {\r\n                    const curUnlock = getElement(selectedUnlockQueue.shift(), elements);\r\n                    console.log(\"------------- deleting \" + curUnlock.id);\r\n                    delete trueSelectedNodes[curUnlock.id];\r\n\r\n                    if (curUnlock.data.unlocks !== null) {\r\n                        for (const unlockCourse of curUnlock.data.unlocks) {\r\n                            if (selectedNodes.hasOwnProperty(unlockCourse)) selectedUnlockQueue.push(unlockCourse);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // We now have a list of nodes which will count towards our current node's unit requirements\r\n            // Final check = Check for other selected nodes which have unit requirements\r\n            // Do not count them unless their unit requirements are smaller than current node's.\r\n            const trueSelectedNodesList = Object.keys(trueSelectedNodes);\r\n            for (const selected of trueSelectedNodesList) {\r\n                console.log(\"Checking \", selected);\r\n                const selectedUnitsNode = getElement(selected, elements);\r\n                if (selectedUnitsNode.data.conditions.units_required !== null) {\r\n                    if (selectedUnitsNode.data.conditions.units_required >= selectedNode.data.conditions.units_required) {\r\n                        delete trueSelectedNodes[selected];\r\n                    }\r\n                }\r\n            }\r\n\r\n            console.log(\"TRUE SELECTED LOOKS LIKE\", trueSelectedNodes);\r\n            // Perform prerequisite unit check once more\r\n            if (! checkPrequisiteUnits(selectedNode, elements, trueSelectedNodes)) {\r\n                unselectNode(elements, selectedNode, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            }\r\n        }\r\n    }\r\n\r\n    const selectableNodesList = Object.keys(selectableNodes);\r\n    for (const selectable of selectableNodesList) {\r\n        // Determine if prerequisites are met\r\n        const selectableNode = getElement(selectable, elements);\r\n        if (! checkPrerequisites(selectableNode, elements, selectedNodes)) {\r\n            // Prerequisites are not met\r\n            delete selectableNode[selectable];\r\n        }\r\n    }\r\n}","import React, {useState} from 'react';\r\nimport ReactFlow, {isNode, isEdge, ReactFlowProvider} from 'react-flow-renderer';\r\nimport TutorialNode1 from './tutorialnode1.js';\r\nimport TutorialNode2 from './tutorialnode2.js';\r\n\r\nimport hoverPrerequisites from './hoverprerequisites.js';\r\nimport unhoverPrerequisites from './unhoverprerequisites.js';\r\nimport highlightElements from './highlightelements.js';\r\nimport checkPrerequisites from './checkprerequisites.js';\r\n\r\nimport selectNode from './selectnode.js';\r\nimport unselectNode from './unselectnode.js';\r\nimport getSelectable from './getselectable.js';\r\nimport exclusionSwap from './exclusionswap.js';\r\nimport unselectUnconnected from './unselectunconnected.js';\r\n\r\nvar elementsData = [\r\n    {id: \"CODE0000\", type: \"tutorial1\", data: {instructions: \"Circles is an interactive degree planner\", course_level: null, units: 0, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: null, prerequisites: null, corequisites: null, units_required: null, level_for_units_required: null, core_year: null, other: null}, equivalents: null, exclusions: null, unlocks: [\"CODE1111\"]}, position: {x: -150, y: -150}, style: {cursor: 'pointer', display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 8, color: \"black\", background: \"lightgrey\", width: 80, height: 80, borderRadius: 40, border: \"2px solid black\", boxShadow: \"0px 0px 2px 0px grey\"}, textColour: 'black', textSelectedColour: 'black', selectedColour: 'lightgrey', selectableColour: 'black', isHidden: false},\r\n    {id: \"CODE1111\", type: \"tutorial1\", data: {instructions: \"Click on a node to take the course\", course_level: null, units: 6, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: \"CODE0000\", prerequisites: [\"CODE0000\"], corequisites: null, units_required: null, level_for_units_required: null, core_year: null, other: null}, equivalents: null, exclusions: null, unlocks: [\"CODE7777\", \"CODE2222\"]}, position: {x: -75, y: 0}, style: {cursor: 'pointer', display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 8, color: \"#1EB13C\", background: \"white\", width: 80, height: 80, borderRadius: 40, border: \"2px solid #1EB13C\", boxShadow: \"0px 0px 2px 0px grey\"}, textColour: '#1EB13C', textSelectedColour: 'white', selectableColour: '#bce8c5', selectedColour: '#1EB13C', isHidden: false},\r\n    {id: \"CODE2222\", type: \"tutorial1\", data: {instructions: \"Courses light up when you clear all the prerequisites\", course_level: null, units: 6, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: \"CODE1111\", prerequisites: [\"CODE1111\"], corequisites: null, units_required: null, level_for_units_required: null, core_year: null, other: null}, equivalents: null, exclusions: null, unlocks: [\"CODE7777\", \"CODE3333\", \"CODE4444\"]}, position: {x: 50, y: -115}, style: {cursor: 'pointer', display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 8, color: \"#166DBA\", background: \"white\", width: 80, height: 80, borderRadius: 40, border: \"2px solid #166DBA\", boxShadow: \"0px 0px 2px 0px grey\"}, textColour: '#166DBA', textSelectedColour: 'white', selectableColour: '#b9d3ea', selectedColour: '#166DBA', isHidden: false},\r\n\r\n    {id: \"CODE7777\", type: \"tutorial1\", data: {instructions: \"Hover over a node to see its prerequisites\", course_level: null, units: 6, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: 'CODE1111 && CODE2222', prerequisites: ['CODE1111', 'CODE2222'], corequisites: null, units_required: null, level_for_units_required: null, core_year: null, other: null}, equivalents: null, unlocks: null}, position: {x: 110, y: 75}, style: {cursor: 'pointer', display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 8, color: \"#D66328\", background: \"white\", width: 80, height: 80, borderRadius: 40, border: \"2px solid #8A36B4\", boxShadow: \"0px 0px 2px 0px grey\"}, textColour: '#8A36B4', textSelectedColour: 'white', selectableColour: '#dcc3e9', selectedColour: '#8A36B4', isHidden: false},\r\n\r\n\r\n    {id: \"CODE3333\", type: \"tutorial2\", data: {instructions: \"Double click to toggle between equivalent courses\", course_level: null, units: 6, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: \"CODE2222\", prerequisites: [\"CODE2222\"], corequisites: null, units_required: null, level_for_units_required: null, core_year: null, other: null}, equivalents: null, exclusions: [\"CODE4444\"], unlocks: null}, position: {x: 225, y: -50}, style: {cursor: 'pointer', display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 8, color: \"#449A94\", background: \"white\", width: 80, height: 80, borderRadius: 40, border: \"2px solid #449A94\", boxShadow: \"0px 0px 2px 0px grey\"}, textColour: '#449A94', textSelectedColour: 'white', selectableColour: '#c7e1df', selectedColour: '#449A94', isHidden: false},\r\n    {id: \"CODE4444\", type: \"tutorial2\", data: {instructions: \"Look out for the black 'swap' icon on nodes!\", course_level: null, units: 6, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: \"CODE2222\", prerequisites: [\"CODE2222\"], corequisites: null, units_required: null, level_for_units_required: null, core_year: null, other: null}, equivalents: null, exclusions: [\"CODE3333\"], unlocks: null}, position: {x: 225, y: -50}, style: {cursor: 'pointer', display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 8, color: \"#449A94\", background: \"white\", width: 80, height: 80, borderRadius: 40, border: \"2px solid #449A94\", boxShadow: \"0px 0px 2px 0px grey\"}, textColour: '#449A94', textSelectedColour: 'white', selectableColour: '#c7e1df', selectedColour: '#449A94', isHidden: false},\r\n    \r\n    {id: \"CODE5555\", type: \"tutorial1\", data: {instructions: \"This course required 24UOC. It will be selectable once you have enough units\", course_level: null, units: 6, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: null, prerequisites: null, corequisites: null, units_required: 24, level_for_units_required: null, core_year: null, other: null}, equivalents: null, unlocks: null}, position: {x: -150, y: 125}, style: {cursor: 'pointer', display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 8, color: \"#D66328\", background: \"white\", width: 80, height: 80, borderRadius: 40, border: \"2px solid #D66328\", boxShadow: \"0px 0px 2px 0px grey\"}, textColour: '#D66328', textSelectedColour: 'white', selectableColour: '#f3d0bf', selectedColour: '#D66328', isHidden: false},\r\n    \r\n    {id: \"CODE6666\", type: \"tutorial1\", data: {instructions: \"Manage your schedule at the bottom of our page\", course_level: null, units: 0, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: null, prerequisites: null, corequisites: null, units_required: null, level_for_units_required: null, core_year: null, other: null}, equivalents: null, unlocks: null}, position: {x: 200, y: 175}, style: {cursor: 'pointer', display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 8, color: \"#CA1818\", background: \"white\", width: 120, height: 36, borderRadius: 2.5, border: \"2px solid #CA1818\"}, textColour: '#CA1818', textSelectedColour: 'white', selectableColour: '#efbaba', selectedColour: '#CA1818', isHidden: false},\r\n\r\n    {id: 'eCODE0000-CODE1111', source: 'CODE0000', target: 'CODE1111', type: 'straight', style: {opacity: '0.2', stroke: 'grey'}, animated: false, isHidden: false},\r\n    {id: 'eCODE1111-CODE2222', source: 'CODE1111', target: 'CODE2222', type: 'straight', style: {opacity: '0.2', stroke: 'grey'}, animated: false, isHidden: false},\r\n    {id: 'eCODE2222-CODE3333', source: 'CODE2222', target: 'CODE3333', type: 'straight', style: {opacity: '0.2', stroke: 'grey'}, animated: false, isHidden: false},\r\n    {id: 'eCODE2222-CODE4444', source: 'CODE2222', target: 'CODE4444', type: 'straight', style: {opacity: '0.2', stroke: 'grey'}, animated: false, isHidden: false},\r\n    {id: 'eCODE1111-CODE7777', source: 'CODE1111', target: 'CODE7777', type: 'straight', style: {opacity: '0.2', stroke: 'grey'}, animated: false, isHidden: false},\r\n    {id: 'eCODE2222-CODE7777', source: 'CODE2222', target: 'CODE7777', type: 'straight', style: {opacity: '0.2', stroke: 'grey'}, animated: false, isHidden: false}\r\n\r\n];\r\n\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {\"CODE0000\": 1, \"CODE6666\": 1};\r\nvar selectedEdges = {};\r\nvar selectableNodes = {\"CODE1111\": 1};\r\nvar potentialEdges = {\"eCODE0000-CODE1111\": 1};\r\nvar hoverEdges = {};\r\nvar exclusionGroups = [[\"CODE3333\", \"CODE4444\"]];\r\nvar exclusionNodes = {};\r\n\r\nconst nodeTypes = {\r\n    tutorial1: TutorialNode1,\r\n    tutorial2: TutorialNode2,\r\n};\r\n\r\n\r\n// elementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\n\r\n\r\n\r\nconst InteractiveTutorial = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n\r\n    const onLoad = (reactFlowInstance) => {\r\n        // HARD RESET STATE ON LOAD\r\n        selectedNodes = {\"CODE0000\": 1, 'CODE6666': 1};\r\n        selectedEdges = {};\r\n        selectableNodes = {\"CODE1111\": 1};\r\n        potentialEdges = {\"eCODE0000-CODE1111\": 1};\r\n        hoverEdges = {};\r\n        exclusionGroups = [[\"CODE3333\", \"CODE4444\"]];\r\n        exclusionNodes = {};        \r\n        \r\n        for (var e of elements) {\r\n            e.isHidden = false;\r\n        }\r\n        for (const group of exclusionGroups) {\r\n            for (const exclusion of group) {\r\n                exclusionNodes[exclusion] = 1;\r\n            }\r\n        }\r\n        for (var group of exclusionGroups) {\r\n            const last = group.pop();\r\n            for (var course of elements) {\r\n                if (last === course.id) {\r\n                    course.isHidden = true;\r\n                    for (var edge of elements) {\r\n                        if (isNode(edge)) continue;\r\n                        if (edge.source === last || edge.target === last) {\r\n                            edge.isHidden = true;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            group.push(last);\r\n        }\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n        reactFlowInstance.fitView();\r\n    };\r\n\r\n    const selectUnselect = (element) => {\r\n        unhoverPrerequisites(hoverEdges);\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n    \r\n    const toggleExclusion = (element) => {\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onElementClick = (event, element) => {\r\n        if (element.id === \"CODE0000\" || element.id === 'CODE6666') return;\r\n        if (isEdge(element)) return;\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return;\r\n\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 250);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            selectUnselect(element);\r\n        }\r\n    }\r\n\r\n    const onNodeMouseEnter = (event, node) => {\r\n        setHoverNode(node);\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    return (\r\n        <ReactFlow\r\n            elements={elements}\r\n            style={{width: \"100%\", height: \"90vh\"}}\r\n            onLoad={onLoad}\r\n            nodeTypes={nodeTypes}\r\n            nodesConnectable={false}\r\n            onElementClick={onElementClick}\r\n            paneMoveable={false}\r\n            selectNodesOnDrag={false}\r\n            elementsSelectable={false}\r\n            nodesDraggable={false}\r\n            onNodeMouseEnter={onNodeMouseEnter}\r\n            onNodeMouseLeave={onNodeMouseLeave}\r\n        >\r\n        </ReactFlow>\r\n    );\r\n}\r\n\r\nexport default InteractiveTutorial;","import React from \"react\";\r\nimport { Button, Container, Modal } from 'semantic-ui-react'\r\nimport InteractiveTutorial from './interactivetutorial.js';\r\n\r\nfunction exampleReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'OPEN_MODAL':\r\n      return { open: true, dimmer: action.dimmer }\r\n    case 'CLOSE_MODAL':\r\n      return { open: false }\r\n    default:\r\n      throw new Error()\r\n  }\r\n}\r\n\r\nfunction TutorialModal() {\r\n  const [state, dispatch] = React.useReducer(exampleReducer, {\r\n    open: false,\r\n    dimmer: undefined,\r\n  })\r\n  const { open, dimmer } = state\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        size=\"mini\"\r\n        color=\"black\"\r\n        onClick={() => dispatch({ type: 'OPEN_MODAL', dimmer: 'blurring' })}\r\n      >\r\n        <text>Need Help?</text>  \r\n      </Button>\r\n\r\n      <Modal\r\n        closeIcon\r\n        dimmer={dimmer}\r\n        open={open}\r\n        onClose={() => dispatch({ type: 'CLOSE_MODAL' })}\r\n      >\r\n        <Container>\r\n          <InteractiveTutorial />\r\n        </Container>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TutorialModal\r\n\r\n//DropdownDegrees.clickDone() \r\n\r\n//DropdownDegrees d = new DropdownDegrees(); \r\n//d.clickDone()","import React from 'react';\r\nimport SidebarModal from \"./sidebar-modal.js\";\r\nimport TutorialModal from \"./tutorial-modal.js\";\r\nimport { Icon, Button, Container, Header, Divider, Segment, Message, Label } from 'semantic-ui-react';\r\nimport ScrollTo from \"react-scroll-into-view\";\r\nimport specialisationsJSON from \"../webscraper/specialisations.json\";\r\nimport coursesJSON from \"../webscraper/courses.json\";\r\n\r\nconst REGEX_COURSE_CODE = /[A-Z]{4}\\d{4}/g;\r\n\r\nconst getCoursesInLevel = (rawList) => {\r\n    rawList = rawList.flat().filter(c => c !== \"ANY COURSE\");\r\n    const allCourseIds = Object.keys(coursesJSON);\r\n    const courseList = [];\r\n    rawList.forEach(courseId => {\r\n        if (courseId.match(REGEX_COURSE_CODE)) {\r\n            courseList.push(courseId);\r\n        } else if (courseId.match(/^[A-Z]{4}\\d$/)) {\r\n            const relevantCourses = allCourseIds.filter(c => c.includes(courseId));\r\n            relevantCourses.forEach(c => {\r\n                if (courseList.includes(c)) return;\r\n                courseList.push(c);\r\n            });\r\n        }\r\n    });\r\n\r\n    return courseList;\r\n}\r\n\r\nconst getSelectedCourses = (specialisationCodes, selectedNodes) => {\r\n    console.log(specialisationCodes);\r\n    return specialisationCodes.map(specId => {\r\n        const levels = Object.keys(specialisationsJSON[specId].structure);\r\n        const coreCourses = [];\r\n\r\n        return levels.filter(levelName => {\r\n            const courseList = specialisationsJSON[specId].structure[levelName].courses;\r\n            if (!courseList) return false;\r\n            if (courseList.length === 1 && courseList.includes(\"ANY COURSE\")) return false;\r\n            return true;\r\n        }).map(levelName => {\r\n            const rawList = specialisationsJSON[specId].structure[levelName].courses;\r\n            const courseList = getCoursesInLevel(rawList);\r\n            const minUnits = specialisationsJSON[specId].structure[levelName].units_required;\r\n            const style = {\r\n                transition: \"0.3s ease\"\r\n            }\r\n            if (levelName.match(/[Cc]ore/g)) {\r\n                // CORE COURSE\r\n                courseList.forEach(c => coreCourses.push(c));\r\n                const unitsTaken = courseList.reduce((total, c) => total + (c in selectedNodes ? coursesJSON[c].units : 0), 0);\r\n                const showUnits = minUnits\r\n                    ? <Label horizontal style={{transition: \"0.3s ease\", alignSelf: \"flex-start\"}} color={unitsTaken >= minUnits ? \"green\" : \"red\"}>{unitsTaken}/{minUnits}</Label>\r\n                    : null;\r\n                return (\r\n                    <Segment key={levelName} color=\"red\">\r\n                        <div style={{display: \"flex\"}}>\r\n                            <Header style={{flexGrow: \"1\"}} as=\"h5\">{specId} - {levelName}</Header>\r\n                            {showUnits}\r\n                        </div>\r\n                        {courseList.map(c => c in selectedNodes ? <Label key={c} size=\"small\" color=\"grey\" style={style}>{c}</Label> : <Label key={c} size=\"small\" style={style}>{c}</Label>)}\r\n                    </Segment>\r\n                )\r\n            } else {\r\n                // Not core course. Render segment with chosen electives only.\r\n                const unitsTaken = courseList.reduce((total, c) => total + (c in selectedNodes && !coreCourses.includes(c) ? coursesJSON[c].units : 0), 0);\r\n                const showUnits = minUnits\r\n                    ? <Label horizontal style={{transition: \"0.3s ease\", alignSelf: \"flex-start\"}} color={unitsTaken >= minUnits ? \"green\" : \"red\"}>{unitsTaken}/{minUnits}</Label>\r\n                    : null;\r\n                return (\r\n                    <Segment key={levelName} style={{minHeight: \"70px\"}}>\r\n                        <div style={{display: \"flex\"}}>\r\n                            <Header style={{flexGrow: \"1\"}} as=\"h5\">{specId} - {levelName}</Header>\r\n                            {showUnits}\r\n                        </div>\r\n                        {courseList.filter(c => (c in selectedNodes && !coreCourses.includes(c))).map(c => <Label key={c} size=\"small\" color=\"grey\" style={style}>{c}</Label>)}\r\n                    </Segment>\r\n                )\r\n            }\r\n        })\r\n    });\r\n}\r\nclass Sidebar extends React.Component {\r\n    render() {\r\n        return (\r\n            <Container style={{paddingLeft: \"10px\", paddingRight: \"20px\"}}>\r\n                <Header as=\"h1\" textAlign=\"center\" style={{marginTop: \"10px\"}}>Circles</Header>\r\n                <Message info>\r\n                    <p>Circles is a <b>visual degree planner</b> for UNSW undergraduate students. Choose your program and degree to begin!</p>\r\n                    <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\"}}>\r\n                        <SidebarModal />\r\n                        <TutorialModal />\r\n                    </div>\r\n                </Message>\r\n                <Divider></Divider>\r\n                <Container>\r\n                    <Header as=\"h3\" textAlign=\"center\">Your selected courses</Header>\r\n                    {getSelectedCourses(this.props.specialisations, this.props.selectedNodes)}\r\n                </Container>\r\n                <Container textAlign=\"center\">\r\n                    <ScrollTo selector=\"#DegreePlanner\">\r\n                        <Button\r\n                            animated=\"vertical\"\r\n                            color=\"red\"\r\n                            style={{marginTop: \"10px\", marginBottom: \"10px\"}}\r\n                        >\r\n                            <Button.Content visible>Generate degree planner</Button.Content>\r\n                            <Button.Content hidden>\r\n                                <Icon name=\"arrow down\" />\r\n                            </Button.Content>\r\n                        </Button>\r\n                    </ScrollTo>\r\n\r\n                </Container>\r\n            </Container>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Sidebar","import React, { useState } from \"react\";\r\nimport { Button, Dropdown } from \"semantic-ui-react\";\r\nimport { useStoreActions } from \"react-flow-renderer\";\r\nimport getElement from \"./getelement.js\";\r\n\r\nexport default function DropdownSearch(props) {\r\n    const [search, setSearch] = useState(null);\r\n\r\n    const handleChange = (e, prop) => {\r\n        setSearch(prop.value);\r\n    };\r\n\r\n    const { setInitTransform } = useStoreActions((actions) => actions);\r\n    const transformUpdater = (x, y, zoom) => {\r\n        setInitTransform({ x, y, k: zoom });\r\n    };\r\n\r\n    const clickDone = () => {\r\n        if (search === null) return;\r\n        const element = getElement(search, props.searchElements);\r\n\r\n        transformUpdater(\r\n            -(element.position.x) * 2 + (window.innerWidth * 0.75)/2 - 64,\r\n            -(element.position.y) * 2 + (window.innerHeight)/2 - 64,\r\n            2\r\n        )\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dropdown\r\n                selection\r\n                search\r\n                options={props.searchNodeOptions}\r\n                placeholder=\"Looking for a course?\"\r\n                onChange={handleChange}\r\n                onKeyPress={event => {\r\n                    if (event.key === 'Enter') {\r\n                      clickDone();\r\n                    }\r\n                  }}\r\n                value={search}\r\n            />\r\n            <Button\r\n                onClick={clickDone}\r\n                icon=\"search\"\r\n                color=\"blue\"\r\n                style={{marginLeft: \"5px\"}}\r\n            >\r\n            </Button>\r\n        </>\r\n    );\r\n}\r\n","import {isNode} from 'react-flow-renderer';\r\n\r\n// HELPER FUNCTION FOR POSITIONING\r\n// Prints out positions of all nodes\r\nexport default function positionHelper(elements) {\r\n    var positioning_data = [];\r\n    for (const e of elements) {\r\n        if (isNode(e)) {\r\n            positioning_data.push({\r\n                id: e.id,\r\n                position: {x: e.position.x, y: e.position.y},\r\n            });\r\n        }\r\n    }\r\n    // Write data to position output file. Note we have to do this ourselves as we\r\n    // are making a server write to a local file.\r\n    console.log('[');\r\n    for (const e of positioning_data) {\r\n        console.log('{\"id\": \"' + e.id + '\", \"position\": {\"x\": ' + e.position.x + ', \"y\": ' + e.position.y + '}},');\r\n    }\r\n    console.log(']');\r\n}","import React, {useState} from 'react';\r\nimport ReactFlow, { isNode, isEdge, ReactFlowProvider } from 'react-flow-renderer';\r\n\r\nimport CustomNode1 from '../../components/customnode1.js';\r\nimport CustomNode2 from '../../components/customnode2.js';\r\nimport HeaderNode1 from '../../components/headernode1.js';\r\n\r\nimport HoverInfo from '../../components/hoverinfo.js';\r\nimport hoverPrerequisites from '../../components/hoverprerequisites.js';\r\nimport unhoverPrerequisites from '../../components/unhoverprerequisites.js';\r\n\r\nimport { Grid, Segment, Container, Dropdown, Header } from 'semantic-ui-react'\r\nimport Sidebar from \"../../components/sidebar.js\"\r\n// import pkg from 'semantic-ui-react/package.json'\r\n\r\nimport DegreePlanner from \"../../components/degreeplanner.js\"\r\nimport DropdownSearch from \"../../components/dropdownsearch.js\"\r\n\r\nimport positionHelper from '../../components/positionhelper.js';\r\nimport selectNode from '../../components/selectnode.js';\r\nimport unselectNode from '../../components/unselectnode.js';\r\nimport highlightElements from '../../components/highlightelements.js';\r\nimport getSelectable from '../../components/getselectable.js';\r\nimport checkPrerequisites from '../../components/checkprerequisites';\r\nimport exclusionSwap from '../../components/exclusionswap.js';\r\n\r\nimport unselectUnconnected from '../../components/unselectunconnected.js';\r\nimport coursesJSON from \"../../webscraper/courses.json\";\r\nimport dataJSON from \"./data.json\"\r\n\r\nvar specialisations = ['SENGAH'];\r\nvar program = \"3707\";\r\nvar elementsData = dataJSON.slice();\r\n\r\n// This is for dropdown search\r\nvar searchNodeOptions = [];\r\nfor (const course of elementsData) {\r\n    if (isNode(course)) {\r\n        searchNodeOptions.push({\r\n            key: course.id,\r\n            value: course.id,\r\n            text: course.id\r\n        });\r\n    }\r\n}\r\n\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {};\r\nfor (const specialisation of specialisations) selectedNodes[specialisation] = 1;\r\n\r\nvar selectedEdges = {};\r\nvar selectableNodes = {};\r\nvar potentialEdges = {};\r\nvar hoverEdges = {};\r\n\r\n// Load up the chart with initial selectable nodes and edges\r\nfor (const node of nodesData) {\r\n    if (selectedNodes.hasOwnProperty(node.id)) {\r\n        if (node.data.unlocks === null) continue;\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n        }\r\n    } else if (checkPrerequisites(node, elementsData, selectedNodes)) {\r\n        selectableNodes[node.id] = 1;\r\n    }\r\n}\r\n\r\nvar exclusionGroups = require(\"./data_exclusion.json\");\r\nvar exclusionNodes = {};\r\nfor (const group of exclusionGroups) {\r\n    for (const exclusion of group) {\r\n        exclusionNodes[exclusion] = 1;\r\n    }\r\n}\r\n\r\nelementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\nconst nodeTypes = {\r\n    custom1: CustomNode1,\r\n    custom2: CustomNode2,\r\n    header1: HeaderNode1\r\n};\r\n\r\nconst layoutStyle = {overflowX: \"hidden\", overflowY: \"overlay\", width: \"100vw\", height: \"100vh\"};\r\n\r\nconst getMoreCoursesForDropdown = (dataJSON) => {\r\n\r\n    const moreOptions = [];\r\n    const nodesOnFlowchart = dataJSON.map(node => node.id);\r\n    // console.log(\"refresh\", nodesOnFlowchart);\r\n\r\n    for (const code in coursesJSON) {\r\n        if (nodesOnFlowchart.includes(code)) continue;\r\n\r\n        const name = coursesJSON[code].course_name;\r\n        moreOptions.push({\r\n            key: code,\r\n            value: code,\r\n            text: code + \" - \" + name\r\n        });\r\n    }\r\n\r\n    return moreOptions;\r\n}\r\n\r\nconst BESengah = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverText, setHoverText] = useState(false);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    const [layout, setLayout] = useState(layoutStyle);\r\n    const [additionalCourses, setAdditionalCourses] = useState([])\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n\r\n    const onInstanceLoad = (instance) => {\r\n        for (var group of exclusionGroups) {\r\n            const last = group.pop();\r\n\r\n            for (var course of elementsData) {\r\n                if (last === course.id) {\r\n                    course.isHidden = true;\r\n                    // console.log(\"Hiding \" + course.id);\r\n                    // Get all the edges and hide them too\r\n                    for (var edge of elementsData) {\r\n                        if (isNode(edge)) continue;\r\n                        if (edge.source === last || edge.target === last) {\r\n                            // console.log(\"hiding \" + edge.id);\r\n                            edge.isHidden = true;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            group.push(last);\r\n        }\r\n        instance.setTransform({x: 470, y: 350, zoom: 0.38});\r\n    };\r\n\r\n    const selectUnselect = (element) => {\r\n        // NOTE: Might not need this?????\r\n        // EXPLANATION: Reason we dont need it is because we have to leave node\r\n        // anyways to hover another node. But maybe good practise to have just in case\r\n        // Unhover edges which lit up on nodeMouseEnter\r\n        unhoverPrerequisites(hoverEdges);\r\n\r\n        // 1. Select the node and fill in edges.\r\n        // - Deal with unselecting nodes\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            // console.log(\"MAINSELECT\");\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            // console.log(\"UNSELECTING\");\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n\r\n        // console.log(\"==========SelectedNodes==========\");\r\n        // console.log(selectedNodes);\r\n        // console.log(\"==========SelectedEdges==========\");\r\n        // console.log(selectedEdges);\r\n        // console.log(\"==========SelectableNodes==========\");\r\n        // console.log(selectableNodes);\r\n        // console.log(\"==========PotentialEdges==========\");\r\n        // console.log(potentialEdges);\r\n\r\n        // 2. Determine which nodes are now selectable\r\n        // - Determine which previously selectable nodes are now unselectable\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n\r\n        // Render graph accordingly\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const toggleExclusion = (element) => {\r\n        // TODO: ARE there courses which do not \r\n        // For all immediate edges of the element, swap\r\n        // with the exclusion course\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    // ==========ONCLICK==========\r\n    const onElementClick = (event, element) => {\r\n        // console.log(\"ONELEMENTCLICK\");\r\n        if (isEdge(element)) return; // Don't care about edges\r\n        if (specialisations.includes(element.id)) return; // Cannot click on main node\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return; // Cannot select non selectable nodes\r\n\r\n        // Determine double or single click for exclusion nodes\r\n        // This will prevent normal nodes from waiting the double click delay\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 250);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            // Not an exclusion node.\r\n            selectUnselect(element);\r\n        }\r\n    };\r\n    // ===========================\r\n\r\n    // ==========ONHOVER==========\r\n    const onNodeMouseEnter = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        // Display node information in top left\r\n        setHoverText(true);\r\n        setHoverNode(node);\r\n\r\n        // If the node is unselected, highlight prerequisite edges in purple\r\n        //if ((!selectedNodes.hasOwnProperty(node.id)) && (!selectableNodes.hasOwnProperty(node.id))) {\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        //}\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        setHoverText(false);\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    let hoverDisplay;\r\n    if (hoverText) {\r\n        hoverDisplay = <HoverInfo node={hoverNode}/>\r\n    }\r\n\r\n    // ===========================\r\n\r\n    // const onNodeDragStop = (event, node) => {\r\n    //     for (var e of elements) {\r\n    //         if (e.id === node.id) {\r\n    //             e.position.x = node.position.x;\r\n    //             e.position.y = node.position.y;\r\n    //             break;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    const disableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'hidden'});\r\n    }\r\n\r\n    const enableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'overlay'});\r\n    }\r\n\r\n    return (\r\n        <div style={{positon: \"relative\"}}>\r\n            <div style={layout}>\r\n                <Grid columns={2} divided>\r\n                    <Grid.Column width=\"12\">\r\n                        <ReactFlowProvider>\r\n                            <div onMouseEnter={disableBodyScroll} onMouseLeave={enableBodyScroll}>\r\n                                <ReactFlow\r\n                                    elements={elements}\r\n                                    style={{width: '100%', height: '95vh'}}\r\n                                    onLoad={onInstanceLoad}\r\n                                    nodeTypes={nodeTypes}\r\n                                    nodesConnectable={false}\r\n                                    onElementClick={onElementClick}\r\n                                    minZoom={0.38}\r\n                                    //setInitTransform={TransformUpdater({x: 100, y: 100, z: 1})}\r\n                                    nodesDraggable={false}\r\n                                    onNodeMouseEnter={onNodeMouseEnter}\r\n                                    onNodeMouseLeave={onNodeMouseLeave}\r\n                                    selectNodesOnDrag={false}\r\n                                    // onNodeDragStop={onNodeDragStop}\r\n                                    elementsSelectable={false}\r\n                                >\r\n                                    <div style={{position: \"absolute\", zIndex: \"10\", top: \"30px\", right: \"30px\"}}>\r\n                                        <DropdownSearch searchNodeOptions={searchNodeOptions} searchElements={elements}/>\r\n                                    </div>\r\n                                </ReactFlow>\r\n                            </div>\r\n                            <Container style={{marginBottom: \"50px\"}}>\r\n                                <Segment raised>\r\n                                    {/* <p>Couldn't find a course up there? Add it here:</p> */}\r\n                                    <Header as=\"h5\">Couldn't find a course up there? Add it here:</Header>\r\n                                    <Dropdown\r\n                                        selection\r\n                                        multiple\r\n                                        search\r\n                                        fluid\r\n                                        options={getMoreCoursesForDropdown(dataJSON)}\r\n                                        onChange={(e, data) => setAdditionalCourses(data.value)}\r\n                                        placeholder=\"Addditional courses\"\r\n                                    />\r\n                                </Segment>\r\n                            </Container>\r\n                        </ReactFlowProvider>\r\n                    </Grid.Column>\r\n                    <Grid.Column width=\"4\">\r\n                        <Sidebar specialisations={specialisations} selectedNodes={selectedNodes}/>\r\n                    </Grid.Column>\r\n                </Grid>\r\n                {hoverDisplay}\r\n                {/* <button onClick={positionHelper(elements)}>GENERATE POSITION</button> */}\r\n                <div id=\"DegreePlanner\">\r\n                    <DegreePlanner\r\n                        key={Object.keys(selectedNodes).concat(additionalCourses).join(\"\")}\r\n                        program={program}\r\n                        specialisations={specialisations}\r\n                        selectedCourses={Object.keys(selectedNodes).concat(additionalCourses)}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BESengah;","import React, {useState} from 'react';\r\nimport ReactFlow, { isNode, isEdge, ReactFlowProvider } from 'react-flow-renderer';\r\n\r\nimport CustomNode1 from '../../components/customnode1.js';\r\nimport CustomNode2 from '../../components/customnode2.js';\r\nimport HeaderNode1 from '../../components/headernode1.js';\r\n\r\nimport HoverInfo from '../../components/hoverinfo.js';\r\nimport hoverPrerequisites from '../../components/hoverprerequisites.js';\r\nimport unhoverPrerequisites from '../../components/unhoverprerequisites.js';\r\n\r\nimport { Grid, Segment, Container, Dropdown, Header } from 'semantic-ui-react'\r\nimport Sidebar from \"../../components/sidebar.js\"\r\n// import pkg from 'semantic-ui-react/package.json'\r\n\r\nimport DegreePlanner from \"../../components/degreeplanner.js\"\r\nimport DropdownSearch from \"../../components/dropdownsearch.js\"\r\n\r\nimport positionHelper from '../../components/positionhelper.js';\r\nimport selectNode from '../../components/selectnode.js';\r\nimport unselectNode from '../../components/unselectnode.js';\r\nimport highlightElements from '../../components/highlightelements.js';\r\nimport getSelectable from '../../components/getselectable.js';\r\nimport checkPrerequisites from '../../components/checkprerequisites';\r\nimport exclusionSwap from '../../components/exclusionswap.js';\r\n\r\nimport unselectUnconnected from '../../components/unselectunconnected.js';\r\nimport coursesJSON from \"../../webscraper/courses.json\";\r\nimport dataJSON from \"./data.json\"\r\n\r\nconst specialisations = ['COMPA1', 'ACCTA2'];\r\nvar program = \"3778\";\r\nvar elementsData = dataJSON.slice();\r\n\r\n// This is for dropdown search\r\nvar searchNodeOptions = [];\r\nfor (const course of elementsData) {\r\n    if (isNode(course)) {\r\n        searchNodeOptions.push({\r\n            key: course.id,\r\n            value: course.id,\r\n            text: course.id\r\n        });\r\n    }\r\n}\r\n\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {};\r\nfor (const specialisation of specialisations) selectedNodes[specialisation] = 1;\r\n\r\nvar selectedEdges = {};\r\nvar selectableNodes = {};\r\nvar potentialEdges = {};\r\nvar hoverEdges = {};\r\n\r\n// Load up the chart with initial selectable nodes and edges\r\nfor (const node of nodesData) {\r\n    if (selectedNodes.hasOwnProperty(node.id)) {\r\n        if (node.data.unlocks === null) continue;\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n        }\r\n    } else if (checkPrerequisites(node, elementsData, selectedNodes)) {\r\n        selectableNodes[node.id] = 1;\r\n    }\r\n}\r\n\r\nvar exclusionGroups = require(\"./data_exclusion.json\");\r\nvar exclusionNodes = {};\r\nfor (const group of exclusionGroups) {\r\n    for (const exclusion of group) {\r\n        exclusionNodes[exclusion] = 1;\r\n    }\r\n}\r\n\r\nelementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\nconst nodeTypes = {\r\n    custom1: CustomNode1,\r\n    custom2: CustomNode2,\r\n    header1: HeaderNode1\r\n};\r\n\r\nconst layoutStyle = {overflowX: \"hidden\", overflowY: \"overlay\", width: \"100vw\", height: \"100vh\"};\r\n\r\nconst getMoreCoursesForDropdown = (dataJSON) => {\r\n\r\n    const moreOptions = [];\r\n    const nodesOnFlowchart = dataJSON.map(node => node.id);\r\n    // console.log(\"refresh\", nodesOnFlowchart);\r\n\r\n    for (const code in coursesJSON) {\r\n        if (nodesOnFlowchart.includes(code)) continue;\r\n\r\n        const name = coursesJSON[code].course_name;\r\n        moreOptions.push({\r\n            key: code,\r\n            value: code,\r\n            text: code + \" - \" + name\r\n        });\r\n    }\r\n\r\n    return moreOptions;\r\n}\r\n\r\nconst ComputerScienceCOMPA1ACCTA2 = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverText, setHoverText] = useState(false);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    const [layout, setLayout] = useState(layoutStyle);\r\n    const [additionalCourses, setAdditionalCourses] = useState([])\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n\r\n    const onInstanceLoad = (instance) => {\r\n        for (var group of exclusionGroups) {\r\n            const last = group.pop();\r\n    \r\n            for (var course of elementsData) {\r\n                if (last === course.id) {\r\n                    course.isHidden = true;\r\n                    // console.log(\"Hiding \" + course.id);\r\n                    // Get all the edges and hide them too\r\n                    for (var edge of elementsData) {\r\n                        if (isNode(edge)) continue;\r\n                        if (edge.source === last || edge.target === last) {\r\n                            // console.log(\"hiding \" + edge.id);\r\n                            edge.isHidden = true;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            group.push(last);\r\n        }\r\n        instance.setTransform({x: 470, y: 350, zoom: 0.38});\r\n    };\r\n\r\n    const selectUnselect = (element) => {\r\n        // NOTE: Might not need this?????\r\n        // EXPLANATION: Reason we dont need it is because we have to leave node\r\n        // anyways to hover another node. But maybe good practise to have just in case\r\n        // Unhover edges which lit up on nodeMouseEnter\r\n        unhoverPrerequisites(hoverEdges);\r\n\r\n        // 1. Select the node and fill in edges.\r\n        // - Deal with unselecting nodes\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"MAINSELECT\");\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"UNSELECTING\");\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n\r\n        console.log(\"==========SelectedNodes==========\");\r\n        console.log(selectedNodes);\r\n        console.log(\"==========SelectedEdges==========\");\r\n        console.log(selectedEdges);\r\n        console.log(\"==========SelectableNodes==========\");\r\n        console.log(selectableNodes);\r\n        console.log(\"==========PotentialEdges==========\");\r\n        console.log(potentialEdges);\r\n\r\n        // 2. Determine which nodes are now selectable\r\n        // - Determine which previously selectable nodes are now unselectable\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n\r\n        // Render graph accordingly\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const toggleExclusion = (element) => {\r\n        // TODO: ARE there courses which do not \r\n        // For all immediate edges of the element, swap\r\n        // with the exclusion course\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    // ==========ONCLICK==========\r\n    const onElementClick = (event, element) => {\r\n        // console.log(\"ONELEMENTCLICK\");\r\n        if (isEdge(element)) return; // Don't care about edges\r\n        if (specialisations.includes(element.id)) return; // Cannot click on main node\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return; // Cannot select non selectable nodes\r\n\r\n        // Determine double or single click for exclusion nodes\r\n        // This will prevent normal nodes from waiting the double click delay\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 250);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            // Not an exclusion node.\r\n            selectUnselect(element);\r\n        }\r\n    };\r\n    // ===========================\r\n\r\n    // ==========ONHOVER==========\r\n    const onNodeMouseEnter = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        // Display node information in top left\r\n        setHoverText(true);\r\n        setHoverNode(node);\r\n\r\n        // If the node is unselected, highlight prerequisite edges in purple\r\n        //if ((!selectedNodes.hasOwnProperty(node.id)) && (!selectableNodes.hasOwnProperty(node.id))) {\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        //}\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        setHoverText(false);\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    let hoverDisplay;\r\n    if (hoverText) {\r\n        hoverDisplay = <HoverInfo node={hoverNode}/>\r\n    }\r\n    // ===========================\r\n\r\n    // const onNodeDragStop = (event, node) => {\r\n    //     for (var e of elements) {\r\n    //         if (e.id === node.id) {\r\n    //             e.position.x = node.position.x;\r\n    //             e.position.y = node.position.y;\r\n    //             break;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    const disableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'hidden'});\r\n    }\r\n\r\n    const enableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'overlay'});\r\n    }\r\n\r\n    return (\r\n        <div style={{positon: \"relative\"}}>\r\n            <div style={layout}>\r\n                <Grid columns={2} divided>\r\n                    <Grid.Column width=\"12\">\r\n                        <ReactFlowProvider>\r\n                            <div onMouseEnter={disableBodyScroll} onMouseLeave={enableBodyScroll}>\r\n                                <ReactFlow\r\n                                    elements={elements}\r\n                                    style={{width: '100%', height: '95vh'}}\r\n                                    onLoad={onInstanceLoad}\r\n                                    nodeTypes={nodeTypes}\r\n                                    nodesConnectable={false}\r\n                                    onElementClick={onElementClick}\r\n                                    minZoom={0.38}\r\n                                    //setInitTransform={TransformUpdater({x: 100, y: 100, z: 1})}\r\n                                    nodesDraggable={false}\r\n                                    onNodeMouseEnter={onNodeMouseEnter}\r\n                                    onNodeMouseLeave={onNodeMouseLeave}\r\n                                    selectNodesOnDrag={false}\r\n                                    // onNodeDragStop={onNodeDragStop}\r\n                                    elementsSelectable={false}\r\n                                >\r\n                                    <div style={{position: \"absolute\", zIndex: \"10\", top: \"30px\", right: \"30px\"}}>\r\n                                        <DropdownSearch searchNodeOptions={searchNodeOptions} searchElements={elements}/>\r\n                                    </div>\r\n                                </ReactFlow>\r\n                            </div>\r\n                            <Container style={{marginBottom: \"50px\"}}>\r\n                                <Segment raised>\r\n                                    {/* <p>Couldn't find a course up there? Add it here:</p> */}\r\n                                    <Header as=\"h5\">Couldn't find a course up there? Add it here:</Header>\r\n                                    <Dropdown\r\n                                        selection\r\n                                        multiple\r\n                                        search\r\n                                        fluid\r\n                                        options={getMoreCoursesForDropdown(dataJSON)}\r\n                                        onChange={(e, data) => setAdditionalCourses(data.value)}\r\n                                        placeholder=\"Addditional courses\"\r\n                                    />\r\n                                </Segment>\r\n                            </Container>\r\n                        </ReactFlowProvider>\r\n                    </Grid.Column>\r\n                    <Grid.Column width=\"4\">\r\n                        <Sidebar specialisations={specialisations} selectedNodes={selectedNodes}/>\r\n                    </Grid.Column>\r\n                </Grid>\r\n                {hoverDisplay}\r\n                {/* <button onClick={positionHelper(elements)}>GENERATE POSITION</button> */}\r\n                <div id=\"DegreePlanner\">\r\n                    <DegreePlanner\r\n                        key={Object.keys(selectedNodes).concat(additionalCourses).join(\"\")}\r\n                        program={program}\r\n                        specialisations={specialisations}\r\n                        selectedCourses={Object.keys(selectedNodes).concat(additionalCourses)}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ComputerScienceCOMPA1ACCTA2;","import React, {useState} from 'react';\r\nimport ReactFlow, { isNode, isEdge, ReactFlowProvider } from 'react-flow-renderer';\r\n\r\nimport CustomNode1 from '../../components/customnode1.js';\r\nimport CustomNode2 from '../../components/customnode2.js';\r\nimport HeaderNode1 from '../../components/headernode1.js';\r\n\r\nimport HoverInfo from '../../components/hoverinfo.js';\r\nimport hoverPrerequisites from '../../components/hoverprerequisites.js';\r\nimport unhoverPrerequisites from '../../components/unhoverprerequisites.js';\r\n\r\nimport { Grid, Segment, Container, Dropdown, Header } from 'semantic-ui-react'\r\nimport Sidebar from \"../../components/sidebar.js\"\r\n// import pkg from 'semantic-ui-react/package.json'\r\n\r\nimport DegreePlanner from \"../../components/degreeplanner.js\"\r\nimport DropdownSearch from \"../../components/dropdownsearch.js\"\r\n\r\nimport positionHelper from '../../components/positionhelper.js';\r\nimport selectNode from '../../components/selectnode.js';\r\nimport unselectNode from '../../components/unselectnode.js';\r\nimport highlightElements from '../../components/highlightelements.js';\r\nimport getSelectable from '../../components/getselectable.js';\r\nimport checkPrerequisites from '../../components/checkprerequisites';\r\nimport exclusionSwap from '../../components/exclusionswap.js';\r\n\r\nimport unselectUnconnected from '../../components/unselectunconnected.js';\r\nimport coursesJSON from \"../../webscraper/courses.json\";\r\nimport dataJSON from \"./data.json\"\r\n\r\nconst specialisations = ['COMPA1', 'FINSA2'];\r\nvar program = \"3778\";\r\nvar elementsData = dataJSON.slice();\r\n\r\n// This is for dropdown search\r\nvar searchNodeOptions = [];\r\nfor (const course of elementsData) {\r\n    if (isNode(course)) {\r\n        searchNodeOptions.push({\r\n            key: course.id,\r\n            value: course.id,\r\n            text: course.id\r\n        });\r\n    }\r\n}\r\n\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {};\r\nfor (const specialisation of specialisations) selectedNodes[specialisation] = 1;\r\n\r\nvar selectedEdges = {};\r\nvar selectableNodes = {};\r\nvar potentialEdges = {};\r\nvar hoverEdges = {};\r\n\r\n// Load up the chart with initial selectable nodes and edges\r\nfor (const node of nodesData) {\r\n    if (selectedNodes.hasOwnProperty(node.id)) {\r\n        if (node.data.unlocks === null) continue;\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n        }\r\n    } else if (checkPrerequisites(node, elementsData, selectedNodes)) {\r\n        selectableNodes[node.id] = 1;\r\n    }\r\n}\r\n\r\nvar exclusionGroups = require(\"./data_exclusion.json\");\r\nvar exclusionNodes = {};\r\nfor (const group of exclusionGroups) {\r\n    for (const exclusion of group) {\r\n        exclusionNodes[exclusion] = 1;\r\n    }\r\n}\r\n\r\nelementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\nconst nodeTypes = {\r\n    custom1: CustomNode1,\r\n    custom2: CustomNode2,\r\n    header1: HeaderNode1\r\n};\r\n\r\nconst layoutStyle = {overflowX: \"hidden\", overflowY: \"overlay\", width: \"100vw\", height: \"100vh\"};\r\n\r\nconst getMoreCoursesForDropdown = (dataJSON) => {\r\n\r\n    const moreOptions = [];\r\n    const nodesOnFlowchart = dataJSON.map(node => node.id);\r\n    // console.log(\"refresh\", nodesOnFlowchart);\r\n\r\n    for (const code in coursesJSON) {\r\n        if (nodesOnFlowchart.includes(code)) continue;\r\n\r\n        const name = coursesJSON[code].course_name;\r\n        moreOptions.push({\r\n            key: code,\r\n            value: code,\r\n            text: code + \" - \" + name\r\n        });\r\n    }\r\n\r\n    return moreOptions;\r\n}\r\n\r\nconst ComputerScienceCOMPA1FINSA2 = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverText, setHoverText] = useState(false);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    const [layout, setLayout] = useState(layoutStyle);\r\n    const [additionalCourses, setAdditionalCourses] = useState([])\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n\r\n    const onInstanceLoad = (instance) => {\r\n        for (var group of exclusionGroups) {\r\n            const last = group.pop();\r\n    \r\n            for (var course of elementsData) {\r\n                if (last === course.id) {\r\n                    course.isHidden = true;\r\n                    // console.log(\"Hiding \" + course.id);\r\n                    // Get all the edges and hide them too\r\n                    for (var edge of elementsData) {\r\n                        if (isNode(edge)) continue;\r\n                        if (edge.source === last || edge.target === last) {\r\n                            // console.log(\"hiding \" + edge.id);\r\n                            edge.isHidden = true;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            group.push(last);\r\n        }\r\n        instance.setTransform({x: 470, y: 350, zoom: 0.38});\r\n    };\r\n\r\n    const selectUnselect = (element) => {\r\n        // NOTE: Might not need this?????\r\n        // EXPLANATION: Reason we dont need it is because we have to leave node\r\n        // anyways to hover another node. But maybe good practise to have just in case\r\n        // Unhover edges which lit up on nodeMouseEnter\r\n        unhoverPrerequisites(hoverEdges);\r\n\r\n        // 1. Select the node and fill in edges.\r\n        // - Deal with unselecting nodes\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"MAINSELECT\");\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"UNSELECTING\");\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n\r\n        console.log(\"==========SelectedNodes==========\");\r\n        console.log(selectedNodes);\r\n        console.log(\"==========SelectedEdges==========\");\r\n        console.log(selectedEdges);\r\n        console.log(\"==========SelectableNodes==========\");\r\n        console.log(selectableNodes);\r\n        console.log(\"==========PotentialEdges==========\");\r\n        console.log(potentialEdges);\r\n\r\n        // 2. Determine which nodes are now selectable\r\n        // - Determine which previously selectable nodes are now unselectable\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n\r\n        // Render graph accordingly\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const toggleExclusion = (element) => {\r\n        // TODO: ARE there courses which do not \r\n        // For all immediate edges of the element, swap\r\n        // with the exclusion course\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    // ==========ONCLICK==========\r\n    const onElementClick = (event, element) => {\r\n        // console.log(\"ONELEMENTCLICK\");\r\n        if (isEdge(element)) return; // Don't care about edges\r\n        if (specialisations.includes(element.id)) return; // Cannot click on main node\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return; // Cannot select non selectable nodes\r\n\r\n        // Determine double or single click for exclusion nodes\r\n        // This will prevent normal nodes from waiting the double click delay\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 250);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            // Not an exclusion node.\r\n            selectUnselect(element);\r\n        }\r\n    };\r\n    // ===========================\r\n\r\n    // ==========ONHOVER==========\r\n    const onNodeMouseEnter = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        // Display node information in top left\r\n        setHoverText(true);\r\n        setHoverNode(node);\r\n\r\n        // If the node is unselected, highlight prerequisite edges in purple\r\n        //if ((!selectedNodes.hasOwnProperty(node.id)) && (!selectableNodes.hasOwnProperty(node.id))) {\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        //}\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        setHoverText(false);\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    let hoverDisplay;\r\n    if (hoverText) {\r\n        hoverDisplay = <HoverInfo node={hoverNode}/>\r\n    }\r\n    // ===========================\r\n\r\n    // const onNodeDragStop = (event, node) => {\r\n    //     for (var e of elements) {\r\n    //         if (e.id === node.id) {\r\n    //             e.position.x = node.position.x;\r\n    //             e.position.y = node.position.y;\r\n    //             break;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    const disableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'hidden'});\r\n    }\r\n\r\n    const enableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'overlay'});\r\n    }\r\n\r\n    return (\r\n        <div style={{positon: \"relative\"}}>\r\n            <div style={layout}>\r\n                <Grid columns={2} divided>\r\n                    <Grid.Column width=\"12\">\r\n                        <ReactFlowProvider>\r\n                            <div onMouseEnter={disableBodyScroll} onMouseLeave={enableBodyScroll}>\r\n                                <ReactFlow\r\n                                    elements={elements}\r\n                                    style={{width: '100%', height: '95vh'}}\r\n                                    onLoad={onInstanceLoad}\r\n                                    nodeTypes={nodeTypes}\r\n                                    nodesConnectable={false}\r\n                                    onElementClick={onElementClick}\r\n                                    minZoom={0.38}\r\n                                    //setInitTransform={TransformUpdater({x: 100, y: 100, z: 1})}\r\n                                    nodesDraggable={true}\r\n                                    onNodeMouseEnter={onNodeMouseEnter}\r\n                                    onNodeMouseLeave={onNodeMouseLeave}\r\n                                    selectNodesOnDrag={false}\r\n                                    // onNodeDragStop={onNodeDragStop}\r\n                                    elementsSelectable={false}\r\n                                >\r\n                                    <div style={{position: \"absolute\", zIndex: \"10\", top: \"30px\", right: \"30px\"}}>\r\n                                        <DropdownSearch searchNodeOptions={searchNodeOptions} searchElements={elements}/>\r\n                                    </div>\r\n                                </ReactFlow>\r\n                            </div>\r\n                            <Container style={{marginBottom: \"50px\"}}>\r\n                                <Segment raised>\r\n                                    {/* <p>Couldn't find a course up there? Add it here:</p> */}\r\n                                    <Header as=\"h5\">Couldn't find a course up there? Add it here:</Header>\r\n                                    <Dropdown\r\n                                        selection\r\n                                        multiple\r\n                                        search\r\n                                        fluid\r\n                                        options={getMoreCoursesForDropdown(dataJSON)}\r\n                                        onChange={(e, data) => setAdditionalCourses(data.value)}\r\n                                        placeholder=\"Addditional courses\"\r\n                                    />\r\n                                </Segment>\r\n                            </Container>\r\n                        </ReactFlowProvider>\r\n                    </Grid.Column>\r\n                    <Grid.Column width=\"4\">\r\n                        <Sidebar specialisations={specialisations} selectedNodes={selectedNodes}/>\r\n                    </Grid.Column>\r\n                </Grid>\r\n                {hoverDisplay}\r\n                {/* <button onClick={positionHelper(elements)}>GENERATE POSITION</button> */}\r\n                <div id=\"DegreePlanner\">\r\n                    <DegreePlanner\r\n                        key={Object.keys(selectedNodes).concat(additionalCourses).join(\"\")}\r\n                        program={program}\r\n                        specialisations={specialisations}\r\n                        selectedCourses={Object.keys(selectedNodes).concat(additionalCourses)}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ComputerScienceCOMPA1FINSA2;","import React, {useState} from 'react';\r\nimport ReactFlow, { isNode, isEdge, ReactFlowProvider } from 'react-flow-renderer';\r\n\r\nimport CustomNode1 from '../../components/customnode1.js';\r\nimport CustomNode2 from '../../components/customnode2.js';\r\nimport HeaderNode1 from '../../components/headernode1.js';\r\n\r\nimport HoverInfo from '../../components/hoverinfo.js';\r\nimport hoverPrerequisites from '../../components/hoverprerequisites.js';\r\nimport unhoverPrerequisites from '../../components/unhoverprerequisites.js';\r\n\r\nimport { Grid, Segment, Container, Dropdown, Header } from 'semantic-ui-react'\r\nimport Sidebar from \"../../components/sidebar.js\"\r\n// import pkg from 'semantic-ui-react/package.json'\r\n\r\nimport DegreePlanner from \"../../components/degreeplanner.js\"\r\nimport DropdownSearch from \"../../components/dropdownsearch.js\"\r\n\r\nimport positionHelper from '../../components/positionhelper.js';\r\nimport selectNode from '../../components/selectnode.js';\r\nimport unselectNode from '../../components/unselectnode.js';\r\nimport highlightElements from '../../components/highlightelements.js';\r\nimport getSelectable from '../../components/getselectable.js';\r\nimport checkPrerequisites from '../../components/checkprerequisites';\r\nimport exclusionSwap from '../../components/exclusionswap.js';\r\n\r\nimport unselectUnconnected from '../../components/unselectunconnected.js';\r\nimport coursesJSON from \"../../webscraper/courses.json\";\r\nimport dataJSON from \"./data.json\"\r\n\r\n\r\nconst specialisations = ['COMPA1', 'MARKA2'];\r\nvar program = \"3778\";\r\nvar elementsData = dataJSON.slice();\r\n\r\n// This is for dropdown search\r\nvar searchNodeOptions = [];\r\nfor (const course of elementsData) {\r\n    if (isNode(course)) {\r\n        searchNodeOptions.push({\r\n            key: course.id,\r\n            value: course.id,\r\n            text: course.id\r\n        });\r\n    }\r\n}\r\n\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {\r\n    'COMPA1': 1,\r\n    'MARKA2': 1\r\n}\r\nvar selectedEdges = {};\r\nvar selectableNodes = {};\r\nvar potentialEdges = {};\r\nvar hoverEdges = {};\r\n\r\n// Load up the chart with initial selectable nodes and edges\r\nfor (const node of nodesData) {\r\n    if (selectedNodes.hasOwnProperty(node.id)) {\r\n        if (node.data.unlocks === null) continue;\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n        }\r\n    } else if (checkPrerequisites(node, elementsData, selectedNodes)) {\r\n        selectableNodes[node.id] = 1;\r\n    }\r\n}\r\n\r\nvar exclusionGroups = require(\"./data_exclusion.json\");\r\nvar exclusionNodes = {};\r\nfor (const group of exclusionGroups) {\r\n    for (const exclusion of group) {\r\n        exclusionNodes[exclusion] = 1;\r\n    }\r\n}\r\n\r\nelementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\nconst nodeTypes = {\r\n    custom1: CustomNode1,\r\n    custom2: CustomNode2,\r\n    header1: HeaderNode1\r\n};\r\n\r\nconst layoutStyle = {overflowX: \"hidden\", overflowY: \"overlay\", width: \"100vw\", height: \"100vh\"};\r\n\r\nconst getMoreCoursesForDropdown = (dataJSON) => {\r\n\r\n    const moreOptions = [];\r\n    const nodesOnFlowchart = dataJSON.map(node => node.id);\r\n    // console.log(\"refresh\", nodesOnFlowchart);\r\n\r\n    for (const code in coursesJSON) {\r\n        if (nodesOnFlowchart.includes(code)) continue;\r\n\r\n        const name = coursesJSON[code].course_name;\r\n        moreOptions.push({\r\n            key: code,\r\n            value: code,\r\n            text: code + \" - \" + name\r\n        });\r\n    }\r\n\r\n    return moreOptions;\r\n}\r\n\r\nconst ComputerScienceCOMPA1MARKA2 = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverText, setHoverText] = useState(false);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    const [layout, setLayout] = useState(layoutStyle);\r\n    const [additionalCourses, setAdditionalCourses] = useState([])\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n\r\n    const onInstanceLoad = (instance) => {\r\n        for (var group of exclusionGroups) {\r\n            const last = group.pop();\r\n    \r\n            for (var course of elementsData) {\r\n                if (last === course.id) {\r\n                    course.isHidden = true;\r\n                    // console.log(\"Hiding \" + course.id);\r\n                    // Get all the edges and hide them too\r\n                    for (var edge of elementsData) {\r\n                        if (isNode(edge)) continue;\r\n                        if (edge.source === last || edge.target === last) {\r\n                            // console.log(\"hiding \" + edge.id);\r\n                            edge.isHidden = true;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            group.push(last);\r\n        }\r\n        instance.setTransform({x: 470, y: 350, zoom: 0.38});\r\n    };\r\n\r\n    const selectUnselect = (element) => {\r\n        // NOTE: Might not need this?????\r\n        // EXPLANATION: Reason we dont need it is because we have to leave node\r\n        // anyways to hover another node. But maybe good practise to have just in case\r\n        // Unhover edges which lit up on nodeMouseEnter\r\n        unhoverPrerequisites(hoverEdges);\r\n\r\n        // 1. Select the node and fill in edges.\r\n        // - Deal with unselecting nodes\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"MAINSELECT\");\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"UNSELECTING\");\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n\r\n        console.log(\"==========SelectedNodes==========\");\r\n        console.log(selectedNodes);\r\n        console.log(\"==========SelectedEdges==========\");\r\n        console.log(selectedEdges);\r\n        console.log(\"==========SelectableNodes==========\");\r\n        console.log(selectableNodes);\r\n        console.log(\"==========PotentialEdges==========\");\r\n        console.log(potentialEdges);\r\n\r\n        // 2. Determine which nodes are now selectable\r\n        // - Determine which previously selectable nodes are now unselectable\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n\r\n        // Render graph accordingly\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const toggleExclusion = (element) => {\r\n        // TODO: ARE there courses which do not \r\n        // For all immediate edges of the element, swap\r\n        // with the exclusion course\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    // ==========ONCLICK==========\r\n    const onElementClick = (event, element) => {\r\n        // console.log(\"ONELEMENTCLICK\");\r\n        if (isEdge(element)) return; // Don't care about edges\r\n        if (element.id === 'COMPA1' || element.id === 'MARKA2') return; // Cannot click on main node\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return; // Cannot select non selectable nodes\r\n\r\n        // Determine double or single click for exclusion nodes\r\n        // This will prevent normal nodes from waiting the double click delay\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 250);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            // Not an exclusion node.\r\n            selectUnselect(element);\r\n        }\r\n    };\r\n    // ===========================\r\n\r\n    // ==========ONHOVER==========\r\n    const onNodeMouseEnter = (event, node) => {\r\n        if (node.id === 'COMPA1' || node.id === 'MARKA2') return;\r\n        // Display node information in top left\r\n        setHoverText(true);\r\n        setHoverNode(node);\r\n\r\n        // If the node is unselected, highlight prerequisite edges in purple\r\n        //if ((!selectedNodes.hasOwnProperty(node.id)) && (!selectableNodes.hasOwnProperty(node.id))) {\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        //}\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        if (node.id === 'COMPA1' || node.id === 'MARKA2') return;\r\n        setHoverText(false);\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    let hoverDisplay;\r\n    if (hoverText) {\r\n        hoverDisplay = <HoverInfo node={hoverNode}/>\r\n    }\r\n\r\n    // ===========================\r\n\r\n    // const onNodeDragStop = (event, node) => {\r\n    //     for (var e of elements) {\r\n    //         if (e.id === node.id) {\r\n    //             e.position.x = node.position.x;\r\n    //             e.position.y = node.position.y;\r\n    //             break;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    const disableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'hidden'});\r\n    }\r\n\r\n    const enableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'overlay'});\r\n    }\r\n\r\n    return (\r\n        <div style={{positon: \"relative\"}}>\r\n            <div style={layout}>\r\n                <Grid columns={2} divided>\r\n                    <Grid.Column width=\"12\">\r\n                        <ReactFlowProvider>\r\n                            <div onMouseEnter={disableBodyScroll} onMouseLeave={enableBodyScroll}>\r\n                                <ReactFlow\r\n                                    elements={elements}\r\n                                    style={{width: '100%', height: '95vh'}}\r\n                                    onLoad={onInstanceLoad}\r\n                                    nodeTypes={nodeTypes}\r\n                                    nodesConnectable={false}\r\n                                    onElementClick={onElementClick}\r\n                                    minZoom={0.38}\r\n                                    //setInitTransform={TransformUpdater({x: 100, y: 100, z: 1})}\r\n                                    nodesDraggable={false}\r\n                                    onNodeMouseEnter={onNodeMouseEnter}\r\n                                    onNodeMouseLeave={onNodeMouseLeave}\r\n                                    selectNodesOnDrag={false}\r\n                                    // onNodeDragStop={onNodeDragStop}\r\n                                    elementsSelectable={false}\r\n                                >\r\n                                    <div style={{position: \"absolute\", zIndex: \"10\", top: \"30px\", right: \"30px\"}}>\r\n                                        <DropdownSearch searchNodeOptions={searchNodeOptions} searchElements={elements}/>\r\n                                    </div>\r\n                                </ReactFlow>\r\n                            </div>\r\n                            <Container style={{marginBottom: \"50px\"}}>\r\n                                <Segment raised>\r\n                                    {/* <p>Couldn't find a course up there? Add it here:</p> */}\r\n                                    <Header as=\"h5\">Couldn't find a course up there? Add it here:</Header>\r\n                                    <Dropdown\r\n                                        selection\r\n                                        multiple\r\n                                        search\r\n                                        fluid\r\n                                        options={getMoreCoursesForDropdown(dataJSON)}\r\n                                        onChange={(e, data) => setAdditionalCourses(data.value)}\r\n                                        placeholder=\"Addditional courses\"\r\n                                    />\r\n                                </Segment>\r\n                            </Container>\r\n                        </ReactFlowProvider>\r\n                    </Grid.Column>\r\n                    <Grid.Column width=\"4\">\r\n                        <Sidebar specialisations={specialisations} selectedNodes={selectedNodes}/>\r\n                    </Grid.Column>\r\n                </Grid>\r\n                {hoverDisplay}\r\n                {/* <button onClick={positionHelper(elements)}>GENERATE POSITION</button> */}\r\n                <div id=\"DegreePlanner\">\r\n                    <DegreePlanner\r\n                        key={Object.keys(selectedNodes).concat(additionalCourses).join(\"\")}\r\n                        program={program}\r\n                        specialisations={specialisations}\r\n                        selectedCourses={Object.keys(selectedNodes).concat(additionalCourses)}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ComputerScienceCOMPA1MARKA2;","import React, {useState} from 'react';\r\nimport ReactFlow, { isNode, isEdge, ReactFlowProvider } from 'react-flow-renderer';\r\n\r\nimport CustomNode1 from '../../components/customnode1.js';\r\nimport CustomNode2 from '../../components/customnode2.js';\r\nimport HeaderNode1 from '../../components/headernode1.js';\r\n\r\nimport HoverInfo from '../../components/hoverinfo.js';\r\nimport hoverPrerequisites from '../../components/hoverprerequisites.js';\r\nimport unhoverPrerequisites from '../../components/unhoverprerequisites.js';\r\n\r\nimport { Grid, Segment, Container, Dropdown, Header } from 'semantic-ui-react'\r\nimport Sidebar from \"../../components/sidebar.js\"\r\n// import pkg from 'semantic-ui-react/package.json'\r\n\r\nimport DegreePlanner from \"../../components/degreeplanner.js\"\r\nimport DropdownSearch from \"../../components/dropdownsearch.js\"\r\n\r\nimport positionHelper from '../../components/positionhelper.js';\r\nimport selectNode from '../../components/selectnode.js';\r\nimport unselectNode from '../../components/unselectnode.js';\r\nimport highlightElements from '../../components/highlightelements.js';\r\nimport getSelectable from '../../components/getselectable.js';\r\nimport checkPrerequisites from '../../components/checkprerequisites';\r\nimport exclusionSwap from '../../components/exclusionswap.js';\r\n\r\nimport unselectUnconnected from '../../components/unselectunconnected.js';\r\nimport coursesJSON from \"../../webscraper/courses.json\";\r\nimport dataJSON from \"./data.json\"\r\n\r\nconst specialisations = ['COMPA1', 'INFSA2'];\r\nvar program = \"3778\";\r\nvar elementsData = dataJSON.slice();\r\n// This is for dropdown search\r\nvar searchNodeOptions = [];\r\nfor (const course of elementsData) {\r\n    if (isNode(course)) {\r\n        searchNodeOptions.push({\r\n            key: course.id,\r\n            value: course.id,\r\n            text: course.id\r\n        });\r\n    }\r\n}\r\n\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {};\r\nfor (const specialisation of specialisations) selectedNodes[specialisation] = 1;\r\nvar selectedEdges = {};\r\nvar selectableNodes = {};\r\nvar potentialEdges = {};\r\nvar hoverEdges = {};\r\n\r\n// Load up the chart with initial selectable nodes and edges\r\nfor (const node of nodesData) {\r\n    if (selectedNodes.hasOwnProperty(node.id)) {\r\n        if (node.data.unlocks === null) continue;\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n        }\r\n    } else if (checkPrerequisites(node, elementsData, selectedNodes)) {\r\n        selectableNodes[node.id] = 1;\r\n    }\r\n}\r\n\r\nvar exclusionGroups = require(\"./data_exclusion.json\");\r\nvar exclusionNodes = {};\r\nfor (const group of exclusionGroups) {\r\n    for (const exclusion of group) {\r\n        exclusionNodes[exclusion] = 1;\r\n    }\r\n}\r\n\r\nelementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\nconst nodeTypes = {\r\n    custom1: CustomNode1,\r\n    custom2: CustomNode2,\r\n    header1: HeaderNode1\r\n};\r\n\r\nconst layoutStyle = {overflowX: \"hidden\", overflowY: \"overlay\", width: \"100vw\", height: \"100vh\"};\r\n\r\nconst getMoreCoursesForDropdown = (dataJSON) => {\r\n\r\n    const moreOptions = [];\r\n    const nodesOnFlowchart = dataJSON.map(node => node.id);\r\n    // console.log(\"refresh\", nodesOnFlowchart);\r\n\r\n    for (const code in coursesJSON) {\r\n        if (nodesOnFlowchart.includes(code)) continue;\r\n\r\n        const name = coursesJSON[code].course_name;\r\n        moreOptions.push({\r\n            key: code,\r\n            value: code,\r\n            text: code + \" - \" + name\r\n        });\r\n    }\r\n\r\n    return moreOptions;\r\n}\r\n\r\nconst ComputerScienceCOMPA1INFSA2 = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverText, setHoverText] = useState(false);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    const [layout, setLayout] = useState(layoutStyle);\r\n    const [additionalCourses, setAdditionalCourses] = useState([])\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n\r\n    const onInstanceLoad = (instance) => {\r\n        for (var group of exclusionGroups) {\r\n            const last = group.pop();\r\n    \r\n            for (var course of elementsData) {\r\n                if (last === course.id) {\r\n                    course.isHidden = true;\r\n                    // console.log(\"Hiding \" + course.id);\r\n                    // Get all the edges and hide them too\r\n                    for (var edge of elementsData) {\r\n                        if (isNode(edge)) continue;\r\n                        if (edge.source === last || edge.target === last) {\r\n                            // console.log(\"hiding \" + edge.id);\r\n                            edge.isHidden = true;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            group.push(last);\r\n        }\r\n        instance.setTransform({x: 470, y: 350, zoom: 0.38});\r\n    };\r\n\r\n    const selectUnselect = (element) => {\r\n        // NOTE: Might not need this?????\r\n        // EXPLANATION: Reason we dont need it is because we have to leave node\r\n        // anyways to hover another node. But maybe good practise to have just in case\r\n        // Unhover edges which lit up on nodeMouseEnter\r\n        unhoverPrerequisites(hoverEdges);\r\n\r\n        // 1. Select the node and fill in edges.\r\n        // - Deal with unselecting nodes\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"MAINSELECT\");\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"UNSELECTING\");\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n\r\n        console.log(\"==========SelectedNodes==========\");\r\n        console.log(selectedNodes);\r\n        console.log(\"==========SelectedEdges==========\");\r\n        console.log(selectedEdges);\r\n        console.log(\"==========SelectableNodes==========\");\r\n        console.log(selectableNodes);\r\n        console.log(\"==========PotentialEdges==========\");\r\n        console.log(potentialEdges);\r\n\r\n        // 2. Determine which nodes are now selectable\r\n        // - Determine which previously selectable nodes are now unselectable\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n\r\n        // Render graph accordingly\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const toggleExclusion = (element) => {\r\n        // TODO: ARE there courses which do not \r\n        // For all immediate edges of the element, swap\r\n        // with the exclusion course\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    // ==========ONCLICK==========\r\n    const onElementClick = (event, element) => {\r\n        // console.log(\"ONELEMENTCLICK\");\r\n        if (isEdge(element)) return; // Don't care about edges\r\n        if (specialisations.includes(element.id)) return; // Cannot click on main node\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return; // Cannot select non selectable nodes\r\n\r\n        // Determine double or single click for exclusion nodes\r\n        // This will prevent normal nodes from waiting the double click delay\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 250);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            // Not an exclusion node.\r\n            selectUnselect(element);\r\n        }\r\n    };\r\n    // ===========================\r\n\r\n    // ==========ONHOVER==========\r\n    const onNodeMouseEnter = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        // Display node information in top left\r\n        setHoverText(true);\r\n        setHoverNode(node);\r\n\r\n        // If the node is unselected, highlight prerequisite edges in purple\r\n        //if ((!selectedNodes.hasOwnProperty(node.id)) && (!selectableNodes.hasOwnProperty(node.id))) {\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        //}\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        setHoverText(false);\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    let hoverDisplay;\r\n    if (hoverText) {\r\n        hoverDisplay = <HoverInfo node={hoverNode}/>\r\n    }\r\n\r\n    // ===========================\r\n\r\n    // const onNodeDragStop = (event, node) => {\r\n    //     for (var e of elements) {\r\n    //         if (e.id === node.id) {\r\n    //             e.position.x = node.position.x;\r\n    //             e.position.y = node.position.y;\r\n    //             break;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    const disableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'hidden'});\r\n    }\r\n\r\n    const enableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'overlay'});\r\n    }\r\n\r\n    return (\r\n        <div style={{positon: \"relative\"}}>\r\n            <div style={layout}>\r\n                <Grid columns={2} divided>\r\n                    <Grid.Column width=\"12\">\r\n                        <ReactFlowProvider>\r\n                            <div onMouseEnter={disableBodyScroll} onMouseLeave={enableBodyScroll}>\r\n                                <ReactFlow\r\n                                    elements={elements}\r\n                                    style={{width: '100%', height: '95vh'}}\r\n                                    onLoad={onInstanceLoad}\r\n                                    nodeTypes={nodeTypes}\r\n                                    nodesConnectable={false}\r\n                                    onElementClick={onElementClick}\r\n                                    minZoom={0.38}\r\n                                    //setInitTransform={TransformUpdater({x: 100, y: 100, z: 1})}\r\n                                    nodesDraggable={false}\r\n                                    onNodeMouseEnter={onNodeMouseEnter}\r\n                                    onNodeMouseLeave={onNodeMouseLeave}\r\n                                    selectNodesOnDrag={false}\r\n                                    // onNodeDragStop={onNodeDragStop}\r\n                                    elementsSelectable={false}\r\n                                >\r\n                                    <div style={{position: \"absolute\", zIndex: \"10\", top: \"30px\", right: \"30px\"}}>\r\n                                        <DropdownSearch searchNodeOptions={searchNodeOptions} searchElements={elements}/>\r\n                                    </div>\r\n                                </ReactFlow>\r\n                            </div>\r\n                            <Container style={{marginBottom: \"50px\"}}>\r\n                                <Segment raised>\r\n                                    {/* <p>Couldn't find a course up there? Add it here:</p> */}\r\n                                    <Header as=\"h5\">Couldn't find a course up there? Add it here:</Header>\r\n                                    <Dropdown\r\n                                        selection\r\n                                        multiple\r\n                                        search\r\n                                        fluid\r\n                                        options={getMoreCoursesForDropdown(dataJSON)}\r\n                                        onChange={(e, data) => setAdditionalCourses(data.value)}\r\n                                        placeholder=\"Addditional courses\"\r\n                                    />\r\n                                </Segment>\r\n                            </Container>\r\n                        </ReactFlowProvider>\r\n                    </Grid.Column>\r\n                    <Grid.Column width=\"4\">\r\n                        <Sidebar specialisations={specialisations} selectedNodes={selectedNodes}/>\r\n                    </Grid.Column>\r\n                </Grid>\r\n                {hoverDisplay}\r\n                <button onClick={positionHelper(elements)}>GENERATE POSITION</button>\r\n                <div id=\"DegreePlanner\">\r\n                    <DegreePlanner\r\n                        key={Object.keys(selectedNodes).concat(additionalCourses).join(\"\")}\r\n                        program={program}\r\n                        specialisations={specialisations}\r\n                        selectedCourses={Object.keys(selectedNodes).concat(additionalCourses)}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ComputerScienceCOMPA1INFSA2;","import React, {useState} from 'react';\r\nimport ReactFlow, { isNode, isEdge, ReactFlowProvider } from 'react-flow-renderer';\r\n\r\nimport CustomNode1 from '../../components/customnode1.js';\r\nimport CustomNode2 from '../../components/customnode2.js';\r\nimport HeaderNode1 from '../../components/headernode1.js';\r\n\r\nimport HoverInfo from '../../components/hoverinfo.js';\r\nimport hoverPrerequisites from '../../components/hoverprerequisites.js';\r\nimport unhoverPrerequisites from '../../components/unhoverprerequisites.js';\r\n\r\nimport { Grid, Segment, Container, Dropdown, Header } from 'semantic-ui-react'\r\nimport Sidebar from \"../../components/sidebar.js\"\r\n// import pkg from 'semantic-ui-react/package.json'\r\n\r\nimport DegreePlanner from \"../../components/degreeplanner.js\"\r\nimport DropdownSearch from \"../../components/dropdownsearch.js\"\r\n\r\nimport positionHelper from '../../components/positionhelper.js';\r\nimport selectNode from '../../components/selectnode.js';\r\nimport unselectNode from '../../components/unselectnode.js';\r\nimport highlightElements from '../../components/highlightelements.js';\r\nimport getSelectable from '../../components/getselectable.js';\r\nimport checkPrerequisites from '../../components/checkprerequisites';\r\nimport exclusionSwap from '../../components/exclusionswap.js';\r\n\r\nimport unselectUnconnected from '../../components/unselectunconnected.js';\r\nimport coursesJSON from \"../../webscraper/courses.json\";\r\nimport dataJSON from \"./data.json\"\r\n\r\n\r\nconst specialisations = ['COMPA1', 'PSYCM2'];\r\nvar program = \"3778\";\r\nvar elementsData = dataJSON.slice();\r\n\r\n// This is for dropdown search\r\nvar searchNodeOptions = [];\r\nfor (const course of elementsData) {\r\n    if (isNode(course)) {\r\n        searchNodeOptions.push({\r\n            key: course.id,\r\n            value: course.id,\r\n            text: course.id\r\n        });\r\n    }\r\n}\r\n\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {};\r\nfor (const specialisation of specialisations) selectedNodes[specialisation] = 1;\r\n\r\nvar selectedEdges = {};\r\nvar selectableNodes = {};\r\nvar potentialEdges = {};\r\nvar hoverEdges = {};\r\n\r\n// Load up the chart with initial selectable nodes and edges\r\nfor (const node of nodesData) {\r\n    if (selectedNodes.hasOwnProperty(node.id)) {\r\n        if (node.data.unlocks === null) continue;\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n        }\r\n    } else if (checkPrerequisites(node, elementsData, selectedNodes)) {\r\n        selectableNodes[node.id] = 1;\r\n    }\r\n}\r\n\r\nvar exclusionGroups = require(\"./data_exclusion.json\");\r\nvar exclusionNodes = {};\r\nfor (const group of exclusionGroups) {\r\n    for (const exclusion of group) {\r\n        exclusionNodes[exclusion] = 1;\r\n    }\r\n}\r\n\r\nelementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\nconst nodeTypes = {\r\n    custom1: CustomNode1,\r\n    custom2: CustomNode2,\r\n    header1: HeaderNode1\r\n};\r\n\r\nconst layoutStyle = {overflowX: \"hidden\", overflowY: \"overlay\", width: \"100vw\", height: \"100vh\"};\r\n\r\nconst getMoreCoursesForDropdown = (dataJSON) => {\r\n\r\n    const moreOptions = [];\r\n    const nodesOnFlowchart = dataJSON.map(node => node.id);\r\n    // console.log(\"refresh\", nodesOnFlowchart);\r\n\r\n    for (const code in coursesJSON) {\r\n        if (nodesOnFlowchart.includes(code)) continue;\r\n\r\n        const name = coursesJSON[code].course_name;\r\n        moreOptions.push({\r\n            key: code,\r\n            value: code,\r\n            text: code + \" - \" + name\r\n        });\r\n    }\r\n\r\n    return moreOptions;\r\n}\r\n\r\nconst ComputerScienceCOMPA1PSYCM2 = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverText, setHoverText] = useState(false);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    const [layout, setLayout] = useState(layoutStyle);\r\n    const [additionalCourses, setAdditionalCourses] = useState([])\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n\r\n    const onInstanceLoad = (instance) => {\r\n        for (var group of exclusionGroups) {\r\n            const last = group.pop();\r\n    \r\n            for (var course of elementsData) {\r\n                if (last === course.id) {\r\n                    course.isHidden = true;\r\n                    // console.log(\"Hiding \" + course.id);\r\n                    // Get all the edges and hide them too\r\n                    for (var edge of elementsData) {\r\n                        if (isNode(edge)) continue;\r\n                        if (edge.source === last || edge.target === last) {\r\n                            // console.log(\"hiding \" + edge.id);\r\n                            edge.isHidden = true;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            group.push(last);\r\n        }\r\n        instance.setTransform({x: 470, y: 350, zoom: 0.38});\r\n    };\r\n\r\n    const selectUnselect = (element) => {\r\n        // NOTE: Might not need this?????\r\n        // EXPLANATION: Reason we dont need it is because we have to leave node\r\n        // anyways to hover another node. But maybe good practise to have just in case\r\n        // Unhover edges which lit up on nodeMouseEnter\r\n        unhoverPrerequisites(hoverEdges);\r\n\r\n        // 1. Select the node and fill in edges.\r\n        // - Deal with unselecting nodes\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"MAINSELECT\");\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"UNSELECTING\");\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n\r\n        console.log(\"==========SelectedNodes==========\");\r\n        console.log(selectedNodes);\r\n        console.log(\"==========SelectedEdges==========\");\r\n        console.log(selectedEdges);\r\n        console.log(\"==========SelectableNodes==========\");\r\n        console.log(selectableNodes);\r\n        console.log(\"==========PotentialEdges==========\");\r\n        console.log(potentialEdges);\r\n\r\n        // 2. Determine which nodes are now selectable\r\n        // - Determine which previously selectable nodes are now unselectable\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n\r\n        // Render graph accordingly\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const toggleExclusion = (element) => {\r\n        // TODO: ARE there courses which do not \r\n        // For all immediate edges of the element, swap\r\n        // with the exclusion course\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    // ==========ONCLICK==========\r\n    const onElementClick = (event, element) => {\r\n        // console.log(\"ONELEMENTCLICK\");\r\n        if (isEdge(element)) return; // Don't care about edges\r\n        if (specialisations.includes(element.id)) return; // Cannot click on main node\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return; // Cannot select non selectable nodes\r\n\r\n        // Determine double or single click for exclusion nodes\r\n        // This will prevent normal nodes from waiting the double click delay\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 250);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            // Not an exclusion node.\r\n            selectUnselect(element);\r\n        }\r\n    };\r\n    // ===========================\r\n\r\n    // ==========ONHOVER==========\r\n    const onNodeMouseEnter = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        // Display node information in top left\r\n        setHoverText(true);\r\n        setHoverNode(node);\r\n\r\n        // If the node is unselected, highlight prerequisite edges in purple\r\n        //if ((!selectedNodes.hasOwnProperty(node.id)) && (!selectableNodes.hasOwnProperty(node.id))) {\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        //}\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        setHoverText(false);\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    let hoverDisplay;\r\n    if (hoverText) {\r\n        hoverDisplay = <HoverInfo node={hoverNode}/>\r\n    }\r\n\r\n    // ===========================\r\n\r\n    // const onNodeDragStop = (event, node) => {\r\n    //     for (var e of elements) {\r\n    //         if (e.id === node.id) {\r\n    //             e.position.x = node.position.x;\r\n    //             e.position.y = node.position.y;\r\n    //             break;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    const disableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'hidden'});\r\n    }\r\n\r\n    const enableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'overlay'});\r\n    }\r\n\r\n    return (\r\n        <div style={{positon: \"relative\"}}>\r\n            <div style={layout}>\r\n                <Grid columns={2} divided>\r\n                    <Grid.Column width=\"12\">\r\n                        <ReactFlowProvider>\r\n                            <div onMouseEnter={disableBodyScroll} onMouseLeave={enableBodyScroll}>\r\n                                <ReactFlow\r\n                                    elements={elements}\r\n                                    style={{width: '100%', height: '95vh'}}\r\n                                    onLoad={onInstanceLoad}\r\n                                    nodeTypes={nodeTypes}\r\n                                    nodesConnectable={false}\r\n                                    onElementClick={onElementClick}\r\n                                    minZoom={0.38}\r\n                                    //setInitTransform={TransformUpdater({x: 100, y: 100, z: 1})}\r\n                                    nodesDraggable={false}\r\n                                    onNodeMouseEnter={onNodeMouseEnter}\r\n                                    onNodeMouseLeave={onNodeMouseLeave}\r\n                                    selectNodesOnDrag={false}\r\n                                    // onNodeDragStop={onNodeDragStop}\r\n                                    elementsSelectable={false}\r\n                                >\r\n                                    <div style={{position: \"absolute\", zIndex: \"10\", top: \"30px\", right: \"30px\"}}>\r\n                                        <DropdownSearch searchNodeOptions={searchNodeOptions} searchElements={elements}/>\r\n                                    </div>\r\n                                </ReactFlow>\r\n                            </div>\r\n                            <Container style={{marginBottom: \"50px\"}}>\r\n                                <Segment raised>\r\n                                    {/* <p>Couldn't find a course up there? Add it here:</p> */}\r\n                                    <Header as=\"h5\">Couldn't find a course up there? Add it here:</Header>\r\n                                    <Dropdown\r\n                                        selection\r\n                                        multiple\r\n                                        search\r\n                                        fluid\r\n                                        options={getMoreCoursesForDropdown(dataJSON)}\r\n                                        onChange={(e, data) => setAdditionalCourses(data.value)}\r\n                                        placeholder=\"Addditional courses\"\r\n                                    />\r\n                                </Segment>\r\n                            </Container>\r\n                        </ReactFlowProvider>\r\n                    </Grid.Column>\r\n                    <Grid.Column width=\"4\">\r\n                        <Sidebar specialisations={specialisations} selectedNodes={selectedNodes}/>\r\n                    </Grid.Column>\r\n                </Grid>\r\n                {hoverDisplay}\r\n                {/* <button onClick={positionHelper(elements)}>GENERATE POSITION</button> */}\r\n                <div id=\"DegreePlanner\">\r\n                    <DegreePlanner\r\n                        key={Object.keys(selectedNodes).concat(additionalCourses).join(\"\")}\r\n                        program={program}\r\n                        specialisations={specialisations}\r\n                        selectedCourses={Object.keys(selectedNodes).concat(additionalCourses)}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ComputerScienceCOMPA1PSYCM2;","import React, {useState} from 'react';\r\n// import ReactFlow, {Background, Controls, getConnectedEdges, isNode, isEdge, useStoreState, useStoreActions, ReactFlowProvider, EdgeText} from 'react-flow-renderer';\r\nimport ReactFlow, { isNode, isEdge, ReactFlowProvider } from 'react-flow-renderer';\r\n\r\nimport CustomNode1 from '../../components/customnode1.js';\r\nimport CustomNode2 from '../../components/customnode2.js';\r\nimport HeaderNode1 from '../../components/headernode1.js';\r\n\r\nimport HoverInfo from '../../components/hoverinfo.js';\r\nimport hoverPrerequisites from '../../components/hoverprerequisites.js';\r\nimport unhoverPrerequisites from '../../components/unhoverprerequisites.js';\r\n\r\nimport { Grid, Container } from 'semantic-ui-react'\r\nimport Sidebar from \"../../components/sidebar.js\"\r\n// import pkg from 'semantic-ui-react/package.json'\r\n\r\nimport DegreePlanner from \"../../components/degreeplanner.js\"\r\nimport DropdownSearch from \"../../components/dropdownsearch.js\"\r\n\r\n// import positionHelper from '../../components/positionhelper.js';\r\nimport selectNode from '../../components/selectnode.js';\r\nimport unselectNode from '../../components/unselectnode.js';\r\nimport highlightElements from '../../components/highlightelements.js';\r\nimport getSelectable from '../../components/getselectable.js';\r\nimport checkPrerequisites from '../../components/checkprerequisites';\r\nimport exclusionSwap from '../../components/exclusionswap.js';\r\n// import getElement from '../../components/getelement.js';\r\nimport unselectUnconnected from '../../components/unselectunconnected.js';\r\n// import coursesJSON from \"../../webscraper/courses.json\";\r\nimport dataJSON from \"./data.json\"\r\n\r\n// import SearchPan from '../../components/searchpan.js';\r\n\r\n// import GetPan from '../../components/getpan.js';\r\n\r\nvar elementsData = dataJSON.slice()\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {\r\n    'SENGAH': 1,\r\n}\r\nvar selectedEdges = {};\r\nvar selectableNodes = {};\r\nvar potentialEdges = {};\r\nvar hoverEdges = {};\r\n\r\n// Load up the chart with initial selectable nodes and edges\r\nfor (const node of nodesData) {\r\n    if (selectedNodes.hasOwnProperty(node.id)) {\r\n        if (node.data.unlocks === null) continue;\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n        }\r\n    } else if (checkPrerequisites(node, elementsData, selectedNodes)) {\r\n        selectableNodes[node.id] = 1;\r\n    }\r\n}\r\n\r\nvar exclusionGroups = require(\"./data_exclusion.json\");\r\nvar exclusionNodes = {};\r\nfor (const group of exclusionGroups) {\r\n    for (const exclusion of group) {\r\n        exclusionNodes[exclusion] = 1;\r\n    }\r\n}\r\n\r\nelementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\nconst nodeTypes = {\r\n    custom1: CustomNode1,\r\n    custom2: CustomNode2,\r\n    header1: HeaderNode1\r\n};\r\n\r\nconst layoutStyle = {overflowX: \"hidden\", overflowY: \"overlay\", width: \"100vw\", height: \"100vh\"};\r\n\r\nconst Teaching = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverText, setHoverText] = useState(false);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    const [layout, setLayout] = useState(layoutStyle);\r\n    //const reactFlowInstance = useRef(null);\r\n    const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n\r\n    const onInstanceLoad = (instance) => {\r\n        for (var group of exclusionGroups) {\r\n            const last = group.pop();\r\n    \r\n            for (var course of elementsData) {\r\n                if (last === course.id) {\r\n                    course.isHidden = true;\r\n                    // console.log(\"Hiding \" + course.id);\r\n                    // Get all the edges and hide them too\r\n                    for (var edge of elementsData) {\r\n                        if (isNode(edge)) continue;\r\n                        if (edge.source === last || edge.target === last) {\r\n                            // console.log(\"hiding \" + edge.id);\r\n                            edge.isHidden = true;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            group.push(last);\r\n        }\r\n        setReactFlowInstance(instance);\r\n        instance.setTransform({x: 470, y: 350, zoom: 0.38});\r\n    };\r\n\r\n    const getCanvasSize = () => {\r\n        const size1 = reactFlowInstance.project({x: window.innerWidth * 0.75, y: window.innerHeight});\r\n        const size2 = reactFlowInstance.project({x: 0, y: 0});\r\n        return [(size1.x - size2.x) * 0.38, (size1.y - size2.y) * 0.38];\r\n    }\r\n\r\n\r\n    let dropSearch = null;\r\n    if (reactFlowInstance !== null) {\r\n        dropSearch = <DropdownSearch canvasSize={getCanvasSize()}/>\r\n    }\r\n\r\n    const selectUnselect = (element) => {\r\n        // NOTE: Might not need this?????\r\n        // EXPLANATION: Reason we dont need it is because we have to leave node\r\n        // anyways to hover another node. But maybe good practise to have just in case\r\n        // Unhover edges which lit up on nodeMouseEnter\r\n        unhoverPrerequisites(hoverEdges);\r\n\r\n        // 1. Select the node and fill in edges.\r\n        // - Deal with unselecting nodes\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            // console.log(\"MAINSELECT\");\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            // console.log(\"UNSELECTING\");\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n\r\n        // console.log(\"==========SelectedNodes==========\");\r\n        // console.log(selectedNodes);\r\n        // console.log(\"==========SelectedEdges==========\");\r\n        // console.log(selectedEdges);\r\n        // console.log(\"==========SelectableNodes==========\");\r\n        // console.log(selectableNodes);\r\n        // console.log(\"==========PotentialEdges==========\");\r\n        // console.log(potentialEdges);\r\n\r\n        // 2. Determine which nodes are now selectable\r\n        // - Determine which previously selectable nodes are now unselectable\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n\r\n        // Render graph accordingly\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const toggleExclusion = (element) => {\r\n        // TODO: ARE there courses which do not \r\n        // For all immediate edges of the element, swap\r\n        // with the exclusion course\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    // ==========ONCLICK==========\r\n    const onElementClick = (event, element) => {\r\n        // console.log(\"ONELEMENTCLICK\");\r\n        if (isEdge(element)) return; // Don't care about edges\r\n        if (element.id === 'SENGAH') return; // Cannot click on main node\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return; // Cannot select non selectable nodes\r\n\r\n        // Determine double or single click for exclusion nodes\r\n        // This will prevent normal nodes from waiting the double click delay\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 200);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            // Not an exclusion node.\r\n            selectUnselect(element);\r\n        }\r\n    };\r\n    // ===========================\r\n\r\n    // ==========ONHOVER==========\r\n    const onNodeMouseEnter = (event, node) => {\r\n        if (node.id === 'SENGAH') return;\r\n        // Display node information in top left\r\n        setHoverText(true);\r\n        setHoverNode(node);\r\n\r\n        // If the node is unselected, highlight prerequisite edges in purple\r\n        //if ((!selectedNodes.hasOwnProperty(node.id)) && (!selectableNodes.hasOwnProperty(node.id))) {\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        //}\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        if (node.id === 'SENGAH') return;\r\n        setHoverText(false);\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    let hoverDisplay;\r\n    if (hoverText) {\r\n        hoverDisplay = <HoverInfo node={hoverNode}/>\r\n    }\r\n\r\n    // ===========================\r\n\r\n    const onNodeDragStop = (event, node) => {\r\n        for (var e of elements) {\r\n            if (e.id === node.id) {\r\n                e.position.x = node.position.x;\r\n                e.position.y = node.position.y;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const disableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'hidden'});\r\n    }\r\n\r\n    const enableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'overlay'});\r\n    }\r\n\r\n    return (\r\n        <div style={{positon: \"relative\"}}>\r\n            <div style={layout}>\r\n                <Grid columns={2} divided>\r\n                    <Grid.Column width=\"12\">\r\n                        <ReactFlowProvider onMouseEnter={disableBodyScroll} onMouseLeave={enableBodyScroll}>\r\n                            <ReactFlow\r\n                                elements={elements}\r\n                                style={{width: '100%', height: '100vh'}}\r\n                                onLoad={onInstanceLoad}\r\n                                nodeTypes={nodeTypes}\r\n                                nodesConnectable={false}\r\n                                onElementClick={onElementClick}\r\n                                minZoom={0.38}\r\n                                //setInitTransform={TransformUpdater({x: 100, y: 100, z: 1})}\r\n                                //nodesDraggable={false}\r\n                                onNodeMouseEnter={onNodeMouseEnter}\r\n                                onNodeMouseLeave={onNodeMouseLeave}\r\n                                selectNodesOnDrag={false}\r\n                                onNodeDragStop={onNodeDragStop}\r\n                                elementsSelectable={false}\r\n                            >\r\n                                <div style={{position: \"absolute\", zIndex: \"10\", top: \"30px\", right: \"30px\"}}>\r\n                                    {dropSearch}\r\n                                </div>\r\n                            </ReactFlow>\r\n                        </ReactFlowProvider>\r\n                    </Grid.Column>\r\n                    <Grid.Column width=\"4\">\r\n                        <Sidebar selectedNodes={selectedNodes}/>\r\n                    </Grid.Column>\r\n                </Grid>\r\n                {hoverDisplay}\r\n                {/* <button onClick={positionHelper(elements)}>GENERATE POSITION</button> */}\r\n                <div id=\"DegreePlanner\">\r\n                    <DegreePlanner id=\"DegreePlanner\" key={Object.keys(selectedNodes).join(\"\")}selectedCourses={Object.keys(selectedNodes)} />\r\n                </div>\r\n                <Container style={{textAlign: \"center\", height: \"auto\", padding: \"20px\"}}>\r\n                    <p>Made by SRKO, 2020</p>\r\n                    <a href=\"https://github.com/Circles360/Circles360.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>\r\n                </Container>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Teaching;","import React, {Component} from 'react';\r\nimport { Route, HashRouter, Link } from 'react-router-dom';\r\n\r\nimport BESengah from './maps/EngineeringHonoursSoftware/map.js';\r\nimport ComputerScienceCOMPA1ACCTA2 from './maps/ComputerScienceCOMPA1ACCTA2/map.js';\r\nimport ComputerScienceCOMPA1FINSA2 from './maps/ComputerScienceCOMPA1FINSA2/map.js';\r\nimport ComputerScienceCOMPA1MARKA2 from './maps/ComputerScienceCOMPA1MARKA2/map.js';\r\nimport ComputerScienceCOMPA1INFSA2 from './maps/ComputerScienceCOMPA1INFSA2/map.js';\r\nimport ComputerScienceCOMPA1PSYCM2 from './maps/ComputerScienceCOMPA1PSYCM2/map.js';\r\n\r\nimport Teaching from './maps/EngineeringHonoursSoftware/teaching.js';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <HashRouter basename='/'>\r\n        <div>\r\n          <Route path=\"/3707/SENGAH\" component={BESengah} />\r\n          <Route path=\"/3778/COMPA1/ACCTA2\" component={ComputerScienceCOMPA1ACCTA2} />\r\n          <Route path=\"/3778/COMPA1/FINSA2\" component={ComputerScienceCOMPA1FINSA2} />\r\n          <Route path=\"/3778/COMPA1/MARKA2\" component={ComputerScienceCOMPA1MARKA2} />\r\n          <Route path=\"/3778/COMPA1/INFSA2\" component={ComputerScienceCOMPA1INFSA2} />\r\n          <Route path=\"/3778/COMPA1/PSYCM2\" component={ComputerScienceCOMPA1PSYCM2} />\r\n          <Route path=\"/James\" component={Teaching}/>\r\n        </div>\r\n      </HashRouter>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType !== null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}