{"version":3,"sources":["components/getelement.js","assets/refresh.svg","components/checkprerequisites.js","components/degreeplanner.js","components/degreeplanner-course.jsx","components/degreeplanner-term.jsx","components/customnode1.js","components/customnode2.js","components/headernode1.js","components/hoverinfo.js","components/unhoverprerequisites.js","components/dropdownDegrees.js","components/sidebar-modal.js","components/tutorial-modal.js","components/sidebar.js","components/dropdownsearch.js","components/unselectnode.js","components/highlightelements.js","maps/EngineeringHonoursSoftware/map.js","components/selectnode.js","components/unselectunconnected.js","components/getselectable.js","components/exclusionswap.js","components/hoverprerequisites.js","components/teaching.js","App.js","serviceWorker.js","index.js"],"names":["getElement","id","elementsData","e","module","exports","checkPrerequisites","node","elements","selectedNodes","data","conditions","units_required","level_for_units_required","checkPrerequisiteUnitsLevel","prerequisites","prereqs_executable","condition","replace","match","hasOwnProperty","eval","checkPrerequisiteUnits","total","target","Object","keys","selected","units","core_year","courseType","substr","concat","selectedList","takenNode","REGEX_COURSE_CODE","mapTermIds","term","mapTermFull","updateCourses","coursesJSON","dataJSON","forEach","course","terms","rawCoursesJSON","getCourses","selectedCourses","courses","c","termsAvailable","map","content","course_name","console","log","generateTerms","yearId","TSKey","T1Key","T2Key","T3Key","title","courseIds","addPriority","priority","courseId","unlocksCourse","prereq","unlocks","push","prioritiseCourses","level","Number","filter","t","length","prioritised","values","sort","a","b","checkPrereqsMet","termPlan","termId","prereqsExecutable","coursesTaken","addCourseToPlan","courseUnits","includes","substring","populateTerms","maxYears","prioritisedCourses","year","makePlan","plan","generatePlanScaffold","years","toString","DegreePlanner","state","props","onDragEnd","result","destination","source","draggableId","droppableId","index","sourceYear","start","destinationYear","finish","startCourseIds","Array","from","splice","newStart","finishCourseIds","newFinish","newState","setState","newCourseIds","newTerm","getConsiderationMessages","considerationMessages","getCourseLink","rel","href","Item","replaceAll","join","style","marginBottom","positive","Header","List","error","as","textAlign","marginTop","this","onDragStart","key","columns","termOrder","Column","allCourses","React","Component","Course","Container","provided","ref","innerRef","draggableProps","dragHandleProps","Label","margin","placeholder","checkTermAvailability","checkValidCourses","Term","snapshot","Segment","backgroundColor","isDraggingOver","draggingOverWith","transition","reduce","colour","color","floating","showUnits","droppableProps","minHeight","zIndex","pointerEvents","opacity","top","memo","type","position","course_code","iconSize","width","bottom","src","Refresh","alt","degree_name","padding","left","maxWidth","HoverInfo","raised","raw","exclusions","unhoverPrerequisites","hoverEdges","edge","courseOptions","programOptions","code","programsJSON","degrees_involved","majors","honours","name","replacement","spec","specialisationsJSON","getMajors","minors","getMinors","DropdownDegrees","majorOptions","minorOptions","disabledPrimary","disabledSecondary","hiddenPrimary","hiddenSecondary","valProgram","valPrimary","valSecondary","phPrimary","phSecondary","chooseProgram","program","value","choosePrimary","chooseSecondary","minor","clickDone","Grid","centered","Row","Dropdown","selection","search","onChange","options","enabled","disabled","visibility","Button","onClick","exampleReducer","action","open","dimmer","Error","SideBarModal","useReducer","undefined","dispatch","size","Modal","closeIcon","onClose","TutorialModal","getSelectedCourses","specialisationCode","levels","structure","coreCourses","levelName","courseList","rawList","allCourseIds","getCoursesInLevel","flat","minUnits","unitsTaken","horizontal","alignSelf","display","flexGrow","Sidebar","paddingLeft","paddingRight","Message","info","divided","Divider","selector","animated","Content","visible","hidden","Icon","nodeOptions","elementsList","text","DropdownSearch","useState","setSearch","setInitTransform","useStoreActions","actions","x","y","element","k","prop","onKeyPress","event","icon","marginLeft","unselectNode","selectedEdges","selectableNodes","potentialEdges","unselectQueue","current","shift","unlockCourse","selectedEdgeAnimated","stroke","strokeWidth","selectedEdgeStatic","hoverEdge","potentialHoverEdge","potentialEdge","unselectedEdge","highlightElements","isEdge","background","backgroundColour","textColour","require","nodesData","isNode","edgesData","exclusionGroups","exclusionNodes","group","exclusion","onLoad","reactFlowInstance","last","pop","isHidden","setTransform","zoom","nodeTypes","custom1","CustomNode1","custom2","CustomNode2","header1","HeaderNode1","layoutStyle","overflowX","overflowY","height","BESengah","hoverDisplay","setElements","hoverText","setHoverText","hoverNode","setHoverNode","clickCount","singleClickTimer","layout","setLayout","selectUnselect","selectNode","selectedNode","trueSelectedNodes","selectedUnlockQueue","curUnlock","selectedUnitsNode","checkPrequisiteUnits","selectable","selectableNode","unselectUnconnected","analyseNodesKeys","getSelectable","toggleExclusion","edges","newElements","prevCourse","curCourse","curNode","edgesList","getConnectedEdges","newEdgesList","edgesIds","newEdgesIds","newEdge","checkedEdges","hideEdge","newEdgeId","split","sourceNode","targetNode","exclusionSwap","positon","onMouseEnter","onMouseLeave","right","nodesConnectable","onElementClick","setTimeout","clearTimeout","minZoom","onNodeMouseEnter","prereqQueue","hoverPrerequisites","onNodeMouseLeave","selectNodesOnDrag","onNodeDragStop","elementsSelectable","initialElements","label","fitView","Teaching","els","nodesDraggable","nodeColor","n","Math","random","window","innerWidth","innerHeight","App","basename","path","component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"8GAWeA,IAVI,SAACC,EAAIC,GAAiB,oBAEvBA,GAFuB,IAErC,2BAA4B,CAAC,IAApBC,EAAmB,QACxB,GAAIA,EAAEF,KAAOA,EACT,OAAOE,GAJsB,8BAOrC,OAAO,O,oBCRXC,EAAOC,QAAU,IAA0B,qC,yECA3C,+JAOe,SAASC,mBAAmBC,KAAMC,SAAUC,eACvD,GAA4C,OAAxCF,KAAKG,KAAKC,WAAWC,gBAA6E,OAAlDL,KAAKG,KAAKC,WAAWE,yBAErE,OAAOC,4BAA4BP,KAAMC,SAAUC,eAGvD,GAA2C,OAAvCF,KAAKG,KAAKC,WAAWI,eAAsE,OAA5CR,KAAKG,KAAKC,WAAWK,mBAA6B,CAIjG,IAAIC,UAAYV,KAAKG,KAAKC,WAAWK,mBAWrC,OATAC,UAAYA,UAAUC,QAAQ,uBAAuB,SAASC,GAE1D,OAAIV,cAAcW,eAAeD,GACtB,EAEA,OAIXE,KAAKJ,WAMb,OAAOK,uBAAuBf,KAAMC,SAAUC,eAa3C,SAASa,uBAAuBf,EAAMC,EAAUC,GACnD,GAA4C,OAAxCF,EAAKG,KAAKC,WAAWC,eAAyB,CAC9C,GAAsD,OAAlDL,EAAKG,KAAKC,WAAWE,yBAAmC,CAMxD,IAJA,IAAIU,EAAQ,EACNC,EAASjB,EAAKG,KAAKC,WAAWC,eAGpC,MADqBa,OAAOC,KAAKjB,GACjC,eAAqC,CAAhC,IAAMkB,EAAQ,KACf,GAAIA,IAAapB,EAAKN,GAEtBsB,GADkBvB,sDAAW2B,EAAUnB,GACpBE,KAAKkB,MAG5B,OAAIL,GAASC,EASb,OAAOV,4BAA4BP,EAAMC,EAAUC,GAEpD,OAAIF,EAAKG,KAAKC,WAAWkB,WAErB,EAOf,SAASf,4BAA4BP,KAAMC,SAAUC,eAEjD,IAAIqB,WAAavB,KAAKN,GAAG8B,OAAO,EAAG,GACnCD,WAAaA,WAAWE,OAAOzB,KAAKG,KAAKC,WAAWE,0BAKpD,IAHA,IAAIU,MAAQ,EACNC,OAASjB,KAAKG,KAAKC,WAAWC,eAC9BqB,aAAeR,OAAOC,KAAKjB,eACjC,qBAAuBwB,aAAvB,gCAAqC,CAAhC,IAAMN,SAAQ,oBACf,GAAIA,SAASI,OAAO,EAAG,KAAOD,YAC1BH,WAAapB,KAAKN,GAAtB,CACA,IAAMiC,UAAYlC,sDAAW2B,SAAUnB,UACvCe,OAASW,UAAUxB,KAAKkB,OAG5B,GAAIL,OAASC,OAAQ,CAEjB,GAA2C,OAAvCjB,KAAKG,KAAKC,WAAWI,eAAsE,OAA5CR,KAAKG,KAAKC,WAAWK,mBAA6B,CAGjG,IAAIC,UAAYV,KAAKG,KAAKC,WAAWK,mBASrC,OARAC,UAAYA,UAAUC,QAAQ,uBAAuB,SAASC,GAC1D,OAAIV,cAAcW,eAAeD,GACtB,EAEA,OAIXE,KAAKJ,WAMT,OAAO,EAGX,OAAO,I,w2EC9GTkB,kBAAoB,iBAEpBC,WAAa,SAACC,GAChB,MAAa,gBAATA,EAA+B,KACtB,WAATA,EAA0B,KACjB,WAATA,EAA0B,KACjB,WAATA,EAA0B,UAA9B,GAIEC,YAAc,SAACD,GACjB,MAAa,OAATA,EAAsB,cACb,OAATA,EAAsB,SACb,OAATA,EAAsB,SACb,OAATA,EAAsB,cAA1B,GAGEE,cAAgB,SAACC,EAAaC,GAMhC,OALAA,EAASC,SAAQ,SAAAC,GACPA,EAAO1C,MAAMuC,IACnBA,EAAYG,EAAO1C,IAAIU,WAAWK,mBAAqB2B,EAAOjC,KAAKC,WAAWK,mBAC9EwB,EAAYG,EAAO1C,IAAI2C,MAAQD,EAAOjC,KAAKkC,UAExCJ,GAGLA,YAAcD,cAAcM,uDAAgBJ,0EAE5CK,WAAa,SAACC,GAChB,IAAMC,EAAU,GAkBhB,OAhBAD,EAAgBL,SAAQ,SAAAO,GACpB,GAAMA,KAAKT,YACX,GAAMA,YAAYS,GAAGL,MAArB,CAIA,IAAMM,EAAiBV,YAAYS,GAAGL,MAAMO,KAAI,SAAAd,GAAI,OAAID,WAAWC,MAEnEW,EAAQC,GAAK,CACThD,GAAIgD,EACJG,QAAQ,GAAD,OAAKH,EAAL,cAAYT,YAAYS,GAAGI,aAClCH,eAAgBA,EAChBtB,MAAOY,YAAYS,GAAGrB,YATtB0B,QAAQC,IAAI,uBAAwBN,MAarCD,GAGLQ,cAAgB,SAACC,GACnB,IAAMb,EAAQ,GAIRc,EAAK,UAAMD,EAAN,MACLE,EAAK,UAAMF,EAAN,MACLG,EAAK,UAAMH,EAAN,MACLI,EAAK,UAAMJ,EAAN,MA2BX,OA1BAb,EAAK,UAAgB,CAACc,EAAOC,EAAOC,EAAOC,GAE3CjB,EAAMc,GAAS,CACXzD,GAAIyD,EACJI,MAAM,QAAD,OAAUL,EAAV,kBACLM,UAAW,IAGfnB,EAAMe,GAAS,CACX1D,GAAI0D,EACJG,MAAM,QAAD,OAAUL,EAAV,eACLM,UAAW,IAGfnB,EAAMgB,GAAS,CACX3D,GAAI2D,EACJE,MAAM,QAAD,OAAUL,EAAV,eACLM,UAAW,IAGfnB,EAAMiB,GAAS,CACX5D,GAAI4D,EACJC,MAAM,QAAD,OAAUL,EAAV,iBACLM,UAAW,IAGRnB,GAGLoB,YAAc,SAAdA,EAAeC,EAAUC,EAAUC,GACrC,KAAMD,KAAY1B,aAAc,OAAOyB,EACvC,IAAKzB,YAAY0B,GAAUvD,WAAWI,cAAe,OAAOkD,EAFL,qKAIlCzB,YAAY0B,GAAUvD,WAAWI,eAJC,IAIvD,2BAAqE,CAAC,IAA3DqD,EAA0D,QAC3DA,KAAUH,IACZC,IAAaE,IAEjBH,EAASG,GAAQC,QAAQC,KAAKH,GAC9BF,EAAWD,EAAYC,EAAUG,EAAQD,MATU,8BAYvD,OAAOF,GAGLM,kBAAoB,SAACxB,GAEvB,IAF2C,EAEvCkB,EAAW,GAF4B,+JAGpBlB,GAHoB,IAG3C,2BAAwC,CAAC,IAA9BmB,EAA6B,QAC9BA,KAAY1B,cAElByB,EAASC,GAAY,CACjBA,SAAUA,EACVM,MAAOC,OAAOP,EAAS,IACvBG,QAAS,GACTnB,eAAgBV,YAAY0B,GAAUtB,MAAQJ,YAAY0B,GAAUtB,MAAM8B,QAAO,SAAAC,GAAC,MAAU,gBAANA,KAAqBC,OAAS,KAVjF,mMAepB7B,GAfoB,IAe3C,2BAAwC,CAAC,IAA9BmB,EAA6B,QACpCD,EAAWD,YAAYC,EAAUC,EAAUA,IAhBJ,8BAoB3C,IAAMW,EAAcpD,OAAOqD,OAAOb,GAiBlC,OAfAY,EAAYE,MAAK,SAACC,EAAGC,GAMjB,OAAID,EAAER,QAAUS,EAAET,MACVQ,EAAEX,QAAQO,SAAWK,EAAEZ,QAAQO,OACxBI,EAAE9B,eAAiB+B,EAAE/B,eAEzB+B,EAAEZ,QAAQO,OAASI,EAAEX,QAAQO,OAEjCI,EAAER,MAAQS,EAAET,SAGhBK,GAGLK,gBAAkB,SAAlBA,gBAAmBC,SAAUC,OAAQlB,UAEvC,IAAImB,kBAAoB7C,YAAY0B,UAAUvD,WAAWK,mBACzD,IAAKqE,kBAAmB,OAAO,EAG/B,IAAMC,aAAe,GACrB,IAAK,IAAMX,KAAKQ,SAAU,CACtB,GAAIR,IAAMS,OAAQ,MAClB9B,QAAQC,IAAI,WAAY4B,SAAUR,GAClCW,aAAahB,KAAb,MAAAgB,aAAY,qJAASH,SAASR,GAAGZ,YAIrC,2BAAqBuB,aAArB,6BAAmC,CAA9B,IAAM3C,OAAM,kBACb0C,kBAAoBA,kBAAkBnE,QAAQyB,OAAQ,KAK1D,OAHA0C,kBAAoBA,kBAAkBnE,QAAQiB,kBAAmB,KAG1Dd,KAAKgE,oBAGVE,gBAAkB,SAACJ,EAAUjB,GAG/B,IAAK,IAAMkB,KAAUD,EACjB,KAAIA,EAASC,GAAQxD,OAHV,IAGX,CAEA,IAAM4D,EAAchD,YAAY0B,GAAUtC,MAC1C,KAAIuD,EAASC,GAAQxD,MAAQ4D,EANlB,IAQX,GAAMhD,YAAY0B,GAAUtB,OAM5B,GADuBJ,YAAY0B,GAAUtB,MAAMO,KAAI,SAAAd,GAAI,OAAID,WAAWC,MACrDoD,SAASL,EAAOM,UAAU,EAAG,KAG7CR,gBAAgBC,EAAUC,EAAQlB,GAKvC,OAFAiB,EAASC,GAAQxD,OAASY,YAAY0B,GAAUtC,MAChDuD,EAASC,GAAQrB,UAAUO,KAAKJ,GACzBiB,OAbH7B,QAAQC,IAAI,uBAAwBW,GAgB5CZ,QAAQC,IAAI,cAAeW,IAGzByB,cAAgB,SAACC,EAAUC,GAI7B,IAHA,IAEMV,EAAW,GACRW,EAAO,EAAGA,GAAQF,EAAUE,IACjC,IAAK,IAAIzD,EAAO,EAAGA,GAJN,EAIwBA,IAAQ,CAEzC8C,EADY,UAAMW,EAAN,YAAczD,IACP,CACfT,MAAO,EACPmC,UAAW,IAT6B,qKAe/B8B,GAf+B,IAepD,2BAAyC,CAAC,IAA/BlD,EAA8B,QACrC4C,gBAAgBJ,EAAUxC,EAAOuB,WAhBe,8BAmBpD,OAAOiB,GAGLY,SAAW,SAACC,EAAMJ,EAAU7C,GAC9B,IAAM8C,EAAqBtB,kBAAkBxB,GAEvCoC,EAAWQ,cAAcC,EAAUC,GAEzC,IAAK,IAAMT,KAAUD,EAAU,CAE3Ba,EADaZ,EAAO,IACTA,GAAQrB,UAAYoB,EAASC,GAAQrB,UAGpD,OAAOiC,GAGLC,qBAAuB,SAACC,EAAOnD,GAGjC,IAFA,IAAIiD,EAAO,GAEFF,EAAO,EAAGA,GAAQI,EAAOJ,IAC9BE,EAAKF,EAAKK,YAAc3C,cAAcsC,GAK1C,OAFAE,EAAOD,SAASC,EAAME,EAAOnD,IAK3BqD,c,qlBACFC,MAAQ,CACJrD,QAASF,WAAW,EAAKwD,MAAMvD,iBAC/BA,gBAAiB,EAAKuD,MAAMvD,gBAC5BiD,KAAMC,qBAAqB,EAAG,EAAKK,MAAMvD,kB,EAsB7CwD,UAAY,SAAAC,GAAW,IACXC,EAAqCD,EAArCC,YAAaC,EAAwBF,EAAxBE,OAAQC,EAAgBH,EAAhBG,YAG7B,GAAKF,IAGDA,EAAYG,cAAgBF,EAAOE,aAAeH,EAAYI,QAAUH,EAAOG,OAAnF,CAEA,IAAMC,EAAaJ,EAAOE,YAAY,GAChCG,EAAQ,EAAKV,MAAML,KAAKc,GAAYJ,EAAOE,aAC3CI,EAAkBP,EAAYG,YAAY,GAC1CK,EAAS,EAAKZ,MAAML,KAAKgB,GAAiBP,EAAYG,aAE5D,GAAIG,IAAUE,EAAd,CAyBA,IAAMC,EAAiBC,MAAMC,KAAKL,EAAMhD,WACxCmD,EAAeG,OAAOX,EAAOG,MAAO,GAEpC,IAAMS,EAAQ,qSACPP,GADO,IAEVhD,UAAWmD,IAGTK,EAAkBJ,MAAMC,KAAKH,EAAOlD,WAC1CwD,EAAgBF,OAAOZ,EAAYI,MAAO,EAAGF,GAE7C,IAAMa,EAAS,qSACRP,GADQ,IAEXlD,UAAWwD,IAGTE,EAAW,EAAKpB,MACtBoB,EAASzB,KAAKc,GAAYQ,EAASrH,IAAMqH,EACzCG,EAASzB,KAAKgB,GAAiBQ,EAAUvH,IAAMuH,EAE/C,EAAKE,SAASD,OA7Cd,CACI,IAAME,EAAeR,MAAMC,KAAKL,EAAMhD,WACtC4D,EAAaN,OAAOX,EAAOG,MAAO,GAClCc,EAAaN,OAAOZ,EAAYI,MAAO,EAAGF,GAC1C,IAAMiB,EAAO,qSACNb,GADM,IAEThD,UAAW4D,IAGTF,EAAQ,qSACP,EAAKpB,OADE,IAEVL,KAAK,qSACE,EAAKK,MAAML,MADd,wJAECc,EAFD,qSAGO,EAAKT,MAAML,KAAKc,IAHvB,wJAIKc,EAAQ3H,GAAK2H,QAK1B,EAAKF,SAASD,M,EA4BtBI,yBAA2B,SAACxB,GACxB,IAAML,EAAOK,EAAML,KACbhD,EAAUqD,EAAMrD,QAChB8E,EAAwB,GAGxB3C,EAAW,GACjB,IAAK,IAAMW,KAAQE,EACf,IAAK,IAAM3D,KAAQ2D,EAAKF,GACP,cAATzD,IACJ8C,EAAS9C,GAAQ2D,EAAKF,GAAMzD,IAIpC,IAAM0F,EAAgB,SAAC7D,GAEnB,OAAO,gEAAG1C,OAAO,SAASwG,IAAI,sBAAsBC,KAAI,iEADhC,KACgC,YAA+E/D,IAAaA,IAGxJ,IAAK,IAAM4B,KAAQE,EACf,IAAK,IAAM3D,KAAQ2D,EAAKF,GACpB,GAAa,cAATzD,EAAJ,CAD2B,qKAEJ2D,EAAKF,GAAMzD,GAAM0B,WAFb,IAE3B,2BAAmD,CAAC,IAAzCG,EAAwC,QAC1CgB,gBAAgBC,EAAU9C,EAAM6B,IACjC4D,EAAsBxD,KAClB,2DAAC,iDAAQ4D,KAAT,KACKH,EAAc7D,GADnB,qCACgE1B,YAAY0B,GAAUvD,WAAWK,mBACxFmH,WAAW,UAAW,MACtBA,WAAW,UAAW,MACtBA,WAAW,UAAW,MACtBA,WAAW,UAAW,MACtBA,WAAW,KAAM,OACjBA,WAAW,KAAM,SAZX,+BAsBnC,IAAK,IAAM1E,KAAUuC,EACjB,IAAK,IAAIZ,KAAUY,EAAKvC,GACpB,GAAe,cAAX2B,EAAJ,CACA,IAF6B,EAEvB/C,EAAO+C,EAAOM,UAAU,EAAG,GAFJ,+JAGNM,EAAKvC,GAAQ2B,GAAQrB,WAHf,IAG7B,2BAAuD,CAAC,IAA7CG,EAA4C,QAC9ClB,EAAQkB,GAAUhB,eAAeuC,SAASpD,IAC3CyF,EAAsBxD,KAClB,2DAAC,iDAAQ4D,KAAT,KACKH,EAAc7D,GADnB,yBACoDlB,EAAQkB,GAAUhB,eAAeC,KAAI,SAAAd,GAAI,OAAIC,YAAYD,MAAO+F,KAAK,SAPxG,+BAerC,IAAMC,EAAQ,CACVC,aAAc,QAGlB,OAAqC,IAAjCR,EAAsBlD,OAElB,2DAAC,iDAAD,CAASyD,MAAOA,EAAOE,UAAQ,GAC3B,2DAAC,iDAAQC,OAAT,uBACA,2DAAC,iDAAQC,KAAT,iCAQR,2DAAC,iDAAD,CAASJ,MAAOA,EAAOK,OAAK,GACxB,2DAAC,iDAAQF,OAAT,uBACA,2DAAC,iDAAQC,KAAT,KACKX,K,0LAMP,IAAD,OACL,OACI,2DAAC,kDAAD,KACI,2DAAC,kDAAD,KACI,2DAAC,kDAAD,CAAQa,GAAG,KAAKC,UAAU,SAASP,MAAO,CAACQ,UAAW,SAAtD,oBACA,6LACA,qEACI,kGACA,qHACA,uHACA,kHAGJ,8IAEA,oEAAG,oPAEH,2DAAC,oDAAD,CAAiBtC,UAAWuC,KAAKvC,UAAWwC,YAAaD,KAAKC,aACzDD,KAAKjB,yBAAyBiB,KAAKzC,OACnC5E,OAAOC,KAAKoH,KAAKzC,MAAML,MAAM7C,KAAI,SAAAM,GAAM,OACpC,2DAAC,kDAAD,CAAMuF,IAAKvF,EAAQwF,QAAS,GACvB,EAAK5C,MAAML,KAAKvC,GAAQyF,UAAU/F,KAAI,SAAAiC,GACnC,IAAM/C,EAAO,EAAKgE,MAAML,KAAKvC,GAAQ2B,GAC/BpC,EAAUX,EAAK0B,UAAUZ,KAAI,SAAAe,GAAQ,OAAI,EAAKmC,MAAMrD,QAAQkB,MAClE,OACI,2DAAC,kDAAKiF,OAAN,CAAaH,IAAK5D,GACd,2DAAC,oDAAD,CAAM4D,IAAK3G,EAAKpC,GAAIoC,KAAMA,EAAMW,QAASA,EAASoG,WAAY,EAAK/C,MAAMrD,yB,GArMzFqG,6CAAMC,WAkNnBlD,qC,yKCxcMmD,E,uKACN,IAAD,OACN,OACI,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,CAAW7C,YAAamC,KAAKxC,MAAM3D,OAAO1C,GAAI4G,MAAOiC,KAAKxC,MAAMO,QAC3D,SAAA4C,GAAQ,OACL,6BACI,uCAAKC,IAAKD,EAASE,UAAcF,EAASG,eAAoBH,EAASI,iBACnE,kBAACC,EAAA,EAAD,CAAOzB,MAAO,CAAC0B,OAAQ,QAAS,EAAKzD,MAAM3D,OAAOS,UAErDqG,EAASO,qB,GAVFX,IAAMC,WCKpCW,EAAwB,SAAC3D,EAAOpC,GAClC,IAAMkB,EAASkB,EAAMjE,KAAKpC,GAAGyF,UAAU,EAAG,GAG1C,OAFyBY,EAAM8C,WAAWlF,GAAUhB,eAE5BuC,SAASL,GAPrB,UACF,WASR8E,EAAoB,SAAC5D,GACvB,IADiC,EAC3BlB,EAASkB,EAAMjE,KAAKpC,GAAGyF,UAAU,EAAG,GADT,cAGVY,EAAMjE,KAAK0B,WAHD,IAGjC,2BAA6C,CAAC,IAAnCG,EAAkC,QACzC,IAAKoC,EAAM8C,WAAWlF,GAAUhB,eAAeuC,SAASL,GACpD,MAdE,WASuB,8BAQjC,MAAO,SAwBU+E,E,uKACN,IAAD,OACN,OACI,kBAACX,EAAA,EAAD,KACI,kBAAC,IAAD,CAAW5C,YAAakC,KAAKxC,MAAMjE,KAAKpC,KACnC,SAACwJ,EAAUW,GAAX,OACG,kBAACC,EAAA,EAAD,CAAShC,MAAO,CAACiC,gBAAiBF,EAASG,eAAiBN,EAAsB,EAAK3D,MAAO8D,EAASI,kBAAoBN,EAAkB,EAAK5D,OAAQmE,WAAY,cAClK,kBAACjC,EAAA,EAAD,CAAQG,GAAG,MAAM,EAAKrC,MAAMjE,KAAKyB,OA5B3C,SAACwC,GACf,IAAM/E,EAAQ+E,EAAMjE,KAAK0B,UAAU2G,QAAO,SAACnJ,EAAO2C,GAAR,OAAqB3C,EAAQ+E,EAAM8C,WAAWlF,GAAUtC,QAAO,GAIrG+I,EAAS,GAab,OAXIA,EADU,IAAVpJ,EACS,OACFA,EANM,GAOJ,SACFA,EAPM,GAQJ,OARI,KASNA,EACE,OAEA,MAGN,kBAACuI,EAAA,EAAD,CAAOc,MAAOD,EAAQE,UAAQ,EAACxC,MAAO,CAACoC,WAAY,cAAelJ,GAWhDuJ,CAAU,EAAKxE,OAEhB,uCAAKoD,IAAKD,EAASE,UAAcF,EAASsB,eAA1C,CAA0D1C,MAAO,CAAC2C,UAAW,WACxE,EAAK1E,MAAMtD,QAAQG,KAAI,SAACR,EAAQkE,GAAT,OAAmB,kBAAC,EAAD,CAAQmC,IAAKrG,EAAO1C,GAAI0C,OAAQA,EAAQkE,MAAOA,OACzF4C,EAASO,sB,GAZRX,IAAMC,Y,mmBC7ClCjB,EAAQ,CAAC4C,QAAS,KAAMC,cAAe,OAAQC,QAAS,EAAGC,IAAK,OAEvDC,kBAAK,YAAe,IAAZ3K,EAAW,EAAXA,KACrB,OACE,oCACE,kBAAC,IAAD,CAAQ4K,KAAK,SAASC,SAAS,MAAMlD,MAAOA,IAC5C,6BACM,2BAAI3H,EAAK8K,cAEf,kBAAC,IAAD,CAAQF,KAAK,SAASC,SAAS,SAASlD,MAAOA,Q,kBCP/CA,EAAQ,CAAC4C,QAAS,KAAMC,cAAe,OAAQC,QAAS,EAAGC,IAAK,OAChEK,EAAW,CAACC,MAAO,GAAIH,SAAU,WAAYI,OAAQ,GAE5CN,kBAAK,YAAe,IAAZ3K,EAAW,EAAXA,KACrB,OACE,oCACE,kBAAC,IAAD,CAAQ4K,KAAK,SAASC,SAAS,MAAMlD,MAAOA,IAC5C,6BACM,6BACA,2BAAI3H,EAAK8K,aACT,6BACE,yBAAKI,IAAKC,IAASC,IAAKpL,EAAK8K,YAAanD,MAAOoD,MAGzD,kBAAC,IAAD,CAAQH,KAAK,SAASC,SAAS,SAASlD,MAAOA,QChBtCgD,kBAAK,YAAe,IAAZ3K,EAAW,EAAXA,KACrB,OACE,oCACE,kBAAC,IAAD,CAAQ4K,KAAK,SAASC,SAAS,MAAMlD,MAAO,CAAC8C,QAAS,EAAGC,IAAK,SAC9D,6BACM,2BAAI1K,EAAKqL,cAEf,kBAAC,IAAD,CAAQT,KAAK,SAASC,SAAS,SAASlD,MAAO,CAAC8C,QAAS,EAAGQ,OAAQ,a,kBCPpEtD,EAAQ,CACV2D,QAAS,OACTjC,OAAQ,OACRwB,SAAU,WACVH,IAAK,IACLa,KAAM,IACNhB,OAAQ,KACRiB,SAAU,OAGC,SAASC,EAAU7F,GAC9B,OACI,kBAAC+D,EAAA,EAAD,CAAS+B,QAAM,EAACnM,GAAG,WAAWoI,MAAOA,GACjC,kBAACG,EAAA,EAAD,CAAQG,GAAG,KAAKC,UAAU,UAAUtC,EAAM/F,KAAKG,KAAK2C,aACpD,2BAAG,sCAA0C,OAA1BiD,EAAM/F,KAAKG,KAAKkC,MAAkB0D,EAAM/F,KAAKG,KAAKkC,MAAMwF,KAAK,MAAQ,8CAEpD,OAAnC9B,EAAM/F,KAAKG,KAAKC,WAAW0L,IAAe,2BAAG,2CAAoB/F,EAAM/F,KAAKG,KAAKC,WAAW0L,KAAW,2BAAG,2CAAH,SAExE,OAA/B/F,EAAM/F,KAAKG,KAAK4L,YACjB,2BAAG,kDAA2BhG,EAAM/F,KAAKG,KAAK4L,WAAWlE,KAAK,Q,YCrB3D,SAASmE,EAAqBC,GACzC,IAAK,IAAIC,KAAQD,SACNA,EAAWC,G,+CCMpBC,EAAgB,GAChBC,EAAiB,GAEvB,IAAK,IAAMC,KAAQC,EAC2C,IAAtDA,EAAaD,GAAME,iBAAiBC,OAAOnI,QAAuE,IAAvDiI,EAAaD,GAAME,iBAAiBE,QAAQpI,SAE3G+H,EAAerI,KAAK,CAChB,IAAOsI,EACP,MAASA,EACT,KAAQA,EAAO,MAAQC,EAAaD,GAAMK,OAG9CP,EAAcE,GAAQC,EAAaD,GAAME,kBAG7C,IAAK,IAAMF,KAAQF,EACf,IAAK,IAAMpB,KAAQoB,EAAcE,GAAO,CAEpC,IAFoC,EAE9BM,EAAc,GAFgB,cAGjBR,EAAcE,GAAMtB,IAHH,IAGpC,2BAA8C,CAAC,IAApC6B,EAAmC,QACpCA,KAAQC,GACdF,EAAY5I,KAAK,CACb,IAAO6I,EACP,MAASA,EACT,KAAQA,EAAO,MAAQC,EAAoBD,GAAMF,QARrB,gCAWpCP,EAAcE,GAAMtB,GAAQ4B,EAOpC,IAAMG,EAAY,SAACT,GACf,OAAMA,KAAQF,EAKVA,EAAcE,GAAMI,QAAQpI,OAAe,CA1CnC,EA0C6C8H,EAAcE,GAAMI,SACzEN,EAAcE,GAAMU,OAAO1I,OAAe,CA5CnC,EA4C4C8H,EAAcE,GAAMG,QACpE,CA9CI,EA8CKL,EAAcE,GAAMG,SANhCzJ,QAAQC,IAAI,2BAA4BqJ,GACjC,KAQTW,EAAY,SAACX,GACf,OAAMA,KAAQF,EAKPA,EAAcE,GAAMU,QAJvBhK,QAAQC,IAAI,2BAA4BqJ,GACjC,KA6HAY,E,4MAtHXnH,MAAQ,CACJsG,eAAgBA,EAChBc,aAAc,GACdC,aAAc,GAEdC,iBAAiB,EACjBC,mBAAmB,EACnBC,cAAe,SACfC,gBAAiB,SAEjBC,WAAY,KACZC,WAAY,KACZC,aAAc,KAEdC,UAAW,SACXC,YAAa,O,EAGjBC,cAAgB,SAACjO,EAAGkO,GAAa,IAAD,EACLhB,EAAUgB,EAAQC,OADb,mBACrBhD,EADqB,KACfyB,EADe,KAE5BzJ,QAAQC,IAAI8K,EAAQC,OACpB,EAAK5G,SAAS,CACVqG,WAAYM,EAAQC,MAEpBN,WAAY,KACZL,iBAAiB,EACjBE,cAAe,UACfJ,aAAcV,EACdmB,UAAW,eAEXD,aAAc,KACdL,mBAAmB,EACnBE,gBAAiB,SACjBJ,aAAc,GACdS,YAAa,QA3FT,IA8FJ7C,EAAkB,EAAK5D,SAAS,CAACwG,UAAW,kBAhGzC,IAiGE5C,EAAiB,EAAK5D,SAAS,CAACwG,UAAW,iBAEhD,EAAKxG,SAAS,CACVwG,UAAW,eACXC,YAAa,eACbT,aAAcH,EAAUc,EAAQC,OAChCV,mBAAmB,EACnBE,gBAAiB,a,EAK7BS,cAAgB,SAACpO,EAAGgN,GAChB,EAAKzF,SAAS,CACVsG,WAAYb,EAAKmB,S,EAIzBE,gBAAkB,SAACrO,EAAGsO,GAClB,EAAK/G,SAAS,CACVuG,aAAcQ,EAAMH,S,EAI5BI,UAAY,WACRpL,QAAQC,IAAI,iBAEZD,QAAQC,IAAI,EAAK8C,MAAM0H,WAAY,EAAK1H,MAAM2H,WAAY,EAAK3H,MAAM4H,e,uDAIrE,OAAO,oCACH,kBAACU,EAAA,EAAD,CAAMC,UAAQ,EAACvG,MAAO,CAACC,aAAc,SACjC,kBAACqG,EAAA,EAAKE,IAAN,KACI,kBAACC,EAAA,EAAD,CACIC,WAAS,EACTC,QAAM,EACNC,SAAUnG,KAAKsF,cACfc,QAAUpG,KAAKzC,MAAMsG,eACrBwC,SAAO,EACPnF,YAAa,oBAGrB,kBAAC2E,EAAA,EAAKE,IAAN,KACI,kBAACC,EAAA,EAAD,CACIC,WAAS,EACTC,QAAM,EACNC,SAAUnG,KAAKyF,cACfW,QAAUpG,KAAKzC,MAAMoH,aACrB2B,SAAWtG,KAAKzC,MAAMsH,gBACtBW,MAAQxF,KAAKzC,MAAM2H,WACnBhE,YAAclB,KAAKzC,MAAM6H,UACzB7F,MAAO,CAACgH,WAAYvG,KAAKzC,MAAMwH,kBAGvC,kBAACc,EAAA,EAAKE,IAAN,KACI,kBAACC,EAAA,EAAD,CACIC,WAAS,EACTC,QAAM,EACNC,SAAUnG,KAAK0F,gBACfU,QAAUpG,KAAKzC,MAAMqH,aACrB0B,SAAWtG,KAAKzC,MAAMuH,kBACtBU,MAAQxF,KAAKzC,MAAM4H,aACnBjE,YAAclB,KAAKzC,MAAM8H,YACzB9F,MAAO,CAACgH,WAAYvG,KAAKzC,MAAMyH,oBAGvC,kBAACa,EAAA,EAAKE,IAAN,KACI,kBAACS,EAAA,EAAD,CACAC,QAASzG,KAAK4F,UACd9D,MAAM,OAFN,iC,GA3GUtB,a,kBC5D9B,SAASkG,EAAenJ,EAAOoJ,GAC7B,OAAQA,EAAOnE,MACb,IAAK,aACH,MAAO,CAAEoE,MAAM,EAAMC,OAAQF,EAAOE,QACtC,IAAK,cACH,MAAO,CAAED,MAAM,GACjB,QACE,MAAM,IAAIE,OAqCDC,MAjCf,WAAyB,IAAD,EACIxG,IAAMyG,WAAWN,EAAgB,CACzDE,MAAM,EACNC,YAAQI,IAHY,mBACf1J,EADe,KACR2J,EADQ,KAKdN,EAAiBrJ,EAAjBqJ,KAAMC,EAAWtJ,EAAXsJ,OAEd,OACE,6BACE,kBAACL,EAAA,EAAD,CACEW,KAAK,OACLrF,MAAM,OACN2E,QAAS,kBAAMS,EAAS,CAAE1E,KAAM,aAAcqE,OAAQ,eAHxD,kBAQA,kBAACO,EAAA,EAAD,CACEC,WAAS,EACTR,OAAQA,EACRD,KAAMA,EACNU,QAAS,kBAAMJ,EAAS,CAAE1E,KAAM,kBAEhC,kBAAC4E,EAAA,EAAM1H,OAAP,CAAcI,UAAU,UAAxB,kBACA,kBAACY,EAAA,EAAD,KACI,kBAAChB,EAAA,EAAD,CAAQG,GAAG,KAAKC,UAAU,SAASP,MAAO,CAACQ,UAAW,QAAtD,sBACA,kBAAC,EAAD,UCtCZ,SAAS2G,EAAenJ,EAAOoJ,GAC7B,OAAQA,EAAOnE,MACb,IAAK,aACH,MAAO,CAAEoE,MAAM,EAAMC,OAAQF,EAAOE,QACtC,IAAK,cACH,MAAO,CAAED,MAAM,GACjB,QACE,MAAM,IAAIE,OAmCDS,MA/Bf,WAA0B,IAAD,EACGhH,IAAMyG,WAAWN,EAAgB,CACzDE,MAAM,EACNC,YAAQI,IAHa,mBAChB1J,EADgB,KACT2J,EADS,KAKfN,EAAiBrJ,EAAjBqJ,KAAMC,EAAWtJ,EAAXsJ,OAEd,OACE,6BACE,kBAACL,EAAA,EAAD,CACEW,KAAK,OACLrF,MAAM,OACN2E,QAAS,kBAAMS,EAAS,CAAE1E,KAAM,aAAcqE,OAAQ,eAHxD,kBAQA,kBAACO,EAAA,EAAD,CACEC,WAAS,EACTR,OAAQA,EACRD,KAAMA,EACNU,QAAS,kBAAMJ,EAAS,CAAE1E,KAAM,kBAEhC,kBAAC9B,EAAA,EAAD,S,mEC7BFrH,GAAoB,iBAqBpBmO,GAAqB,SAACC,EAAoB9P,GAC5C,IAAM+P,EAAS/O,OAAOC,KAAK0L,EAAoBmD,GAAoBE,WAC7DC,EAAc,GAEpB,OAAOF,EAAO9L,QAAO,SAAAiM,GACjB,IAAMC,EAAaxD,EAAoBmD,GAAoBE,UAAUE,GAAW3N,QAChF,QAAK4N,IACqB,IAAtBA,EAAWhM,SAAgBgM,EAAWnL,SAAS,kBAEpDtC,KAAI,SAAAwN,GACH,IACMC,EA9BY,SAACC,GACvBA,EAAUA,EAAQnM,QAAO,SAAAzB,GAAC,MAAU,eAANA,KAC9B,IAAM6N,EAAerP,OAAOC,KAAKc,IAC3BoO,EAAa,GAanB,OAZAC,EAAQnO,SAAQ,SAAAwB,GACZ,GAAIA,EAAS/C,MAAMgB,IACfyO,EAAWtM,KAAKJ,QACb,GAAIA,EAAS/C,MAAM,gBAAiB,CACf2P,EAAapM,QAAO,SAAAzB,GAAC,OAAIA,EAAEwC,SAASvB,MAC5CxB,SAAQ,SAAAO,GAChB2N,EAAWnL,SAASxC,IACxB2N,EAAWtM,KAAKrB,UAKrB2N,EAcgBG,CADH3D,EAAoBmD,GAAoBE,UAAUE,GAAW3N,QAAQgO,QAE/EC,EAAW7D,EAAoBmD,GAAoBE,UAAUE,GAAW/P,eACxEyH,EAAQ,CACVoC,WAAY,aAEhB,GAAIkG,EAAUxP,MAAM,YAAa,CAE7ByP,EAAWlO,SAAQ,SAAAO,GAAC,OAAIyN,EAAYpM,KAAKrB,MACzC,IAAMiO,EAAaN,EAAWlG,QAAO,SAACnJ,EAAO0B,GAAR,OAAc1B,GAAS0B,KAAKxC,EAAgB+B,GAAYS,GAAGrB,MAAQ,KAAI,GACtGkJ,EAAYmG,EACZ,kBAACnH,GAAA,EAAD,CAAOqH,YAAU,EAAC9I,MAAO,CAACoC,WAAY,YAAa2G,UAAW,cAAexG,MAAOsG,GAAcD,EAAW,QAAU,OAAQC,EAA/H,IAA4ID,GAC5I,KACN,OACI,kBAAC5G,EAAA,EAAD,CAASrB,IAAK2H,EAAW/F,MAAM,OAC3B,yBAAKvC,MAAO,CAACgJ,QAAS,SAClB,kBAAC7I,EAAA,EAAD,CAAQH,MAAO,CAACiJ,SAAU,KAAM3I,GAAG,MAAMgI,GACxC7F,GAEJ8F,EAAWzN,KAAI,SAAAF,GAAC,OAAIA,KAAKxC,EAAgB,kBAACqJ,GAAA,EAAD,CAAOd,IAAK/F,EAAGgN,KAAK,QAAQrF,MAAM,OAAOvC,MAAOA,GAAQpF,GAAa,kBAAC6G,GAAA,EAAD,CAAOd,IAAK/F,EAAGgN,KAAK,QAAQ5H,MAAOA,GAAQpF,OAKlK,IAAMiO,EAAaN,EAAWlG,QAAO,SAACnJ,EAAO0B,GAAR,OAAc1B,GAAS0B,KAAKxC,IAAkBiQ,EAAYjL,SAASxC,GAAKT,GAAYS,GAAGrB,MAAQ,KAAI,GAClIkJ,EAAYmG,EACZ,kBAACnH,GAAA,EAAD,CAAOqH,YAAU,EAAC9I,MAAO,CAACoC,WAAY,YAAa2G,UAAW,cAAexG,MAAOsG,GAAcD,EAAW,QAAU,OAAQC,EAA/H,IAA4ID,GAC5I,KACN,OACI,kBAAC5G,EAAA,EAAD,CAASrB,IAAK2H,EAAWtI,MAAO,CAAC2C,UAAW,SACxC,yBAAK3C,MAAO,CAACgJ,QAAS,SAClB,kBAAC7I,EAAA,EAAD,CAAQH,MAAO,CAACiJ,SAAU,KAAM3I,GAAG,MAAMgI,GACxC7F,GAEJ8F,EAAWlM,QAAO,SAAAzB,GAAC,OAAKA,KAAKxC,IAAkBiQ,EAAYjL,SAASxC,MAAKE,KAAI,SAAAF,GAAC,OAAI,kBAAC6G,GAAA,EAAD,CAAOd,IAAK/F,EAAGgN,KAAK,QAAQrF,MAAM,OAAOvC,MAAOA,GAAQpF,WAmDhJsO,G,uKA3CP,OACI,kBAAC/H,EAAA,EAAD,CAAWnB,MAAO,CAACmJ,YAAa,OAAQC,aAAc,SAClD,kBAACjJ,EAAA,EAAD,CAAQG,GAAG,KAAKC,UAAU,SAASP,MAAO,CAACQ,UAAW,SAAtD,WACA,kBAAC6I,GAAA,EAAD,CAASC,MAAI,GACT,2CAAgB,oDAAhB,8EACA,kBAAChD,EAAA,EAAD,CAAMiD,QAAQ,cACV,kBAACjD,EAAA,EAAKE,IAAN,CAAU5F,QAAS,GACf,kBAAC0F,EAAA,EAAKxF,OAAN,KACI,kBAAC,EAAD,OAEJ,kBAACwF,EAAA,EAAKxF,OAAN,KACI,kBAAC,EAAD,UAKhB,kBAAC0I,GAAA,EAAD,MACA,kBAACrI,EAAA,EAAD,KACI,kBAAChB,EAAA,EAAD,CAAQG,GAAG,KAAKC,UAAU,UAA1B,yBACC0H,GAAmB,SAAUxH,KAAKxC,MAAM7F,gBAE7C,kBAAC+I,EAAA,EAAD,CAAWZ,UAAU,UACjB,kBAAC,KAAD,CAAUkJ,SAAS,kBACf,kBAACxC,EAAA,EAAD,CACIyC,SAAS,WACTnH,MAAM,MACNvC,MAAO,CAACQ,UAAW,OAAQP,aAAc,SAEzC,kBAACgH,EAAA,EAAO0C,QAAR,CAAgBC,SAAO,GAAvB,2BACA,kBAAC3C,EAAA,EAAO0C,QAAR,CAAgBE,QAAM,GAClB,kBAACC,GAAA,EAAD,CAAMlF,KAAK,wB,GAhCrB5D,IAAMC,W,mBCzEtB8I,GAAc,GACdC,GAAe,GAErB,IAAK,IAAMzF,MAAQnK,GAAU,CACzB,IAAMxC,GAAKwC,GAASmK,IAAM3M,GAEtBA,GAAGwF,SAAS,OAEhB4M,GAAa/N,KAAK7B,GAASmK,KAC3BwF,GAAY9N,KAAK,CACb0E,IAAK/I,GACLqO,MAAOrO,GACPqS,KAAMrS,MAMC,SAASsS,KAAkB,IAAD,EACTC,mBAAS,MADA,mBAC9BxD,EAD8B,KACtByD,EADsB,KAY7BC,EAAqBC,aAAgB,SAACC,GAAD,OAAaA,KAAlDF,iBAKFhE,EAAY,WACd,GAAe,OAAXM,EAAJ,CACA,IANsB6D,EAAGC,EAMnBC,EAAU/S,YAAWgP,EAAQqD,IANbQ,EAQI,IAArBE,EAAQxH,SAASsH,EARGC,EASC,IAArBC,EAAQxH,SAASuH,EARtBJ,EAAiB,CAAEG,IAAGC,IAAGE,EASrB,MAIR,OACI,oCACI,kBAAClE,EAAA,EAAD,CACIC,WAAS,EACTC,QAAM,EACNE,QAASkD,GACTpI,YAAY,uBACZiF,SA1BS,SAAC9O,EAAG8S,GACrBR,EAAUQ,EAAK3E,QA0BP4E,WAAY,SAAAC,GACU,UAAdA,EAAMnK,KACR0F,KAGNJ,MAAOU,IAEX,kBAACM,EAAA,EAAD,CACIC,QAASb,EACT0E,KAAK,SACLxI,MAAM,MACNvC,MAAO,CAACgL,WAAY,U,aCtDrB,SAASC,GAAa9S,EAAUD,EAAME,EAAe8S,EAAeC,EAAiBC,UAEzFhT,EAAcF,EAAKN,IAE1B,IADA,IAAIyT,EAAgB,CAACnT,EAAKN,IACM,IAAzByT,EAAc9O,QAAc,CAE/B,IAAM+O,EAAU3T,YAAW0T,EAAcE,QAASpT,GAIlD,GAA8C,OAA1CmT,EAAQjT,KAAKC,WAAWI,cAAwB,CAAC,IAAD,gBAC3B4S,EAAQjT,KAAKC,WAAWI,eADG,IAChD,2BAA4D,CAAC,IAAlDqD,EAAiD,QACpD3D,EAAcW,eAAegD,IACzBmP,EAAcnS,eAAe,IAAMgD,EAAS,IAAMuP,EAAQ1T,aACnDsT,EAAc,IAAMnP,EAAS,IAAMuP,EAAQ1T,IAClDwT,EAAe,IAAMrP,EAAS,IAAMuP,EAAQ1T,IAAM,IALd,iCAuBpD,GAXMK,aAAmBqT,EAASnT,EAAUC,IAMpCA,EAAcW,eAAeuS,EAAQ1T,YAAYQ,EAAckT,EAAQ1T,IAC3EuT,EAAgBG,EAAQ1T,IAAM,GAL1BuT,EAAgBpS,eAAeuS,EAAQ1T,WAAYuT,EAAgBG,EAAQ1T,IACtEQ,EAAcW,eAAeuS,EAAQ1T,YAAYQ,EAAckT,EAAQ1T,IAQvD,OAAzB0T,EAAQjT,KAAK2D,QAAkB,CAAC,IAAD,gBACJsP,EAAQjT,KAAK2D,SADT,IAC/B,2BAAiD,CAAC,IAAvCwP,EAAsC,QACvCpT,EAAcW,eAAeuS,EAAQ1T,MAEnCwT,EAAerS,eAAe,IAAMuS,EAAQ1T,GAAK,IAAM4T,UAAsBJ,EAAe,IAAME,EAAQ1T,GAAK,IAAM4T,GAChHN,EAAcnS,eAAe,IAAMuS,EAAQ1T,GAAK,IAAM4T,WAAsBN,EAAc,IAAMI,EAAQ1T,GAAK,IAAM4T,IAIhIH,EAAcpP,KAAKuP,IATQ,mCC7C3C,IAAMC,GAAuB,CACzBC,OAAQ,UACRC,YAAa,EACb7I,QAAS,GAEP8I,GAAqB,CACvBF,OAAQ,UACRC,YAAa,EACb7I,QAAS,GAGP+I,GAAY,CACdH,OAAQ,UACRC,YAAa,EACb7I,QAAS,GAGPgJ,GAAqB,CACvBJ,OAAQ,UACRC,YAAa,EACb7I,QAAS,GAEPiJ,GAAgB,CAClBL,OAAQ,UACRC,YAAa,EACb7I,QAAS,GAGPkJ,GAAiB,CACnBN,OAAQ,UACRC,YAAa,EACb7I,QAAS,GAGE,SAASmJ,GAAkB9T,EAAUC,EAAe8S,EAAeC,EAAiBC,EAAgBjH,GAgD/G,OA/CoBhM,EAAS2C,KAAI,SAAChD,GAE9B,GAAIoU,YAAOpU,GACP,OAAIoT,EAAcnS,eAAejB,EAAEF,IAC3BuM,EAAWpL,eAAejB,EAAEF,IAAY,2BAAIE,GAAX,IAAckI,MAAOyL,GAAsB/B,UAAU,IACrF,2BAAW5R,GAAX,IAAckI,MAAO4L,GAAoBlC,UAAU,IACjD0B,EAAerS,eAAejB,EAAEF,IACnCuM,EAAWpL,eAAejB,EAAEF,IAAY,2BAAIE,GAAX,IAAckI,MAAO8L,GAAoBpC,UAAU,IACnF,2BAAW5R,GAAX,IAAckI,MAAO+L,GAAerC,UAAU,IAC5CvF,EAAWpL,eAAejB,EAAEF,IAC5B,2BAAIE,GAAX,IAAckI,MAAO6L,GAAWnC,UAAU,IAEnC,2BAAI5R,GAAX,IAAckI,MAAOgM,GAAgBtC,UAAU,IAKvD,GAAItR,EAAcW,eAAejB,EAAEF,IAAK,CACpC,GAA2B,UAAvBE,EAAEkI,MAAMmM,WAAwB,CAEhC,IAAMC,EAAmBtU,EAAEkI,MAAMuC,MACjC,OAAO,2BAAIzK,GAAX,IAAckI,MAAM,2BAAKlI,EAAEkI,OAAR,IAAeuC,MAAO,QAAS4J,WAAYC,EAAkB/P,OAAQ,uBAGxF,OAAO,2BAAIvE,GAAX,IAAckI,MAAM,2BAAKlI,EAAEkI,OAAR,IAAe3D,OAAQ,uBAE3C,GAAI8O,EAAgBpS,eAAejB,EAAEF,IAAK,CAC7C,GAA2B,UAAvBE,EAAEkI,MAAMmM,WAER,OAAO,eAAIrU,GAGX,IAAMuU,EAAavU,EAAEkI,MAAMmM,WAC3B,OAAO,2BAAIrU,GAAX,IAAckI,MAAM,2BAAKlI,EAAEkI,OAAR,IAAeuC,MAAO8J,EAAYF,WAAY,QAAS9P,OAAQ,uBAGtF,GAA2B,UAAvBvE,EAAEkI,MAAMmM,WAAwB,CAEhC,IAAMC,EAAmBtU,EAAEkI,MAAMuC,MACjC,OAAO,2BAAIzK,GAAX,IAAckI,MAAM,2BAAKlI,EAAEkI,OAAR,IAAeuC,MAAO,QAAS4J,WAAYC,EAAkB/P,OAAQ,uBAGxF,OAAO,2BAAIvE,GAAX,IAAckI,MAAM,2BAAKlI,EAAEkI,OAAR,IAAe3D,OAAQ,0B,aChD1D,I,GAAIxE,GAAeyU,EAAQ,IACvBC,GAAY1U,GAAawE,QAAO,SAAAvE,GAAC,OAAI0U,YAAO1U,MAC5C2U,GAAY5U,GAAawE,QAAO,SAAAvE,GAAC,OAAIoU,YAAOpU,MAC5CM,GAAgB,CAChB,OAAU,GAEV8S,GAAgB,GAChBC,GAAkB,GAClBC,GAAiB,GACjBjH,GAAa,G,eAGEoI,I,IAAnB,8BAA8B,CAAC,IAApBrU,GAAmB,SAC1B,GAAIE,GAAcW,eAAeb,GAAKN,IAAK,CACvC,GAA0B,OAAtBM,GAAKG,KAAK2D,QAAkB,SADO,sBAEZ9D,GAAKG,KAAK2D,SAFE,IAEvC,8BAA8C,CAAC,IAApCwP,GAAmC,SAC1CJ,GAAe,IAAMlT,GAAKN,GAAK,IAAM4T,IAAgB,GAHlB,wCAKhCvT,aAAmBC,GAAML,GAAcO,MAC9C+S,GAAgBjT,GAAKN,IAAM,I,kCAInC,I,GAAI8U,GAAkBJ,EAAQ,KAC1BK,GAAiB,G,eACDD,I,IAApB,8BAAqC,CAAC,IAAD,GAA1BE,GAA0B,wBACTA,IADS,IACjC,8BAA+B,CAAC,IAArBC,GAAoB,SAC3BF,GAAeE,IAAa,GAFC,oC,kCAMrChV,GAAeoU,GAAkBpU,GAAcO,GAAe8S,GAAeC,GAAiBC,GAAgBjH,IAG9G,IAAM2I,GAAS,SAACC,GAAuB,IAAD,gBAChBL,IADgB,IAClC,2BAAmC,CAAC,IAAD,EAA1BE,EAA0B,QACzBI,EAAOJ,EAAMK,MADY,cAGZpV,IAHY,IAG/B,2BAAiC,CAAC,IAAzByC,EAAwB,QAC7B,GAAI0S,IAAS1S,EAAO1C,GAAI,CACpB0C,EAAO4S,UAAW,EADE,oBAIHrV,IAJG,IAIpB,2BAA+B,CAAC,IAAvBuM,EAAsB,QACvBoI,YAAOpI,KACPA,EAAK/F,SAAW2O,GAAQ5I,EAAKjL,SAAW6T,IAExC5I,EAAK8I,UAAW,KARJ,gCAWpB,QAfuB,gCAkB/BN,EAAM3Q,KAAK+Q,IAnBmB,gCAqBlCD,EAAkBI,aAAa,CAAC3C,EAAG,IAAKC,EAAG,IAAK2C,KAAM,OAGpDC,GAAY,CACdC,QAASC,EACTC,QAASC,EACTC,QAASC,GAGPC,GAAc,CAACC,UAAW,SAAUC,UAAW,UAAWzK,MAAO,QAAS0K,OAAQ,SA0KzEC,GAxKE,WAAO,IAsGhBC,EAtGe,EACa9D,mBAAStS,IADtB,mBACZM,EADY,KACF+V,EADE,OAEe/D,oBAAS,GAFxB,mBAEZgE,EAFY,KAEDC,EAFC,OAGejE,qBAHf,mBAGZkE,EAHY,KAGDC,EAHC,KAKfC,EAAa,EACbC,EAAmB,GANJ,EAOSrE,mBAASyD,IAPlB,mBAOZa,EAPY,KAOJC,EAPI,KASbC,EAAiB,SAACjE,GAKpBxG,EAAqBC,IAIjBgH,GAAgBpS,eAAe2R,EAAQ9S,KACvCqD,QAAQC,IAAI,cCjHT,SAAoB/C,EAAUD,EAAME,EAAe8S,EAAeC,EAAiBC,GAM9F,GALAhT,EAAcF,EAAKN,IAAM,SAClBuT,EAAgBjT,EAAKN,IAIe,OAAvCM,EAAKG,KAAKC,WAAWI,cAAwB,CAAC,IAAD,gBACxBR,EAAKG,KAAKC,WAAWI,eADG,IAC7C,2BAAyD,CAAC,IAA/CqD,EAA8C,QACjDqP,EAAerS,eAAe,IAAMgD,EAAS,IAAM7D,EAAKN,MACxDsT,EAAc,IAAMnP,EAAS,IAAM7D,EAAKN,IAAM,SACvCwT,EAAe,IAAMrP,EAAS,IAAM7D,EAAKN,MAJX,iCAUjD,GAA0B,OAAtBM,EAAKG,KAAK2D,QAAkB,CAAC,IAAD,gBACD9D,EAAKG,KAAK2D,SADT,IAC5B,2BAA8C,CAAC,IAApCwP,EAAmC,QAEtCpT,EAAcW,eAAeyS,GAE7BN,EAAc,IAAMhT,EAAKN,GAAK,IAAM4T,GAAgB,EAIpDJ,EAAe,IAAMlT,EAAKN,GAAK,IAAM4T,GAAgB,GATjC,kCDkGxBoD,CAAWzW,EAAUuS,EAAStS,GAAe8S,GAAeC,GAAiBC,KACtEhT,GAAcW,eAAe2R,EAAQ9S,MAC5CqD,QAAQC,IAAI,eACZ+P,GAAa9S,EAAUuS,EAAStS,GAAe8S,GAAeC,GAAiBC,IElH5E,SAA6BjT,EAAUC,EAAe8S,EAAeC,EAAiBC,GACjGnQ,QAAQC,IAAI,uBAEZ,IADA,IACA,MAD0B9B,OAAOC,KAAKjB,GACtC,eAA0C,CAArC,IAAMkB,EAAQ,KACf,GAAiB,WAAbA,EAAJ,CACA2B,QAAQC,IAAI,YAAc5B,GAG1B,IAAMuV,EAAelX,YAAW2B,EAAUnB,GAC1C,GAAMF,aAAmB4W,EAAc1W,EAAUC,IAOjD,GAAoD,OAAhDyW,EAAaxW,KAAKC,WAAWC,eAAyB,CACtD0C,QAAQC,IAAI,sBAAuB2T,EAAajX,IAOhD,IAAIkX,EAAiB,eAAO1W,GAE5B,GAAkC,OAA9ByW,EAAaxW,KAAK2D,QAAkB,CAEpC,IAFoC,EAE9B+S,EAAsB,GAFQ,cAGTF,EAAaxW,KAAK2D,SAHT,IAGpC,2BAAsD,CAAC,IAA5CwP,EAA2C,QAC9CpT,EAAcW,eAAeyS,IAAeuD,EAAoB9S,KAAKuP,IAJzC,gCAOpC,KAAsC,IAA/BuD,EAAoBxS,QAAc,CACrC,IAAMyS,EAAYrX,YAAWoX,EAAoBxD,QAASpT,GAI1D,GAHA8C,QAAQC,IAAI,0BAA4B8T,EAAUpX,WAC3CkX,EAAkBE,EAAUpX,IAEJ,OAA3BoX,EAAU3W,KAAK2D,QAAkB,CAAC,IAAD,gBACNgT,EAAU3W,KAAK2D,SADT,IACjC,2BAAmD,CAAC,IAAzCwP,EAAwC,QAC3CpT,EAAcW,eAAeyS,IAAeuD,EAAoB9S,KAAKuP,IAF5C,mCAY7C,IADA,IACA,MAD8BpS,OAAOC,KAAKyV,GAC1C,eAA8C,CAAzC,IAAMxV,EAAQ,KACf2B,QAAQC,IAAI,YAAa5B,GACzB,IAAM2V,EAAoBtX,YAAW2B,EAAUnB,GACU,OAArD8W,EAAkB5W,KAAKC,WAAWC,gBAC9B0W,EAAkB5W,KAAKC,WAAWC,gBAAkBsW,EAAaxW,KAAKC,WAAWC,uBAC1EuW,EAAkBxV,GAKrC2B,QAAQC,IAAI,2BAA4B4T,GAElCI,aAAqBL,EAAc1W,EAAU2W,IAC/C7D,GAAa9S,EAAU0W,EAAczW,EAAe8S,EAAeC,EAAiBC,SApDxFH,GAAa9S,EAAU0W,EAAczW,EAAe8S,EAAeC,EAAiBC,IA0D5F,IADA,IACA,MAD4BhS,OAAOC,KAAK8R,GACxC,eAA8C,CAAzC,IAAMgE,EAAU,KAEXC,EAAiBzX,YAAWwX,EAAYhX,GACxCF,aAAmBmX,EAAgBjX,EAAUC,WAExCgX,EAAeD,IFyCtBE,CAAoBlX,EAAUC,GAAe8S,GAAeC,GAAiBC,KAGjFnQ,QAAQC,IAAI,qCACZD,QAAQC,IAAI9C,IACZ6C,QAAQC,IAAI,qCACZD,QAAQC,IAAIgQ,IACZjQ,QAAQC,IAAI,uCACZD,QAAQC,IAAIiQ,IACZlQ,QAAQC,IAAI,sCACZD,QAAQC,IAAIkQ,IG/HL,SAAuBjT,EAAUC,EAAe8S,EAAeC,EAAiBC,GAG3F,IAH2G,EAGrGkE,EAAmB,GAHkF,cAI3FnX,GAJ2F,IAI3G,2BAA0B,CAAC,IAAhBL,EAAe,QAClB0U,YAAO1U,IACPwX,EAAiBrT,KAAKnE,IAN6E,gCA6B3G,cAAmBwX,EAAnB,eAAqC,CAAhC,IAAMpX,EAAI,KAMPE,EAAcW,eAAeb,EAAKN,MAGlCK,aAAmBC,EAAMC,EAAUC,GAGnC+S,EAAgBjT,EAAKN,IAAM,EAEvBuT,EAAgBpS,eAAeb,EAAKN,YAAYuT,EAAgBjT,EAAKN,MHwF7E2X,CAAcpX,EAAUC,GAAe8S,EAAeC,IAGtD+C,EAAYjC,GAAkB9T,EAAUC,GAAe8S,GAAeC,GAAiBC,GAAgBjH,MAGrGqL,EAAkB,SAAC9E,GAIrBwD,EI3IO,SAAuBhW,EAAMC,EAAUsX,EAAOrX,EAAe8S,EAAeC,EAAiBC,EAAgBjH,EAAYuI,GAIpI,IAJqJ,EAI/IgD,EAAW,aAAOvX,GAJ6H,cAKnIuU,GALmI,IAKrJ,2BAAmC,CAAC,IAA3BE,EAA0B,QAE/B,GAAIA,EAAMxP,SAASlF,EAAKN,IAAK,CAKzB,IAAM+X,EAAa/C,EAAMrB,QACzBqB,EAAM3Q,KAAK0T,GAGX,IATyB,EASnBC,EAAYhD,EAAM,GATC,cAgBXzU,GAhBW,IAgBzB,2BAAwB,CAAC,IAAhBL,EAAe,QAChBA,EAAEF,KAAO+X,EAIT7X,EAAEoV,UAAW,EAENpV,EAAEF,KAAOgY,IAIhB9X,EAAEoV,UAAW,IA3BI,gCAkCzB,IAAI2C,EAAUlY,YAAWiY,EAAWzX,GAChCF,aAAmB4X,EAAS1X,EAAUC,IAGtC+S,EAAgByE,GAAa,EAGzBxX,EAAcW,eAAe4W,WAEtBvX,EAAcuX,UACdxE,EAAgByE,GACvBxX,EAAcwX,GAAa,GACpBzE,EAAgBpS,eAAe4W,WAE/BxE,EAAgBwE,IAK3B1E,GAAa9S,EAAUD,EAAME,EAAe8S,EAAeC,EAAiBC,GAMhF,IA3DyB,EA2DrB0E,EAAYC,YAAkB,CAAC7X,GAAOuX,GACtCO,EAAeD,YAAkB,CAACF,GAAUJ,GAC5CQ,EAAW,GACXC,EAAc,GA9DO,cA+DNJ,GA/DM,IA+DzB,2BAA8B,CAAC,IAApB1L,EAAmB,QAC1B6L,EAAShU,KAAKmI,EAAKxM,KAhEE,oDAkEHoY,GAlEG,IAkEzB,2BAAoC,CAAC,IAA1BG,EAAyB,QAChCD,EAAYjU,KAAKkU,EAAQvY,KAnEJ,gCAuEzB,IAvEyB,EAuErBwY,EAAe,GAvEM,cA2ENN,GA3EM,IA2EzB,2BAA8B,CAAC,IAApB1L,EAAmB,QACtBiM,EAAW1Y,YAAWyM,EAAKxM,GAAIO,GACnCkY,EAASnD,UAAW,EACpB,IAAIoD,EAAYD,EAASzY,GAAGiB,QAAQ8W,EAAYC,GACX,OAAjCjY,YAAW2Y,EAAWb,IACtBW,EAAanU,KAAKqU,GAIlBpF,EAAcnS,eAAesX,EAASzY,aAC/BsT,EAAcmF,EAASzY,IAC1BsY,EAAY9S,SAASkT,KAErBpF,EAAcoF,GAAa,IAK/BlF,EAAerS,eAAesX,EAASzY,aAChCwT,EAAeiF,EAASzY,IAC3BsY,EAAY9S,SAASkT,KAErBlF,EAAekF,GAAa,IAKhCnM,EAAWpL,eAAesX,EAASzY,aAC5BuM,EAAWkM,EAASzY,IACvBsY,EAAY9S,SAASkT,KAErBnM,EAAWmM,GAAa,KA1GX,gCAiHzB,cAAmBL,EAAnB,eAA6B,CAAxB,IACKK,EADK,KACYzX,QAAQ8W,EAAYC,GAC3C,IAAMQ,EAAahT,SAASkT,GAAY,CAGpC,IAAInX,EAASmX,EAAUC,MAAM,KAAK,GAOlC,GAAIpX,IAAWyW,EAAW,SAEtBzE,EAAgBpS,eAAeI,WAExBgS,EAAgBhS,IAjIV,oBAyIH6W,GAzIG,IAyIzB,2BAAoC,CAAC,IAA1BG,EAAyB,QAC5B/L,EAAOzM,YAAWwY,EAAQvY,GAAIO,GAC5BqY,EAAa7Y,YAAWyM,EAAK/F,OAAQlG,GACrCsY,EAAa9Y,YAAWyM,EAAKjL,OAAQhB,GAO3C,GANMqY,EAAWtD,UAAeuD,EAAWvD,WAEvC9I,EAAK8I,UAAW,IAIhBkD,EAAahT,SAAS+S,EAAQvY,IAQ9B,GAAIQ,EAAcW,eAAe6W,IAG7B,GAAIY,EAAW5Y,KAAOgY,EAElBxE,EAAe+E,EAAQvY,IAAM,EAEvBuT,EAAgBpS,eAAeqL,EAAKjL,SAClClB,aAAmBwY,EAAYtY,EAAUC,KAEzC+S,EAAgBsF,EAAW7Y,IAAM,QAOzC,GAA8C,OAA1CiY,EAAQxX,KAAKC,WAAWI,cAAwB,CAAC,IAAD,gBAC3BmX,EAAQxX,KAAKC,WAAWI,eADG,IAChD,2BAA4D,CAAC,IAAlDqD,EAAiD,QACpD3D,EAAcW,eAAegD,IAEzBqP,EAAerS,eAAe,IAAMgD,EAAS,IAAM6T,WAAmBxE,EAAe,IAAMrP,EAAS,IAAM6T,GAC9G1E,EAAc,IAAMnP,EAAS,IAAM6T,GAAa,IAG5CxE,EAAerS,eAAe,IAAMgD,EAAS,IAAM6T,WAAmBxE,EAAe,IAAMrP,EAAS,IAAM6T,GAC1G1E,EAAcnS,eAAe,IAAMgD,EAAS,IAAM6T,WAAmB1E,EAAc,IAAMnP,EAAS,IAAM6T,KATpE,uCAkBpDxE,EAAerS,eAAeqL,EAAKxM,aAE5BwT,EAAehH,EAAKxM,IACvBuT,EAAgBpS,eAAeqL,EAAKjL,UAE9BlB,aAAmBwY,EAAYtY,EAAUC,WAEpC+S,EAAgBsF,EAAW7Y,OArMjC,gCA8OzB,QArP6I,gCAyPrJ,OAAO8X,EJ9GSgB,CAAchG,EAASvS,EAAUsU,GAAWrU,GAAe8S,GAAeC,GAAiBC,GAAgBjH,GAAYuI,KACnIwB,EAAYjC,GAAkB9T,EAAUC,GAAe8S,GAAeC,GAAiBC,GAAgBjH,MAsDvGgK,IACAF,EAAe,kBAACnK,EAAD,CAAW5L,KAAMmW,KAsBpC,OACI,kBAAC,IAAD,CAAmBrO,MAAO,CAAC2Q,QAAS,aAChC,yBAAK3Q,MAAOyO,GACR,kBAACnI,EAAA,EAAD,CAAM1F,QAAS,EAAG2I,SAAO,GACrB,kBAACjD,EAAA,EAAKxF,OAAN,CAAauC,MAAM,MACf,yBAAKuN,aAbC,WACtBlC,EAAU,2BAAID,GAAL,IAAaX,UAAW,aAYqB+C,aATjC,WACrBnC,EAAU,2BAAID,GAAL,IAAaX,UAAW,eASb,yBAAK9N,MAAO,CAACkD,SAAU,WAAYN,OAAQ,KAAMG,IAAK,OAAQ+N,MAAO,SACjE,kBAAC5G,GAAD,OAEJ,kBAAC,IAAD,CACI/R,SAAUA,EACV6H,MAAO,CAACqD,MAAO,OAAQ0K,OAAQ,SAC/BjB,OAAQA,GACRO,UAAWA,GACX0D,kBAAkB,EAClBC,eAvFL,SAAClG,EAAOJ,GAEvBwB,YAAOxB,IACQ,WAAfA,EAAQ9S,KACLuT,GAAgBpS,eAAe2R,EAAQ9S,KAAWQ,GAAcW,eAAe2R,EAAQ9S,OAI1F+U,GAAe5T,eAAe2R,EAAQ9S,IAEnB,MADnB2W,EAEIC,EAAmByC,YAAW,WAC1B1C,EAAa,EACbI,EAAejE,KAChB,KACmB,IAAf6D,IACP2C,aAAa1C,GACbD,EAAa,EACbiB,EAAgB9E,IAIpBiE,EAAejE,KAkEKyG,QAAS,IAGTC,iBA/DH,SAACtG,EAAO5S,GACb,WAAZA,EAAKN,KAETwW,GAAa,GACbE,EAAapW,GKpLN,SAA4BA,EAAMC,EAAUC,EAAe8S,EAAeC,EAAiBC,EAAgBjH,GACtH,GAA2C,OAAvCjM,EAAKG,KAAKC,WAAWI,cAAzB,CADkI,oBAG7GR,EAAKG,KAAKC,WAAWI,eAHwF,IAGlI,2BAAyD,CAAC,IAA/CqD,EAA8C,QACjDmP,EAAcnS,eAAe,IAAMgD,EAAS,IAAM7D,EAAKN,MACvDuM,EAAW,IAAMpI,EAAS,IAAM7D,EAAKN,IAAM,IAL+E,gCAWlI,IADA,IAAIyZ,EAAc,CAACnZ,EAAKN,IACM,IAAvByZ,EAAY9U,QAAc,CAC7B,IAAM+O,EAAU3T,YAAW0Z,EAAY9F,QAASpT,GAEhD,GAAgB,OAAZmT,GAE0C,OAA1CA,EAAQjT,KAAKC,WAAWI,cAA5B,CAL6B,oBAOR4S,EAAQjT,KAAKC,WAAWI,eAPhB,IAO7B,2BAA4D,CAAC,IAAlDqD,EAAiD,QACnDmP,EAAcnS,eAAe,IAAMgD,EAAS,IAAMuP,EAAQ1T,MAC3DuM,EAAW,IAAMpI,EAAS,IAAMuP,EAAQ1T,IAAM,GAM5CQ,EAAcW,eAAegD,IAAcoP,EAAgBpS,eAAegD,IAC5EsV,EAAYpV,KAAKF,IAhBI,oCL6K7BuV,CAAmBpZ,EAAMC,EAAUC,GAAe8S,GAAeC,GAAiBC,EAAgBjH,IAElG+J,EAAYjC,GAAkB9T,EAAUC,GAAe8S,GAAeC,GAAiBC,GAAgBjH,OAsD/EoN,iBAnDH,SAACzG,EAAO5S,GACb,WAAZA,EAAKN,KACTwW,GAAa,GACblK,EAAqBC,IACrB+J,EAAYjC,GAAkB9T,EAAUC,GAAe8S,GAAeC,GAAiBC,GAAgBjH,OAgD/EqN,mBAAmB,EACnBC,eAxCL,SAAC3G,EAAO5S,GAAU,IAAD,gBACtBC,GADsB,IACpC,2BAAwB,CAAC,IAAhBL,EAAe,QACpB,GAAIA,EAAEF,KAAOM,EAAKN,GAAI,CAClBE,EAAEoL,SAASsH,EAAItS,EAAKgL,SAASsH,EAC7B1S,EAAEoL,SAASuH,EAAIvS,EAAKgL,SAASuH,EAC7B,QAL4B,kCAyCZiH,oBAAoB,MAKhC,kBAACpL,EAAA,EAAKxF,OAAN,CAAauC,MAAM,KACf,kBAAC,GAAD,CAASjL,cAAeA,OAG/B6V,EAED,yBAAKrW,GAAG,iBACJ,kBAAC,KAAD,CAAe+I,IAAKvH,OAAOC,KAAKjB,IAAe2H,KAAK,IAAIrF,gBAAiBtB,OAAOC,KAAKjB,UMjQrGuZ,GAAkB,CAClB,CAAC/Z,GAAI,IAAKoI,MAAO,CAAC8C,QAAS,GAAII,SAAU,CAACsH,EAAG,EAAGC,EAAG,GAAIpS,KAAM,CAACuZ,MAAO,WAAY3O,KAAM,WACvF,CAACrL,GAAI,IAAKoI,MAAO,CAAC8C,QAAS,GAAII,SAAU,CAACsH,EAAG,EAAGC,EAAG,KAAMpS,KAAM,CAACuZ,MAAO,SAAU3O,KAAM,WACvF,CAACrL,GAAI,IAAKoI,MAAO,CAAC8C,QAAS,GAAII,SAAU,CAACsH,EAAG,EAAGC,GAAI,KAAMpS,KAAM,CAACuZ,MAAO,SAAU3O,KAAM,WAExF,CAACrL,GAAI,OAAQyG,OAAQ,IAAKlF,OAAQ,IAAK8J,KAAM,OAAQyG,UAAU,IAG7DoD,GAAS,SAACC,GACZA,EAAkB8E,WA0DPC,GAvDE,WAAO,IAAD,EACa3H,mBAASwH,IADtB,mBACZxZ,EADY,KACF+V,EADE,KA4BnB,OACI,kBAAC,WAAD,KACI,kBAAC,IAAD,CACI/V,SAAUA,EACV2U,OAAQA,GACR9M,MAAO,CAACqD,MAAO,OAAQ0K,OAAQ,QAC/BiD,eArBI,SAAClG,EAAOJ,GACpBzP,QAAQC,IAAI,MACZgT,GAAY,SAAC6D,GAAD,OACRA,EAAIjX,KAAI,SAAChD,GACL,OAAIA,EAAEF,KAAO8S,EAAQ9S,IACjBqD,QAAQC,IAAIwP,GACZzP,QAAQC,IAAIpD,EAAEkI,MAAM8C,SACbhL,GAEJA,SAaPka,gBAAgB,GAEhB,kBAAC,IAAD,MACA,kBAAC,IAAD,CACIC,UAAa,SAAAC,GACT,MAAqB,YAAjBA,EAAE7Z,KAAKuZ,MAA4B,MAChC,UAGf,kBAAC,IAAD,OAEJ,6BACI,4BAAQ3O,KAAK,SAASiE,QA3ClB,WACZgH,GAAY,SAAApW,GAAC,OAAIA,EAAE6B,OAAO,CACtB/B,IAAKE,EAAEyE,OAAO,GAAGuB,WACjBzF,KAAM,CAACuZ,MAAO,WAAa9Z,EAAEyE,QAC7B2G,SAAU,CAACsH,EAAG2H,KAAKC,SAAWC,OAAOC,WAAY7H,EAAG0H,KAAKC,SAAWC,OAAOE,oBAuCvE,4BC3CDC,G,uKAXX,OACE,kBAAC,IAAD,CAAYC,SAAS,KACnB,6BACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAW3E,KAC3B,kBAAC,IAAD,CAAO0E,KAAK,YAAYC,UAAWb,W,GAN3B7Q,aCME2R,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASha,MACvB,2DCXNia,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,GAAD,OAEJC,SAASC,eAAe,SDwHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArT,GACLpF,QAAQoF,MAAMA,EAAMsT,a","file":"static/js/main.691a0956.chunk.js","sourcesContent":["// Given an id, returns the element\r\nconst getElement = (id, elementsData) => {\r\n    //console.log(\"GET ELEMENT OF \" + id);\r\n    for (var e of elementsData) {\r\n        if (e.id === id) {\r\n            return e;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport default getElement;","module.exports = __webpack_public_path__ + \"static/media/refresh.5c376b6e.svg\";","// Returns true if all prerequisites are met for a given node\r\n// Returns false if prerequisites are not met for a given node\r\n// Will only analyse targets of potential edges\r\n\r\nimport getElement from './getelement.js';\r\n\r\n// NOTE: Assumes that source of potential edges are always selected\r\nexport default function checkPrerequisites(node, elements, selectedNodes) {\r\n    if (node.data.conditions.units_required !== null && node.data.conditions.level_for_units_required !== null) {\r\n        // Get the type of course this is\r\n        return(checkPrerequisiteUnitsLevel(node, elements, selectedNodes));\r\n    }\r\n\r\n    if (node.data.conditions.prerequisites !== null && node.data.conditions.prereqs_executable !== null) {\r\n        // Evaluate the condition\r\n        //console.log(\"HERE\");\r\n        //console.log(node.data.conditions.prereqs_executable);\r\n        var condition = node.data.conditions.prereqs_executable;\r\n        //console.log(condition);\r\n        condition = condition.replace(/[A-Z]{4}[A-Z0-9]+/gi, function(match) {\r\n            //console.log(match);\r\n            if (selectedNodes.hasOwnProperty(match)) {\r\n                return 1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        });\r\n        // eslint-disable-next-line\r\n        if (eval(condition)) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    return(checkPrerequisiteUnits(node, elements, selectedNodes));\r\n\r\n    // TODO: Check for corerequsiites and exclusion courses as well\r\n    // TODO: Check for completion of units and core_year\r\n\r\n    // Check if these nodes are enough to satisfy prerequisites\r\n    // Get the prerequisite condition and replace courses by 1 if they have been\r\n    // selected and 0 if they have not.\r\n\r\n}\r\n\r\n// Perform prerequisite check for units given the node to check, elements and all\r\n// the selected nodes. Returns true/false\r\nexport function checkPrerequisiteUnits(node, elements, selectedNodes) {\r\n    if (node.data.conditions.units_required !== null) {\r\n        if (node.data.conditions.level_for_units_required === null) {\r\n            // See if we meet the total for this course\r\n            var total = 0;\r\n            const target = node.data.conditions.units_required;\r\n            // console.log(selectedNodes);\r\n            const selectedList = Object.keys(selectedNodes);\r\n            for (const selected of selectedList) {\r\n                if (selected === node.id) continue; // The node can't include itself\r\n                const takenNode = getElement(selected, elements);\r\n                total += takenNode.data.units;\r\n            }\r\n\r\n            if (total >= target) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            // This should have been dealt with in the main function\r\n            // Only check specific level courses\r\n            // We will put it here anyways because unselectconnected imports this function alone\r\n            return(checkPrerequisiteUnitsLevel(node, elements, selectedNodes));\r\n        }\r\n    } else if (node.data.conditions.core_year !== null) {\r\n        // NOTE: Hardcoded this for comp courses in sengah\r\n        return true;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n// Perform prerequisite check for nodes which require X units of Y level courses\r\nfunction checkPrerequisiteUnitsLevel(node, elements, selectedNodes) {\r\n    // Determine the type of course\r\n    var courseType = node.id.substr(0, 4);\r\n    courseType = courseType.concat(node.data.conditions.level_for_units_required);\r\n\r\n    var total = 0;\r\n    const target = node.data.conditions.units_required;\r\n    const selectedList = Object.keys(selectedNodes);\r\n    for (const selected of selectedList) {\r\n        if (selected.substr(0, 5) !== courseType) continue; // Not the right course type\r\n        if (selected === node.id) continue; // The node can't include itself\r\n        const takenNode = getElement(selected, elements);\r\n        total += takenNode.data.units;\r\n    }\r\n\r\n    if (total >= target) {\r\n        // If it has conditions, check the conditions\r\n        if (node.data.conditions.prerequisites !== null && node.data.conditions.prereqs_executable !== null) {\r\n            // Evaluate the condition\r\n\r\n            var condition = node.data.conditions.prereqs_executable;\r\n            condition = condition.replace(/[A-Z]{4}[A-Z0-9]+/gi, function(match) {\r\n                if (selectedNodes.hasOwnProperty(match)) {\r\n                    return 1;\r\n                } else {\r\n                    return 0;\r\n                }\r\n            });\r\n            // eslint-disable-next-line\r\n            if (eval(condition)) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n    \r\n}","import React from 'react';\r\nimport { Container, Segment, Header, Message, Grid } from 'semantic-ui-react'\r\n\r\nimport dataJSON from \"../maps/EngineeringHonoursSoftware/data.json\"\r\nimport rawCoursesJSON from \"../webscraper/courses.json\"\r\n\r\nimport { DragDropContext } from \"react-beautiful-dnd\"\r\nimport Term from \"./degreeplanner-term\"\r\n\r\nconst REGEX_COURSE_CODE = /[A-Z]{4}\\d{4}/g;\r\n\r\nconst mapTermIds = (term) => {\r\n    if (term === \"Summer Term\") return \"TS\";\r\n    if (term === \"Term 1\") return \"T1\";\r\n    if (term === \"Term 2\") return \"T2\";\r\n    if (term === \"Term 3\") return \"T3\";\r\n    return;\r\n}\r\n\r\nconst mapTermFull = (term) => {\r\n    if (term === \"TS\") return \"Summer Term\";\r\n    if (term === \"T1\") return \"Term 1\";\r\n    if (term === \"T2\") return \"Term 2\";\r\n    if (term === \"T3\") return \"Term 3\";\r\n}\r\n\r\nconst updateCourses = (coursesJSON, dataJSON) => {\r\n    dataJSON.forEach(course => {\r\n        if (!(course.id in coursesJSON)) return;\r\n        coursesJSON[course.id].conditions.prereqs_executable = course.data.conditions.prereqs_executable\r\n        coursesJSON[course.id].terms = course.data.terms;\r\n    });\r\n    return coursesJSON;\r\n}\r\n\r\nconst coursesJSON = updateCourses(rawCoursesJSON, dataJSON);\r\n\r\nconst getCourses = (selectedCourses) => {\r\n    const courses = {}\r\n\r\n    selectedCourses.forEach(c => {\r\n        if (!(c in coursesJSON)) return;\r\n        if (!(coursesJSON[c].terms)) {\r\n            console.log(\"no terms offered for\", c);\r\n            return;\r\n        }\r\n        const termsAvailable = coursesJSON[c].terms.map(term => mapTermIds(term));\r\n\r\n        courses[c] = {\r\n            id: c,\r\n            content: `${c} - ${coursesJSON[c].course_name}`,\r\n            termsAvailable: termsAvailable,\r\n            units: coursesJSON[c].units\r\n        }\r\n    })\r\n\r\n    return courses\r\n}\r\n\r\nconst generateTerms = (yearId) => {\r\n    const terms = {}\r\n\r\n    // Terms have id of <YEAR>T<TERM TYPE> eg: 1TS is 1st Year, Summer Term\r\n\r\n    const TSKey = `${yearId}TS`;\r\n    const T1Key = `${yearId}T1`;\r\n    const T2Key = `${yearId}T2`;\r\n    const T3Key = `${yearId}T3`;\r\n    terms[\"termOrder\"] = [TSKey, T1Key, T2Key, T3Key];\r\n\r\n    terms[TSKey] = {\r\n        id: TSKey,\r\n        title: `Year ${yearId} - Summer Term`,\r\n        courseIds: []\r\n    }\r\n\r\n    terms[T1Key] = {\r\n        id: T1Key,\r\n        title: `Year ${yearId} - Term One`,\r\n        courseIds: []\r\n    }\r\n\r\n    terms[T2Key] = {\r\n        id: T2Key,\r\n        title: `Year ${yearId} - Term Two`,\r\n        courseIds: []\r\n    }\r\n\r\n    terms[T3Key] = {\r\n        id: T3Key,\r\n        title: `Year ${yearId} - Term Three`,\r\n        courseIds: []\r\n    }\r\n\r\n    return terms;\r\n}\r\n\r\nconst addPriority = (priority, courseId, unlocksCourse) => {\r\n    if (!(courseId in coursesJSON)) return priority;\r\n    if (!coursesJSON[courseId].conditions.prerequisites) return priority;\r\n\r\n    for (const prereq of coursesJSON[courseId].conditions.prerequisites) {\r\n        if (!(prereq in priority)) continue;\r\n        if (courseId === prereq) continue;\r\n\r\n        priority[prereq].unlocks.push(unlocksCourse);\r\n        priority = addPriority(priority, prereq, unlocksCourse);\r\n    }\r\n\r\n    return priority;\r\n}\r\n\r\nconst prioritiseCourses = (selectedCourses) => {\r\n    // Initiate priorities\r\n    var priority = {};\r\n    for (const courseId of selectedCourses) {\r\n        if (!(courseId in coursesJSON)) continue\r\n\r\n        priority[courseId] = {\r\n            courseId: courseId,\r\n            level: Number(courseId[4]),\r\n            unlocks: [],\r\n            termsAvailable: coursesJSON[courseId].terms ? coursesJSON[courseId].terms.filter(t => t !== \"Summer Term\").length : 0\r\n        }\r\n    }\r\n\r\n    // Calculate priorities\r\n    for (const courseId of selectedCourses) {\r\n        priority = addPriority(priority, courseId, courseId);\r\n    }\r\n\r\n    // Sort keys of priority into array to give into prioritised\r\n    const prioritised = Object.values(priority);\r\n\r\n    prioritised.sort((a, b) => {\r\n        // Sort by:\r\n        // 1. Level (ASC)\r\n        // 2. Unlocks (DESC)\r\n        // 3. Terms Available (ASC)\r\n\r\n        if (a.level === b.level) {\r\n            if (a.unlocks.length === b.unlocks.length) {\r\n                return a.termsAvailable - b.termsAvailable; // Ascending\r\n            }\r\n            return b.unlocks.length - a.unlocks.length; // Descending\r\n        }\r\n        return a.level - b.level; // Ascending\r\n    });\r\n\r\n    return prioritised;\r\n}\r\n\r\nconst checkPrereqsMet = (termPlan, termId, courseId) => {\r\n\r\n    let prereqsExecutable = coursesJSON[courseId].conditions.prereqs_executable;\r\n    if (!prereqsExecutable) return true; // No executable\r\n\r\n    // Get courses taken up to termId\r\n    const coursesTaken = [];\r\n    for (const t in termPlan) {\r\n        if (t === termId) break;\r\n        console.log(\"....... \", termPlan, t);\r\n        coursesTaken.push(...termPlan[t].courseIds);\r\n    }\r\n    // console.log(courseId, \"courses taken:\", coursesTaken);\r\n\r\n    for (const course of coursesTaken) {\r\n        prereqsExecutable = prereqsExecutable.replace(course, \"1\");\r\n    }\r\n    prereqsExecutable = prereqsExecutable.replace(REGEX_COURSE_CODE, \"0\");\r\n\r\n    // eslint-disable-next-line\r\n    return eval(prereqsExecutable);\r\n}\r\n\r\nconst addCourseToPlan = (termPlan, courseId) => {\r\n    const maxUOC = 18;\r\n\r\n    for (const termId in termPlan) {\r\n        if (termPlan[termId].units >= maxUOC) continue;\r\n\r\n        const courseUnits = coursesJSON[courseId].units;\r\n        if (termPlan[termId].units + courseUnits > maxUOC) continue;\r\n\r\n        if (!(coursesJSON[courseId].terms)) {\r\n            console.log(\"cannotfindterms for \", courseId);\r\n            continue;\r\n        }\r\n\r\n        const termsAvailable = coursesJSON[courseId].terms.map(term => mapTermIds(term));\r\n        if (!(termsAvailable.includes(termId.substring(1, 3)))) continue;\r\n\r\n        // Need to check prerequisites have been met here\r\n        if (!checkPrereqsMet(termPlan, termId, courseId)) continue;\r\n\r\n        // Add course to plan\r\n        termPlan[termId].units += coursesJSON[courseId].units;\r\n        termPlan[termId].courseIds.push(courseId);\r\n        return termPlan;\r\n    }\r\n\r\n    console.log(\"ERROR WITH \", courseId); // TODO: put in a \"error\" segment\r\n}\r\n\r\nconst populateTerms = (maxYears, prioritisedCourses) => {\r\n    const maxTerms = 3;\r\n\r\n    const termPlan = {};\r\n    for (let year = 1; year <= maxYears; year++) {\r\n        for (let term = 1; term <= maxTerms; term++) {\r\n            const termId = `${year}T${term}`;\r\n            termPlan[termId] = {\r\n                units: 0,\r\n                courseIds: []\r\n            };\r\n        }\r\n    }\r\n\r\n    // For each course in the prioritised, slot into earliest possible term\r\n    for (const course of prioritisedCourses) {\r\n        addCourseToPlan(termPlan, course.courseId);\r\n    }\r\n\r\n    return termPlan;\r\n}\r\n\r\nconst makePlan = (plan, maxYears, selectedCourses) => {\r\n    const prioritisedCourses = prioritiseCourses(selectedCourses);\r\n\r\n    const termPlan = populateTerms(maxYears, prioritisedCourses);\r\n\r\n    for (const termId in termPlan) {\r\n        const year = termId[0];\r\n        plan[year][termId].courseIds = termPlan[termId].courseIds\r\n    }\r\n\r\n    return plan;\r\n}\r\n\r\nconst generatePlanScaffold = (years, selectedCourses) => {\r\n    let plan = {};\r\n\r\n    for (let year = 1; year <= years; year++) {\r\n        plan[year.toString()] = generateTerms(year)\r\n    }\r\n\r\n    plan = makePlan(plan, years, selectedCourses)\r\n\r\n    return plan;\r\n}\r\n\r\nclass DegreePlanner extends React.Component {\r\n    state = {\r\n        courses: getCourses(this.props.selectedCourses),\r\n        selectedCourses: this.props.selectedCourses,\r\n        plan: generatePlanScaffold(4, this.props.selectedCourses),\r\n    };\r\n    /*shouldComponentUpdate(nextProps, nextState) {\r\n        const { selectedCourses: nextPropsSelectedCourses } = nextProps;\r\n        const { selectedCourses: propsSelectedCourses } = this.props;\r\n\r\n        const { selectedCourses } = this.state;\r\n\r\n        if (nextPropsSelectedCourses !== propsSelectedCourses && nextPropsSelectedCourses !== selectedCourses) {\r\n            console.log(\"UPDATE!!!!\");\r\n            console.log(nextProps);\r\n            console.log(nextState);\r\n            this.setState({\r\n                courses: getCourses(nextPropsSelectedCourses),\r\n                selectedCourses: nextPropsSelectedCourses,\r\n                plan: generatePlanScaffold(4, nextPropsSelectedCourses)\r\n            });\r\n        }\r\n\r\n        return selectedCourses !== nextState.selectedCourses;\r\n    }*/\r\n\r\n    onDragEnd = result => {\r\n        const { destination, source, draggableId } = result;\r\n\r\n        // Null destination means label was not dragged into a droppable\r\n        if (!destination) return;\r\n\r\n        // Label was dragged into the same position\r\n        if (destination.droppableId === source.droppableId && destination.index === source.index) return;\r\n\r\n        const sourceYear = source.droppableId[0];\r\n        const start = this.state.plan[sourceYear][source.droppableId];\r\n        const destinationYear = destination.droppableId[0];\r\n        const finish = this.state.plan[destinationYear][destination.droppableId];\r\n\r\n        if (start === finish) {\r\n            const newCourseIds = Array.from(start.courseIds);\r\n            newCourseIds.splice(source.index, 1); // Remove 1 item at source.index\r\n            newCourseIds.splice(destination.index, 0, draggableId); // Insert dragggableId into destination\r\n            const newTerm = {\r\n                ...start,\r\n                courseIds: newCourseIds\r\n            };\r\n\r\n            const newState = {\r\n                ...this.state,\r\n                plan: {\r\n                    ...this.state.plan,\r\n                    [sourceYear]: {\r\n                        ...this.state.plan[sourceYear],\r\n                        [newTerm.id]: newTerm,\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setState(newState);\r\n            return;\r\n        }\r\n\r\n        // Moving from one list to another\r\n        const startCourseIds = Array.from(start.courseIds)\r\n        startCourseIds.splice(source.index, 1);\r\n\r\n        const newStart = {\r\n            ...start,\r\n            courseIds: startCourseIds,\r\n        }\r\n\r\n        const finishCourseIds = Array.from(finish.courseIds)\r\n        finishCourseIds.splice(destination.index, 0, draggableId);\r\n\r\n        const newFinish = {\r\n            ...finish,\r\n            courseIds: finishCourseIds\r\n        }\r\n\r\n        const newState = this.state;\r\n        newState.plan[sourceYear][newStart.id] = newStart;\r\n        newState.plan[destinationYear][newFinish.id] = newFinish;\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    getConsiderationMessages = (state) => {\r\n        const plan = state.plan;\r\n        const courses = state.courses;\r\n        const considerationMessages = [];\r\n\r\n        // Check prereqs\r\n        const termPlan = {}\r\n        for (const year in plan) {\r\n            for (const term in plan[year]) {\r\n                if (term === \"termOrder\") continue;\r\n                termPlan[term] = plan[year][term]\r\n            }\r\n        }\r\n\r\n        const getCourseLink = (courseId) => {\r\n            const handbookVersion = 2021;\r\n            return <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://www.handbook.unsw.edu.au/undergraduate/courses/${handbookVersion}/${courseId}`}>{courseId}</a>;\r\n        }\r\n\r\n        for (const year in plan) {\r\n            for (const term in plan[year]) {\r\n                if (term === \"termOrder\") continue;\r\n                for (const courseId of plan[year][term].courseIds) {\r\n                    if (!checkPrereqsMet(termPlan, term, courseId)) {\r\n                        considerationMessages.push(\r\n                            <Message.Item>\r\n                                {getCourseLink(courseId)} prerequisites have not been met: {coursesJSON[courseId].conditions.prereqs_executable\r\n                                    .replaceAll(\"|| 0 ||\", \"||\")\r\n                                    .replaceAll(\"&& 0 &&\", \"&&\")\r\n                                    .replaceAll(\"&& 0 ||\", \"||\")\r\n                                    .replaceAll(\"|| 0 &&\", \"&&\")\r\n                                    .replaceAll(\"&&\", \"and\")\r\n                                    .replaceAll(\"||\", \"or\")\r\n                                }\r\n                            </Message.Item>\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Check terms\r\n        for (const yearId in plan) {\r\n            for (let termId in plan[yearId]) {\r\n                if (termId === \"termOrder\") continue;\r\n                const term = termId.substring(1, 3)\r\n                for (const courseId of plan[yearId][termId].courseIds) {\r\n                    if (!courses[courseId].termsAvailable.includes(term)) {\r\n                        considerationMessages.push(\r\n                            <Message.Item>\r\n                                {getCourseLink(courseId)} is only available in {courses[courseId].termsAvailable.map(term => mapTermFull(term)).join(\", \")}\r\n                            </Message.Item>\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const style = {\r\n            marginBottom: \"20px\"\r\n        }\r\n\r\n        if (considerationMessages.length === 0) {\r\n            return (\r\n                <Message style={style} positive>\r\n                    <Message.Header>Considerations</Message.Header>\r\n                    <Message.List>\r\n                        No considerations found\r\n                    </Message.List>\r\n                </Message>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <Message style={style} error>\r\n                <Message.Header>Considerations</Message.Header>\r\n                <Message.List>\r\n                    {considerationMessages}\r\n                </Message.List>\r\n            </Message>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Segment>\r\n                <Container>\r\n                    <Header as=\"h2\" textAlign=\"center\" style={{marginTop: \"50px\"}}>Plan your degree</Header>\r\n                    <p>The following degree plan has been generated based on the courses you have selected above. By default, our algorithm:</p>\r\n                    <ul>\r\n                        <li>allocates 18 UOC per term</li>\r\n                        <li>ensures courses have their prerequisites met</li>\r\n                        <li>ensures courses are offered in allocated terms</li>\r\n                        <li>does not allocate courses in Summer Term</li>\r\n                    </ul>\r\n\r\n                    <p>Drag and drop the courses below to further customise your degree plan!</p>\r\n\r\n                    <p><em>Please note that our data is scraped from the UNSW Handbook and may have some inconsistencies, e.g. a course may not have its term availability published on the Handbook.</em></p>\r\n\r\n                    <DragDropContext onDragEnd={this.onDragEnd} onDragStart={this.onDragStart}>\r\n                        {this.getConsiderationMessages(this.state)}\r\n                        {Object.keys(this.state.plan).map(yearId => (\r\n                            <Grid key={yearId} columns={4}>\r\n                                {this.state.plan[yearId].termOrder.map(termId => {\r\n                                    const term = this.state.plan[yearId][termId];\r\n                                    const courses = term.courseIds.map(courseId => this.state.courses[courseId]);\r\n                                    return (\r\n                                        <Grid.Column key={termId}>\r\n                                            <Term key={term.id} term={term} courses={courses} allCourses={this.state.courses}/>\r\n                                        </Grid.Column>\r\n                                    );\r\n                                })}\r\n                            </Grid>\r\n                        ))}\r\n                    </DragDropContext>\r\n                </Container>\r\n            </Segment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DegreePlanner","import React from \"react\";\r\nimport { Label, Container } from 'semantic-ui-react'\r\n\r\nimport { Draggable } from \"react-beautiful-dnd\"\r\n\r\nexport default class Course extends React.Component {\r\n    render () {\r\n        return (\r\n            <Container>\r\n                <Draggable draggableId={this.props.course.id} index={this.props.index}>\r\n                    {provided => (\r\n                        <div>\r\n                            <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                                <Label style={{margin: \"5px\"}}>{this.props.course.content}</Label>\r\n                            </div>\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Draggable>\r\n            </Container>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { Container, Segment, Header, Label } from 'semantic-ui-react'\r\n\r\nimport Course from \"./degreeplanner-course\"\r\n\r\nimport { Droppable } from \"react-beautiful-dnd\"\r\n\r\nconst SUCCESS = \"#e5fbe5\";\r\nconst ERROR = \"#ffebeb\";\r\n\r\nconst checkTermAvailability = (props, courseId) => {\r\n    const termId = props.term.id.substring(1, 3);\r\n    const termAvailability = props.allCourses[courseId].termsAvailable;\r\n\r\n    return termAvailability.includes(termId) ? SUCCESS : ERROR;\r\n}\r\n\r\nconst checkValidCourses = (props) => {\r\n    const termId = props.term.id.substring(1, 3);\r\n\r\n    for (const courseId of props.term.courseIds) {\r\n        if (!props.allCourses[courseId].termsAvailable.includes(termId)) {\r\n            return ERROR\r\n        }\r\n    }\r\n    return \"white\"\r\n}\r\n\r\nconst showUnits = (props) => {\r\n    const total = props.term.courseIds.reduce((total, courseId) => total + props.allCourses[courseId].units, 0);\r\n    const partTime = 12;\r\n    const fullTime = 18;\r\n\r\n    let colour = \"\"\r\n    if (total === 0) {\r\n        colour = \"grey\";\r\n    } else if (total < partTime) {\r\n        colour = \"orange\";\r\n    } else if (total < fullTime) {\r\n        colour = \"blue\";\r\n    } else if (total === fullTime) {\r\n        colour = \"teal\";\r\n    } else {\r\n        colour = \"red\";\r\n    }\r\n\r\n    return <Label color={colour} floating style={{transition: \"0.2s ease\"}}>{total}</Label>;\r\n}\r\n\r\nexport default class Term extends React.Component {\r\n    render () {\r\n        return (\r\n            <Container>\r\n                <Droppable droppableId={this.props.term.id}>\r\n                    {(provided, snapshot) => (\r\n                        <Segment style={{backgroundColor: snapshot.isDraggingOver ? checkTermAvailability(this.props, snapshot.draggingOverWith) : checkValidCourses(this.props), transition: \"0.2s ease\"}}>\r\n                            <Header as=\"h4\">{this.props.term.title}</Header>\r\n                            {showUnits(this.props)}\r\n                            {/* {getTermTitle(this.props)} */}\r\n                            <div ref={provided.innerRef} {...provided.droppableProps} style={{minHeight: \"150px\"}}>\r\n                                {this.props.courses.map((course, index) => <Course key={course.id} course={course} index={index} />)}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        </Segment>\r\n                    )}\r\n                </Droppable>\r\n            </Container>\r\n        )\r\n    }\r\n}","// For normal nodes\r\nimport React, { memo } from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nconst style = {zIndex: -9999, pointerEvents: 'none', opacity: 0, top: '50%'};\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={style} />\r\n      <div>\r\n            <b>{data.course_code}</b>\r\n      </div>\r\n      <Handle type=\"source\" position=\"bottom\" style={style} />\r\n    </>\r\n  );\r\n});\r\n","// For normal nodes\r\nimport React, { memo } from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nimport Refresh from '../assets/refresh.svg';\r\n\r\nconst style = {zIndex: -9999, pointerEvents: 'none', opacity: 0, top: '50%'};\r\nconst iconSize = {width: 12, position: 'relative', bottom: 2};\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={style} />\r\n      <div>\r\n            <br></br>\r\n            <b>{data.course_code}</b>\r\n            <div>\r\n              <img src={Refresh} alt={data.course_code} style={iconSize}/>\r\n            </div>\r\n      </div>\r\n      <Handle type=\"source\" position=\"bottom\" style={style} />\r\n    </>\r\n  );\r\n});\r\n","import React, { memo } from 'react';\r\n\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={{opacity: 0, top: '50%'}} />\r\n      <div>\r\n            <b>{data.degree_name}</b>\r\n      </div>\r\n      <Handle type=\"source\" position=\"bottom\" style={{opacity: 0, bottom: '50%'}} />\r\n    </>\r\n  );\r\n});\r\n","// Displays hover text in top left corner which contains info about the course\r\nimport React from 'react';\r\nimport { Segment, Header } from \"semantic-ui-react\";\r\n\r\nconst style = {\r\n    padding: \"20px\",\r\n    margin: \"10px\",\r\n    position: \"absolute\",\r\n    top: \"0\",\r\n    left: \"0\",\r\n    zIndex: \"10\",\r\n    maxWidth: \"20%\"\r\n}\r\n\r\nexport default function HoverInfo(props) {\r\n    return (\r\n        <Segment raised id=\"hoverbox\" style={style}>\r\n            <Header as=\"h4\" textAlign=\"center\">{props.node.data.course_name}</Header>\r\n            <p><b>Terms: </b>{(props.node.data.terms !== null) ? props.node.data.terms.join(\", \") : <text>Unavailable</text>}</p>\r\n\r\n            {props.node.data.conditions.raw !== null ? <p><b>Conditions: </b>{props.node.data.conditions.raw}</p> : <p><b>Conditions: </b> None</p>}\r\n\r\n            {props.node.data.exclusions !== null &&\r\n            <p><b>Exclusion courses: </b>{props.node.data.exclusions.join(\", \")}</p>}\r\n        </Segment>\r\n    );\r\n}","// HELPER FUNCTION to delete prerequisite edges\r\n// Usually used after unhovering or onclick\r\nexport default function unhoverPrerequisites(hoverEdges) {\r\n    for (var edge in hoverEdges) {\r\n        delete hoverEdges[edge];\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Button, Dropdown, Grid } from 'semantic-ui-react'\r\n\r\nimport programsJSON from \"../webscraper/programs.json\"\r\nimport specialisationsJSON from \"../webscraper/specialisations.json\"\r\n\r\nconst MAJORS = 1;\r\nconst MINORS = 2;\r\nconst HONOURS = 3;\r\n\r\nconst courseOptions = {}\r\nconst programOptions = []\r\n\r\nfor (const code in programsJSON) {\r\n    if (programsJSON[code].degrees_involved.majors.length === 0 && programsJSON[code].degrees_involved.honours.length === 0) continue;\r\n\r\n    programOptions.push({\r\n        \"key\": code,\r\n        \"value\": code,\r\n        \"text\": code + \" - \" + programsJSON[code].name\r\n    })\r\n\r\n    courseOptions[code] = programsJSON[code].degrees_involved\r\n}\r\n\r\nfor (const code in courseOptions) {\r\n    for (const type in courseOptions[code]) {\r\n\r\n        const replacement = [];\r\n        for (const spec of courseOptions[code][type]) {\r\n            if (!(spec in specialisationsJSON)) continue;\r\n            replacement.push({\r\n                \"key\": spec,\r\n                \"value\": spec,\r\n                \"text\": spec + \" - \" + specialisationsJSON[spec].name\r\n            })\r\n        }\r\n        courseOptions[code][type] = replacement;\r\n    }\r\n}\r\n\r\n// returns MAJORS if Majors but no Minors\r\n// returns MINORS if Majors and Minors exist\r\n// returns HONOURS if Honours exist\r\nconst getMajors = (code) => {\r\n    if (!(code in courseOptions)) {\r\n        console.log(\"code not found in majors\", code);\r\n        return [];\r\n    }\r\n\r\n    if (courseOptions[code].honours.length) return [HONOURS, courseOptions[code].honours];\r\n    if (courseOptions[code].minors.length) return [MINORS, courseOptions[code].majors];\r\n    return [MAJORS, courseOptions[code].majors];\r\n}\r\n\r\nconst getMinors = (code) => {\r\n    if (!(code in courseOptions)) {\r\n        console.log(\"code not found in minors\", code);\r\n        return [];\r\n    }\r\n\r\n    return courseOptions[code].minors;\r\n}\r\n\r\nclass DropdownDegrees extends Component {\r\n    state = {\r\n        programOptions: programOptions,\r\n        majorOptions: [],\r\n        minorOptions: [],\r\n\r\n        disabledPrimary: true,\r\n        disabledSecondary: true,\r\n        hiddenPrimary: 'hidden',\r\n        hiddenSecondary: 'hidden',\r\n\r\n        valProgram: null,\r\n        valPrimary: null,\r\n        valSecondary: null,\r\n\r\n        phPrimary: \"Select\",\r\n        phSecondary: \"N/A\"\r\n    }\r\n\r\n    chooseProgram = (e, program) => {\r\n        const [type, majors] = getMajors(program.value)\r\n        console.log(program.value)\r\n        this.setState({\r\n            valProgram: program.value,\r\n\r\n            valPrimary: null,\r\n            disabledPrimary: false,\r\n            hiddenPrimary: 'visible',\r\n            majorOptions: majors,\r\n            phPrimary: \"Select Major\",\r\n\r\n            valSecondary: null,\r\n            disabledSecondary: true,\r\n            hiddenSecondary: 'hidden',\r\n            minorOptions: [],\r\n            phSecondary: \"N/A\"\r\n        })\r\n\r\n        if (type === HONOURS) this.setState({phPrimary: \"Select Honour\"})\r\n        else if (type === MAJORS) this.setState({phPrimary: \"Select Major\"})\r\n        else {\r\n            this.setState({\r\n                phPrimary: \"Select Major\",\r\n                phSecondary: \"Select Minor\",\r\n                minorOptions: getMinors(program.value),\r\n                disabledSecondary: false,\r\n                hiddenSecondary: 'visible',\r\n            });\r\n        }\r\n    }\r\n\r\n    choosePrimary = (e, spec) => {\r\n        this.setState({\r\n            valPrimary: spec.value\r\n        })\r\n    }\r\n\r\n    chooseSecondary = (e, minor) => {\r\n        this.setState({\r\n            valSecondary: minor.value\r\n        })\r\n    }\r\n\r\n    clickDone = () => {\r\n        console.log('Running click')\r\n        // console.log(this.state)\r\n        console.log(this.state.valProgram, this.state.valPrimary, this.state.valSecondary)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <Grid centered style={{marginBottom: \"20px\"}}> \r\n                <Grid.Row>  \r\n                    <Dropdown\r\n                        selection\r\n                        search\r\n                        onChange={this.chooseProgram}\r\n                        options= {this.state.programOptions}\r\n                        enabled\r\n                        placeholder= 'Select Program'\r\n                    />\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Dropdown\r\n                        selection\r\n                        search\r\n                        onChange={this.choosePrimary}\r\n                        options= {this.state.majorOptions}\r\n                        disabled= {this.state.disabledPrimary}\r\n                        value= {this.state.valPrimary}\r\n                        placeholder= {this.state.phPrimary}\r\n                        style={{visibility: this.state.hiddenPrimary}}\r\n                    />\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Dropdown\r\n                        selection\r\n                        search\r\n                        onChange={this.chooseSecondary}\r\n                        options= {this.state.minorOptions}\r\n                        disabled= {this.state.disabledSecondary}\r\n                        value= {this.state.valSecondary}\r\n                        placeholder= {this.state.phSecondary}\r\n                        style={{visibility: this.state.hiddenSecondary}}\r\n                    />\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Button\r\n                    onClick={this.clickDone}\r\n                    color=\"red\"\r\n                    >Done! Print to console</Button>\r\n                </Grid.Row>\r\n            </Grid>\r\n            \r\n\r\n        </>;\r\n    }\r\n}\r\n\r\nexport default DropdownDegrees","import React from \"react\";\r\nimport DropdownDegrees from \"./dropdownDegrees.js\"\r\nimport { Button, Container, Modal, Header } from 'semantic-ui-react'\r\n\r\nfunction exampleReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'OPEN_MODAL':\r\n      return { open: true, dimmer: action.dimmer }\r\n    case 'CLOSE_MODAL':\r\n      return { open: false }\r\n    default:\r\n      throw new Error()\r\n  }\r\n}\r\n\r\nfunction SideBarModal() {\r\n  const [state, dispatch] = React.useReducer(exampleReducer, {\r\n    open: false,\r\n    dimmer: undefined,\r\n  })\r\n  const { open, dimmer } = state\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        size=\"mini\"\r\n        color=\"blue\"\r\n        onClick={() => dispatch({ type: 'OPEN_MODAL', dimmer: 'blurring' })}\r\n      >\r\n        Click on Me :) \r\n      </Button>\r\n\r\n      <Modal\r\n        closeIcon\r\n        dimmer={dimmer}\r\n        open={open}\r\n        onClose={() => dispatch({ type: 'CLOSE_MODAL' })}\r\n      >\r\n        <Modal.Header textAlign=\"center\">Degree Planner</Modal.Header>\r\n        <Container>\r\n            <Header as=\"h3\" textAlign=\"center\" style={{marginTop: \"5px\"}}>Choose your degree</Header>\r\n            <DropdownDegrees />\r\n        </Container>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SideBarModal\r\n\r\n//DropdownDegrees.clickDone() \r\n\r\n//DropdownDegrees d = new DropdownDegrees(); \r\n//d.clickDone()","import React from \"react\";\r\nimport { Button, Container, Modal } from 'semantic-ui-react'\r\n\r\nfunction exampleReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'OPEN_MODAL':\r\n      return { open: true, dimmer: action.dimmer }\r\n    case 'CLOSE_MODAL':\r\n      return { open: false }\r\n    default:\r\n      throw new Error()\r\n  }\r\n}\r\n\r\nfunction TutorialModal() {\r\n  const [state, dispatch] = React.useReducer(exampleReducer, {\r\n    open: false,\r\n    dimmer: undefined,\r\n  })\r\n  const { open, dimmer } = state\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        size=\"mini\"\r\n        color=\"blue\"\r\n        onClick={() => dispatch({ type: 'OPEN_MODAL', dimmer: 'blurring' })}\r\n      >\r\n        Open Tutorial! \r\n      </Button>\r\n\r\n      <Modal\r\n        closeIcon\r\n        dimmer={dimmer}\r\n        open={open}\r\n        onClose={() => dispatch({ type: 'CLOSE_MODAL' })}\r\n      >\r\n        <Container>\r\n            {/* Put in the Tutorial here! */}\r\n        </Container>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TutorialModal\r\n\r\n//DropdownDegrees.clickDone() \r\n\r\n//DropdownDegrees d = new DropdownDegrees(); \r\n//d.clickDone()","import React from 'react';\r\nimport SidebarModal from \"./sidebar-modal.js\";\r\nimport TutorialModal from \"./tutorial-modal.js\";\r\nimport { Icon, Button, Container, Header, Divider, Grid, Segment, Message, Label } from 'semantic-ui-react';\r\nimport ScrollTo from \"react-scroll-into-view\";\r\nimport specialisationsJSON from \"../webscraper/specialisations.json\";\r\nimport coursesJSON from \"../webscraper/courses.json\";\r\n\r\nconst REGEX_COURSE_CODE = /[A-Z]{4}\\d{4}/g;\r\n\r\nconst getCoursesInLevel = (rawList) => {\r\n    rawList = rawList.filter(c => c !== \"ANY COURSE\");\r\n    const allCourseIds = Object.keys(coursesJSON);\r\n    const courseList = [];\r\n    rawList.forEach(courseId => {\r\n        if (courseId.match(REGEX_COURSE_CODE)) {\r\n            courseList.push(courseId);\r\n        } else if (courseId.match(/^[A-Z]{4}\\d$/)) {\r\n            const relevantCourses = allCourseIds.filter(c => c.includes(courseId));\r\n            relevantCourses.forEach(c => {\r\n                if (courseList.includes(c)) return;\r\n                courseList.push(c);\r\n            });\r\n        }\r\n    });\r\n\r\n    return courseList;\r\n}\r\n\r\nconst getSelectedCourses = (specialisationCode, selectedNodes) => {\r\n    const levels = Object.keys(specialisationsJSON[specialisationCode].structure);\r\n    const coreCourses = [];\r\n\r\n    return levels.filter(levelName => {\r\n        const courseList = specialisationsJSON[specialisationCode].structure[levelName].courses;\r\n        if (!courseList) return false;\r\n        if (courseList.length === 1 && courseList.includes(\"ANY COURSE\")) return false;\r\n        return true;\r\n    }).map(levelName => {\r\n        const rawList = specialisationsJSON[specialisationCode].structure[levelName].courses.flat();\r\n        const courseList = getCoursesInLevel(rawList);\r\n        const minUnits = specialisationsJSON[specialisationCode].structure[levelName].units_required;\r\n        const style = {\r\n            transition: \"0.5s ease\"\r\n        }\r\n        if (levelName.match(/[Cc]ore/g)) {\r\n            // CORE COURSE\r\n            courseList.forEach(c => coreCourses.push(c));\r\n            const unitsTaken = courseList.reduce((total, c) => total + (c in selectedNodes ? coursesJSON[c].units : 0), 0);\r\n            const showUnits = minUnits\r\n                ? <Label horizontal style={{transition: \"0.3s ease\", alignSelf: \"flex-start\"}} color={unitsTaken >= minUnits ? \"green\" : \"red\"}>{unitsTaken}/{minUnits}</Label>\r\n                : null;\r\n            return (\r\n                <Segment key={levelName} color=\"red\">\r\n                    <div style={{display: \"flex\"}}>\r\n                        <Header style={{flexGrow: \"1\"}} as=\"h5\">{levelName}</Header>\r\n                        {showUnits}\r\n                    </div>\r\n                    {courseList.map(c => c in selectedNodes ? <Label key={c} size=\"small\" color=\"grey\" style={style}>{c}</Label> : <Label key={c} size=\"small\" style={style}>{c}</Label>)}\r\n                </Segment>\r\n            )\r\n        } else {\r\n            // Not core course. Render segment with chosen electives only.\r\n            const unitsTaken = courseList.reduce((total, c) => total + (c in selectedNodes && !coreCourses.includes(c) ? coursesJSON[c].units : 0), 0);\r\n            const showUnits = minUnits\r\n                ? <Label horizontal style={{transition: \"0.3s ease\", alignSelf: \"flex-start\"}} color={unitsTaken >= minUnits ? \"green\" : \"red\"}>{unitsTaken}/{minUnits}</Label>\r\n                : null;\r\n            return (\r\n                <Segment key={levelName} style={{minHeight: \"70px\"}}>\r\n                    <div style={{display: \"flex\"}}>\r\n                        <Header style={{flexGrow: \"1\"}} as=\"h5\">{levelName}</Header>\r\n                        {showUnits}\r\n                    </div>\r\n                    {courseList.filter(c => (c in selectedNodes && !coreCourses.includes(c))).map(c => <Label key={c} size=\"small\" color=\"grey\" style={style}>{c}</Label>)}\r\n                </Segment>\r\n            )\r\n        }\r\n    })\r\n}\r\nclass Sidebar extends React.Component {\r\n    render() {\r\n        return (\r\n            <Container style={{paddingLeft: \"10px\", paddingRight: \"20px\"}}>\r\n                <Header as=\"h1\" textAlign=\"center\" style={{marginTop: \"10px\"}}>Circles</Header>\r\n                <Message info>\r\n                    <p>Circles is a <b>visual degree planner</b> for UNSW undergraduate students. Choose your program and degree to begin!</p>\r\n                    <Grid divided='vertically'>\r\n                        <Grid.Row columns={2}>\r\n                            <Grid.Column>\r\n                                <SidebarModal/>\r\n                            </Grid.Column>\r\n                            <Grid.Column>\r\n                                <TutorialModal/>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                    </Grid>\r\n                </Message>\r\n                <Divider></Divider>\r\n                <Container>\r\n                    <Header as=\"h3\" textAlign=\"center\">Your selected courses</Header>\r\n                    {getSelectedCourses(\"SENGAH\", this.props.selectedNodes)}\r\n                </Container>\r\n                <Container textAlign=\"center\">\r\n                    <ScrollTo selector=\"#DegreePlanner\">\r\n                        <Button\r\n                            animated=\"vertical\"\r\n                            color=\"red\"\r\n                            style={{marginTop: \"10px\", marginBottom: \"10px\"}}\r\n                        >\r\n                            <Button.Content visible>Generate degree planner</Button.Content>\r\n                            <Button.Content hidden>\r\n                                <Icon name=\"arrow down\" />\r\n                            </Button.Content>\r\n                        </Button>\r\n                    </ScrollTo>\r\n\r\n                </Container>\r\n            </Container>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Sidebar","import React, { useState } from \"react\";\r\nimport { Button, Dropdown } from \"semantic-ui-react\";\r\nimport { useStoreActions } from \"react-flow-renderer\";\r\nimport dataJSON from \"../maps/EngineeringHonoursSoftware/data.json\";\r\nimport getElement from \"./getelement.js\";\r\n\r\nconst nodeOptions = [];\r\nconst elementsList = [];\r\n\r\nfor (const code in dataJSON) {\r\n    const id = dataJSON[code].id;\r\n    //console.log(\"Printing id\", id);\r\n    if (id.includes(\"-\")) continue;\r\n\r\n    elementsList.push(dataJSON[code]);\r\n    nodeOptions.push({\r\n        key: id,\r\n        value: id,\r\n        text: id,\r\n    });\r\n}\r\n\r\n// console.log(\"Printing NodeOptions\", nodeOptions);\r\n\r\nexport default function DropdownSearch() {\r\n    const [search, setSearch] = useState(null);\r\n\r\n    /*state = {\r\n        search: null,\r\n        getOptions: nodeOptions\r\n    }*/\r\n\r\n    const handleChange = (e, prop) => {\r\n        setSearch(prop.value);\r\n    };\r\n\r\n    const { setInitTransform } = useStoreActions((actions) => actions);\r\n    const transformUpdater = (x, y, zoom) => {\r\n        setInitTransform({ x, y, k: zoom });\r\n    };\r\n\r\n    const clickDone = () => {\r\n        if (search === null) return;\r\n        const element = getElement(search, elementsList);\r\n        transformUpdater(\r\n            -element.position.x + 600,\r\n            -element.position.y + 350,\r\n            1\r\n        );\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dropdown\r\n                selection\r\n                search\r\n                options={nodeOptions}\r\n                placeholder=\"Can't find a course?\"\r\n                onChange={handleChange}\r\n                onKeyPress={event => {\r\n                    if (event.key === 'Enter') {\r\n                      clickDone();\r\n                    }\r\n                  }}\r\n                value={search}\r\n            />\r\n            <Button\r\n                onClick={clickDone}\r\n                icon=\"search\"\r\n                color=\"red\"\r\n                style={{marginLeft: \"5px\"}}\r\n            >\r\n            </Button>\r\n        </>\r\n    );\r\n}\r\n","// HELPER FUNCTION for unselecting nodes\r\n// Given a selected node, unselects it and pushes it onto a queue to be analysed\r\n// ==================ON THE QUEUE==========================\r\n// Unshift node and Manages its prerequisites as follows:\r\n//  - if the prereq node is selected, turn selected edges into potential edges\r\n//  - if otherwise, do nothing\r\n// Determine the status of the current node:\r\n//  - if it meets prerequisites, leave it as is.\r\n//  - if it does not meet prerequisites, make it unselectable (delete from selectable/selected)\r\n// For each unlock:\r\n// - if the current node is not selected, turn edge grey no matter what\r\n// - if the current node is selected, keep edge as it is\r\n// - push the unlock onto queue if it was selectable/selected\r\nimport getElement from './getelement.js';\r\nimport checkPrerequisites from './checkprerequisites.js';\r\n\r\nexport default function unselectNode(elements, node, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    // Unselect this node\r\n    delete selectedNodes[node.id];\r\n    var unselectQueue = [node.id];\r\n    while (unselectQueue.length !== 0) {\r\n        // Unshift and get the node\r\n        const current = getElement(unselectQueue.shift(), elements);\r\n        \r\n        // Analyse its prerequisites\r\n        // If the prereq node is selected, turn selected edge into potential edges\r\n        if (current.data.conditions.prerequisites !== null) {\r\n            for (const prereq of current.data.conditions.prerequisites) {\r\n                if (selectedNodes.hasOwnProperty(prereq)) {\r\n                    if (selectedEdges.hasOwnProperty('e' + prereq + '-' + current.id)) {\r\n                        delete selectedEdges['e' + prereq + '-' + current.id];\r\n                        potentialEdges['e' + prereq + '-' + current.id] = 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Determine the status of the current node\r\n        if (! checkPrerequisites(current, elements, selectedNodes)) {\r\n            // Does not meet prerequisites. Make it unselectable\r\n            if (selectableNodes.hasOwnProperty(current.id)) delete selectableNodes[current.id];\r\n            else if (selectedNodes.hasOwnProperty(current.id)) delete selectedNodes[current.id];\r\n        } else {\r\n            // Meets prerequisites. Make it selectable\r\n            if (selectedNodes.hasOwnProperty(current.id)) delete selectedNodes[current.id];\r\n            selectableNodes[current.id] = 1;\r\n        }\r\n\r\n        // Analyse its unlocks\r\n        if (current.data.unlocks !== null) {\r\n            for (const unlockCourse of current.data.unlocks) {\r\n                if (! selectedNodes.hasOwnProperty(current.id)) {\r\n                    // Make edge grey\r\n                    if (potentialEdges.hasOwnProperty('e' + current.id + '-' + unlockCourse)) delete potentialEdges['e' + current.id + '-' + unlockCourse];\r\n                    else if (selectedEdges.hasOwnProperty('e' + current.id + '-' + unlockCourse)) delete selectedEdges['e' + current.id + '-' + unlockCourse];\r\n                }\r\n\r\n                // Lets push everything no matter what and try it out\r\n                unselectQueue.push(unlockCourse);\r\n                /*if (selectedNodes.hasOwnProperty(unlockCourse) || selectableNodes.hasOwnProperty(unlockCourse)) {\r\n                    unselectQueue.push(unlockCourse);\r\n                }*/\r\n            }\r\n        }\r\n    }\r\n}","// Helper functions to highlight nodes and edges\r\n// Will highlight/unhighlight nodes based on selectedNodes dictionary\r\nimport { isEdge } from \"react-flow-renderer\";\r\n\r\nconst selectedEdgeAnimated = {\r\n    stroke: \"#e94646\",\r\n    strokeWidth: 2,\r\n    opacity: 1,\r\n}\r\nconst selectedEdgeStatic = {\r\n    stroke: \"#454545\",\r\n    strokeWidth: 2,\r\n    opacity: 1,\r\n}\r\n\r\nconst hoverEdge = {\r\n    stroke: \"#454545\",\r\n    strokeWidth: 2,\r\n    opacity: 1,\r\n}\r\n\r\nconst potentialHoverEdge = {\r\n    stroke: \"#454545\",\r\n    strokeWidth: 2,\r\n    opacity: 1,\r\n}\r\nconst potentialEdge = {\r\n    stroke: \"#cecece\",\r\n    strokeWidth: 1,\r\n    opacity: 1,\r\n}\r\n\r\nconst unselectedEdge = {\r\n    stroke: \"#cecece\",\r\n    strokeWidth: 1,\r\n    opacity: 1\r\n}\r\n\r\nexport default function highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges) {\r\n    const newElements = elements.map((e) => {\r\n        // It is an edge\r\n        if (isEdge(e)) {\r\n            if (selectedEdges.hasOwnProperty(e.id)) {\r\n                if (hoverEdges.hasOwnProperty(e.id)) return {...e, style: selectedEdgeAnimated, animated: true};\r\n                else return {...e, style: selectedEdgeStatic, animated: false};\r\n            } else if (potentialEdges.hasOwnProperty(e.id)) {\r\n                if (hoverEdges.hasOwnProperty(e.id)) return {...e, style: potentialHoverEdge, animated: true};\r\n                else return {...e, style: potentialEdge, animated: false};\r\n            } else if (hoverEdges.hasOwnProperty(e.id)) {\r\n                return {...e, style: hoverEdge, animated: true};\r\n            } else {\r\n                return {...e, style: unselectedEdge, animated: false};\r\n            } \r\n        }\r\n\r\n        // It is a node\r\n        if (selectedNodes.hasOwnProperty(e.id)) {\r\n            if (e.style.background === 'white') {\r\n                // It was previously a selectable node. Adjust colours accordingly\r\n                const backgroundColour = e.style.color;\r\n                return {...e, style: {...e.style, color: 'white', background: backgroundColour, filter: 'brightness(1.15)'}}\r\n            } else {\r\n                // It was an unselected node or an already selected node. Simply make sure its brightness is adjusted\r\n                return {...e, style: {...e.style, filter: 'brightness(1.15)'}};\r\n            }\r\n        } else if (selectableNodes.hasOwnProperty(e.id)) {\r\n            if (e.style.background === 'white') {\r\n                // It was already a selectable node. Do not need to adjust\r\n                return {...e};\r\n            } else {\r\n                // It was an unselected node or an already selected node. Adjust text colour and background\r\n                const textColour = e.style.background;\r\n                return {...e, style: {...e.style, color: textColour, background: 'white', filter: 'brightness(1.15)'}};\r\n            }\r\n        } else {\r\n            if (e.style.background === 'white') {\r\n                // It was a selectable node previously. Adjust colours accordingly\r\n                const backgroundColour = e.style.color;\r\n                return {...e, style: {...e.style, color: 'white', background: backgroundColour, filter: 'brightness(0.65)'}}; \r\n            } else {\r\n                // It was either unselected or an already selected node. Simply adjust brightness\r\n                return {...e, style: {...e.style, filter: 'brightness(0.65)'}};\r\n            }\r\n        }\r\n    })\r\n\r\n    return newElements;\r\n}","import React, {useState} from 'react';\r\n// import ReactFlow, {Background, Controls, getConnectedEdges, isNode, isEdge, useStoreState, useStoreActions, ReactFlowProvider, EdgeText} from 'react-flow-renderer';\r\nimport ReactFlow, { isNode, isEdge, ReactFlowProvider } from 'react-flow-renderer';\r\n\r\nimport CustomNode1 from '../../components/customnode1.js';\r\nimport CustomNode2 from '../../components/customnode2.js';\r\nimport HeaderNode1 from '../../components/headernode1.js';\r\n\r\nimport HoverInfo from '../../components/hoverinfo.js';\r\nimport hoverPrerequisites from '../../components/hoverprerequisites.js';\r\nimport unhoverPrerequisites from '../../components/unhoverprerequisites.js';\r\n\r\nimport { Grid } from 'semantic-ui-react'\r\nimport Sidebar from \"../../components/sidebar.js\"\r\n// import pkg from 'semantic-ui-react/package.json'\r\n\r\nimport DegreePlanner from \"../../components/degreeplanner.js\"\r\nimport DropdownSearch from \"../../components/dropdownsearch.js\"\r\n\r\n// import positionHelper from '../../components/positionhelper.js';\r\nimport selectNode from '../../components/selectnode.js';\r\nimport unselectNode from '../../components/unselectnode.js';\r\nimport highlightElements from '../../components/highlightelements.js';\r\nimport getSelectable from '../../components/getselectable.js';\r\nimport checkPrerequisites from '../../components/checkprerequisites';\r\nimport exclusionSwap from '../../components/exclusionswap.js';\r\n// import getElement from '../../components/getelement.js';\r\nimport unselectUnconnected from '../../components/unselectunconnected.js';\r\n\r\n// import SearchPan from '../../components/searchpan.js';\r\n\r\n// import GetPan from '../../components/getpan.js';\r\n\r\nvar elementsData = require(\"./data.json\");\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {\r\n    'SENGAH': 1,\r\n}\r\nvar selectedEdges = {};\r\nvar selectableNodes = {};\r\nvar potentialEdges = {};\r\nvar hoverEdges = {};\r\n\r\n// Load up the chart with initial selectable nodes and edges\r\nfor (const node of nodesData) {\r\n    if (selectedNodes.hasOwnProperty(node.id)) {\r\n        if (node.data.unlocks === null) continue;\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n        }\r\n    } else if (checkPrerequisites(node, elementsData, selectedNodes)) {\r\n        selectableNodes[node.id] = 1;\r\n    }\r\n}\r\n\r\nvar exclusionGroups = require(\"./data_exclusion.json\");\r\nvar exclusionNodes = {};\r\nfor (const group of exclusionGroups) {\r\n    for (const exclusion of group) {\r\n        exclusionNodes[exclusion] = 1;\r\n    }\r\n}\r\n\r\nelementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\n\r\nconst onLoad = (reactFlowInstance) => {\r\n    for (var group of exclusionGroups) {\r\n        const last = group.pop();\r\n\r\n        for (var course of elementsData) {\r\n            if (last === course.id) {\r\n                course.isHidden = true;\r\n                // console.log(\"Hiding \" + course.id);\r\n                // Get all the edges and hide them too\r\n                for (var edge of elementsData) {\r\n                    if (isNode(edge)) continue;\r\n                    if (edge.source === last || edge.target === last) {\r\n                        // console.log(\"hiding \" + edge.id);\r\n                        edge.isHidden = true;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        group.push(last);\r\n    }\r\n    reactFlowInstance.setTransform({x: 470, y: 350, zoom: 0.38});\r\n};\r\n\r\nconst nodeTypes = {\r\n    custom1: CustomNode1,\r\n    custom2: CustomNode2,\r\n    header1: HeaderNode1\r\n};\r\n\r\nconst layoutStyle = {overflowX: \"hidden\", overflowY: \"overlay\", width: \"100vw\", height: \"100vh\"};\r\n\r\nconst BESengah = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverText, setHoverText] = useState(false);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    // const [sidebarOpen, setSidebarOpen] = useState(false);\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n    const [layout, setLayout] = useState(layoutStyle);\r\n\r\n    const selectUnselect = (element) => {\r\n        // NOTE: Might not need this?????\r\n        // EXPLANATION: Reason we dont need it is because we have to leave node\r\n        // anyways to hover another node. But maybe good practise to have just in case\r\n        // Unhover edges which lit up on nodeMouseEnter\r\n        unhoverPrerequisites(hoverEdges);\r\n\r\n        // 1. Select the node and fill in edges.\r\n        // - Deal with unselecting nodes\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"MAINSELECT\");\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"UNSELECTING\");\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n\r\n        console.log(\"==========SelectedNodes==========\");\r\n        console.log(selectedNodes);\r\n        console.log(\"==========SelectedEdges==========\");\r\n        console.log(selectedEdges);\r\n        console.log(\"==========SelectableNodes==========\");\r\n        console.log(selectableNodes);\r\n        console.log(\"==========PotentialEdges==========\");\r\n        console.log(potentialEdges);\r\n\r\n        // 2. Determine which nodes are now selectable\r\n        // - Determine which previously selectable nodes are now unselectable\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n\r\n        // Render graph accordingly\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const toggleExclusion = (element) => {\r\n        // TODO: ARE there courses which do not \r\n        // For all immediate edges of the element, swap\r\n        // with the exclusion course\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    // ==========ONCLICK==========\r\n    const onElementClick = (event, element) => {\r\n        // console.log(\"ONELEMENTCLICK\");\r\n        if (isEdge(element)) return; // Don't care about edges\r\n        if (element.id === 'SENGAH') return; // Cannot click on main node\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return; // Cannot select non selectable nodes\r\n\r\n        // Determine double or single click for exclusion nodes\r\n        // This will prevent normal nodes from waiting the double click delay\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 200);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            // Not an exclusion node.\r\n            selectUnselect(element);\r\n        }\r\n    };\r\n    // ===========================\r\n\r\n    // ==========ONHOVER==========\r\n    const onNodeMouseEnter = (event, node) => {\r\n        if (node.id === 'SENGAH') return;\r\n        // Display node information in top left\r\n        setHoverText(true);\r\n        setHoverNode(node);\r\n\r\n        // If the node is unselected, highlight prerequisite edges in purple\r\n        //if ((!selectedNodes.hasOwnProperty(node.id)) && (!selectableNodes.hasOwnProperty(node.id))) {\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        //}\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        if (node.id === 'SENGAH') return;\r\n        setHoverText(false);\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    let hoverDisplay;\r\n    if (hoverText) {\r\n        hoverDisplay = <HoverInfo node={hoverNode}/>\r\n    }\r\n    // ===========================\r\n\r\n    const onNodeDragStop = (event, node) => {\r\n        for (var e of elements) {\r\n            if (e.id === node.id) {\r\n                e.position.x = node.position.x;\r\n                e.position.y = node.position.y;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const disableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'hidden'});\r\n    }\r\n\r\n    const enableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'overlay'});\r\n    }\r\n\r\n    return (\r\n        <ReactFlowProvider style={{positon: \"relative\"}}>\r\n            <div style={layout}>\r\n                <Grid columns={2} divided>\r\n                    <Grid.Column width=\"12\">\r\n                        <div onMouseEnter={disableBodyScroll} onMouseLeave={enableBodyScroll}>\r\n                            <div style={{position: \"absolute\", zIndex: \"10\", top: \"30px\", right: \"30px\"}}>\r\n                                <DropdownSearch/>\r\n                            </div>\r\n                            <ReactFlow\r\n                                elements={elements}\r\n                                style={{width: '100%', height: '100vh'}}\r\n                                onLoad={onLoad}\r\n                                nodeTypes={nodeTypes}\r\n                                nodesConnectable={false}\r\n                                onElementClick={onElementClick}\r\n                                minZoom={0.38}\r\n                                //setInitTransform={TransformUpdater({x: 100, y: 100, z: 1})}\r\n                                //nodesDraggable={false}\r\n                                onNodeMouseEnter={onNodeMouseEnter}\r\n                                onNodeMouseLeave={onNodeMouseLeave}\r\n                                selectNodesOnDrag={false}\r\n                                onNodeDragStop={onNodeDragStop}\r\n                                elementsSelectable={false}\r\n                            >\r\n                            </ReactFlow>\r\n                        </div>\r\n                    </Grid.Column>\r\n                    <Grid.Column width=\"4\">\r\n                        <Sidebar selectedNodes={selectedNodes}/>\r\n                    </Grid.Column>\r\n                </Grid>\r\n                {hoverDisplay}\r\n                {/* <button onClick={positionHelper(elements)}>GENERATE POSITION</button> */}\r\n                <div id=\"DegreePlanner\">\r\n                    <DegreePlanner key={Object.keys(selectedNodes).join(\"\")}selectedCourses={Object.keys(selectedNodes)} />\r\n                </div>\r\n            </div>\r\n        </ReactFlowProvider>\r\n    );\r\n};\r\n\r\nexport default BESengah;","// HELPER FUNCTION for selecting nodes\r\n// Given a selectable node, highlights potential edges and fills in prereq edges\r\n// import checkPrerequisites from './checkprerequisites.js';\r\n// import getElement from './getelement.js';\r\n\r\nexport default function selectNode(elements, node, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    selectedNodes[node.id] = 1;\r\n    delete selectableNodes[node.id];\r\n\r\n    // Turn its prerequisite potential edges into actual edges\r\n    // Keep grey edges as grey\r\n    if (node.data.conditions.prerequisites !== null) {\r\n        for (const prereq of node.data.conditions.prerequisites) {\r\n            if (potentialEdges.hasOwnProperty('e' + prereq + '-' + node.id)) {\r\n                selectedEdges['e' + prereq + '-' + node.id] = 1;\r\n                delete potentialEdges['e' + prereq + '-' + node.id];\r\n            }\r\n        }\r\n    }\r\n\r\n    // Unlock its future edges\r\n    if (node.data.unlocks !== null) {\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            // Edges from node to unlocks should be unselected\r\n            if (selectedNodes.hasOwnProperty(unlockCourse)) {\r\n                // This course is already selected. Make the edge a selected edge\r\n                selectedEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n            } else {\r\n                // This course is either unselected or selectable\r\n                // In either case, add potential edge\r\n                potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n            }\r\n        }            \r\n    }\r\n\r\n    return;\r\n}\r\n","// HELPER FUNCTION FOR unselecting nodes\r\n// Determines if any nodes not connected to unselect node needs to be unselected.\r\n// For example, nodes which rely on N units completed\r\nimport checkPrerequisites from './checkprerequisites.js';\r\nimport checkPrequisiteUnits from './checkprerequisites.js';\r\nimport unselectNode from './unselectnode.js';\r\nimport getElement from './getelement.js';\r\n\r\nexport default function unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    console.log(\"UNSELECTUNCONNECTED\");\r\n    const selectedNodesList = Object.keys(selectedNodes);\r\n    for (const selected of selectedNodesList) {\r\n        if (selected === \"SENGAH\") continue;\r\n        console.log(\"CHECKING \" + selected);\r\n\r\n        // Determine if prerequisites are met\r\n        const selectedNode = getElement(selected, elements);\r\n        if (! checkPrerequisites(selectedNode, elements, selectedNodes)) {\r\n            // Prerequisites are not met\r\n            unselectNode(elements, selectedNode, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            continue;\r\n        }\r\n\r\n        // CASE if the node is selected and it has n_course prerequisite \r\n        if (selectedNode.data.conditions.units_required !== null) {\r\n            console.log(\"+++++++++++++++++++\", selectedNode.id);\r\n            // Units required exists\r\n            // Do not count the nodes it \"unlocks\" towards its unit count\r\n            // DO not count nodes with a higher \"units_required\" towards its unit count\r\n            // NOTE: This might backfire if it has an unlock which DOES NOT\r\n            // require it as a prerequisite\r\n            \r\n            var trueSelectedNodes = {...selectedNodes};\r\n\r\n            if (selectedNode.data.unlocks !== null) {\r\n                // Create unlock queue to process \"selected\" unlocks\"\r\n                const selectedUnlockQueue = [];\r\n                for (const unlockCourse of selectedNode.data.unlocks) {\r\n                    if (selectedNodes.hasOwnProperty(unlockCourse)) selectedUnlockQueue.push(unlockCourse);\r\n                }\r\n\r\n                while (selectedUnlockQueue.length !== 0) {\r\n                    const curUnlock = getElement(selectedUnlockQueue.shift(), elements);\r\n                    console.log(\"------------- deleting \" + curUnlock.id);\r\n                    delete trueSelectedNodes[curUnlock.id];\r\n\r\n                    if (curUnlock.data.unlocks !== null) {\r\n                        for (const unlockCourse of curUnlock.data.unlocks) {\r\n                            if (selectedNodes.hasOwnProperty(unlockCourse)) selectedUnlockQueue.push(unlockCourse);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // We now have a list of nodes which will count towards our current node's unit requirements\r\n            // Final check = Check for other selected nodes which have unit requirements\r\n            // Do not count them unless their unit requirements are smaller than current node's.\r\n            const trueSelectedNodesList = Object.keys(trueSelectedNodes);\r\n            for (const selected of trueSelectedNodesList) {\r\n                console.log(\"Checking \", selected);\r\n                const selectedUnitsNode = getElement(selected, elements);\r\n                if (selectedUnitsNode.data.conditions.units_required !== null) {\r\n                    if (selectedUnitsNode.data.conditions.units_required >= selectedNode.data.conditions.units_required) {\r\n                        delete trueSelectedNodes[selected];\r\n                    }\r\n                }\r\n            }\r\n\r\n            console.log(\"TRUE SELECTED LOOKS LIKE\", trueSelectedNodes);\r\n            // Perform prerequisite unit check once more\r\n            if (! checkPrequisiteUnits(selectedNode, elements, trueSelectedNodes)) {\r\n                unselectNode(elements, selectedNode, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            }\r\n        }\r\n    }\r\n\r\n    const selectableNodesList = Object.keys(selectableNodes);\r\n    for (const selectable of selectableNodesList) {\r\n        // Determine if prerequisites are met\r\n        const selectableNode = getElement(selectable, elements);\r\n        if (! checkPrerequisites(selectableNode, elements, selectedNodes)) {\r\n            // Prerequisites are not met\r\n            delete selectableNode[selectable];\r\n        }\r\n    }\r\n}","// HELPER FUNCTION to determine which previously unselectable nodes\r\n// are now selectable\r\nimport checkPrerequisites from './checkprerequisites.js';\r\n// import getElement from './getelement.js';\r\nimport {isNode} from 'react-flow-renderer';\r\n\r\nexport default function getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    // TODO: Deal with outsider nodes\r\n\r\n    const analyseNodesKeys = [];\r\n    for (const e of elements) {\r\n        if (isNode(e)) {\r\n            analyseNodesKeys.push(e);\r\n        }\r\n    }\r\n\r\n    // Analyse the target of potential edges for potential nodes\r\n    /*var analyseNodes = {};\r\n    const potentialEdgesKeys = Object.keys(potentialEdges);\r\n    for (var edge of potentialEdgesKeys) {\r\n        // Get the target course\r\n        const target = edge.split('-')[1];\r\n\r\n        if ((! selectedNodes.hasOwnProperty(target)) && (! selectableNodes.hasOwnProperty(target))) {\r\n            analyseNodes[edge.split('-')[1]] = 1;\r\n        }\r\n    }*/\r\n\r\n    \r\n    //const analyseNodesKeys = Object.keys(analyseNodes);\r\n    //console.log(\"==========ANALYSE NODES KEYS===========\");\r\n    //console.log(analyseNodesKeys);\r\n    //console.log(\"==============ELEMENTS===============\");\r\n    //console.log(elements);\r\n\r\n    for (const node of analyseNodesKeys) {\r\n        // Determine if the prerequisite has been met\r\n        //const node = getElement(nodeID, elements);\r\n        //console.log(node);\r\n        \r\n        // If the node is already selected, don't bother making it selectable\r\n        if (selectedNodes.hasOwnProperty(node.id)) continue;\r\n\r\n\r\n        if (checkPrerequisites(node, elements, selectedNodes)) {\r\n            //console.log(\"SELECTABLE\");\r\n            //console.log(node.id);\r\n            selectableNodes[node.id] = 1;\r\n        } else {\r\n            if (selectableNodes.hasOwnProperty(node.id)) delete selectableNodes[node.id];\r\n            //console.log(\"DELETE UNSELECTABLE\");\r\n            //console.log(node.id);\r\n            // TODO: Deal with selected nodes cases? (e.g. unselecting a child???)\r\n\r\n        }\r\n    }\r\n}","// HELPER FUNCTION to toggle exclusion courses\r\n// Will hide the current course and its edges, unhide the next course and edges\r\n// in the queue. Finds new edges to show by regex substitution???\r\nimport { getConnectedEdges } from 'react-flow-renderer';\r\nimport getElement from './getelement.js';\r\nimport checkPrerequisites from './checkprerequisites.js';\r\nimport unselectNode from './unselectnode.js';\r\n\r\nexport default function exclusionSwap(node, elements, edges, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups) {\r\n    /*console.log(\"EXCLUSION SWAP\");\r\n    console.log(exclusionGroups);\r\n    console.log(node.id);*/\r\n    const newElements = [...elements];\r\n    for (var group of exclusionGroups) {\r\n        //console.log(\"CHECKING\", group);\r\n        if (group.includes(node.id)) {\r\n            //console.log(\"FOUND THE EXCLUSION GROUP\");\r\n            //console.log(group);\r\n\r\n            // Move this to the back\r\n            const prevCourse = group.shift();\r\n            group.push(prevCourse);\r\n\r\n            // Current course we need to display is now at front of queue\r\n            const curCourse = group[0];\r\n\r\n            //console.log(prevCourse);-\r\n            //console.log(curCourse);\r\n\r\n\r\n            // Toggle the nodes themselves accordingly\r\n            for (var e of elements) {\r\n                if (e.id === prevCourse) {\r\n                    /*console.log(e);\r\n                    console.log(\"HIDING\");\r\n                    console.log(prevCourse);*/\r\n                    e.isHidden = true;\r\n                    //console.log(e);\r\n                } else if (e.id === curCourse) {\r\n                    /*console.log(e);\r\n                    console.log(\"REVEALING\");\r\n                    console.log(curCourse);*/\r\n                    e.isHidden = false;\r\n                    //console.log(e);\r\n                }\r\n            }\r\n\r\n            // Determine state of the nodes (E.g. COMP6441 can be selectable\r\n            // whilst COMP6841 is not)\r\n            var curNode = getElement(curCourse, elements);\r\n            if (checkPrerequisites(curNode, elements, selectedNodes)) {\r\n                // The new node is selectable\r\n                //console.log(\"================== SELECTABLE\", curCourse);\r\n                selectableNodes[curCourse] = 1;\r\n                \r\n                // Determine previous node condition\r\n                if (selectedNodes.hasOwnProperty(prevCourse)) {\r\n                    //console.log(\"PREVIOUS SELECTED\", prevCourse);\r\n                    delete selectedNodes[prevCourse];\r\n                    delete selectableNodes[curCourse];\r\n                    selectedNodes[curCourse] = 1;\r\n                } else if (selectableNodes.hasOwnProperty(prevCourse)) {\r\n                    //console.log(\"PREVIOUS SELECTABLE\", prevCourse);\r\n                    delete selectableNodes[prevCourse];\r\n                }\r\n            } else {\r\n                // The new node is not selectable\r\n                // Unselect the original node\r\n                unselectNode(elements, node, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            }         \r\n\r\n            // Get all the edges of the previous course and hide all of them\r\n            // Then use regex sub to determine the new edges to reveal\r\n            // Transfer over selected, potential and hover edges if they are in newedgeslist\r\n            var edgesList = getConnectedEdges([node], edges);\r\n            var newEdgesList = getConnectedEdges([curNode], edges);\r\n            var edgesIds = [];\r\n            var newEdgesIds = [];\r\n            for (const edge of edgesList) {\r\n                edgesIds.push(edge.id);\r\n            }\r\n            for (const newEdge of newEdgesList) {\r\n                newEdgesIds.push(newEdge.id);\r\n            }        \r\n\r\n            // Stores all the common edges\r\n            var checkedEdges = [];\r\n\r\n            // Go through each edge we need to hide and check what we should do\r\n            // with the edge in hideEdgesList\r\n            for (const edge of edgesList) {\r\n                var hideEdge = getElement(edge.id, elements);\r\n                hideEdge.isHidden = true;\r\n                var newEdgeId = hideEdge.id.replace(prevCourse, curCourse);\r\n                if (getElement(newEdgeId, edges) !== null) {\r\n                    checkedEdges.push(newEdgeId);\r\n                } \r\n\r\n                // If selected, unselect it\r\n                if (selectedEdges.hasOwnProperty(hideEdge.id)) {\r\n                    delete selectedEdges[hideEdge.id];\r\n                    if (newEdgesIds.includes(newEdgeId)) {\r\n                        // This is in the newEdges list. Transfer the edge property\r\n                        selectedEdges[newEdgeId] = 1;\r\n                    }\r\n                }\r\n\r\n                // If potential, unpotential it\r\n                if (potentialEdges.hasOwnProperty(hideEdge.id)) {\r\n                    delete potentialEdges[hideEdge.id];\r\n                    if (newEdgesIds.includes(newEdgeId)) {\r\n                        // This is in the newEdges list. Transfer the edge property\r\n                        potentialEdges[newEdgeId] = 1;\r\n                    }\r\n                }\r\n\r\n                // If hover, unhover it\r\n                if (hoverEdges.hasOwnProperty(hideEdge.id)) {\r\n                    delete hoverEdges[hideEdge.id];\r\n                    if (newEdgesIds.includes(newEdgeId)) {\r\n                        // This is in the newEdges list. Transfer the edge property\r\n                        hoverEdges[newEdgeId] = 1;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            //console.log(\"CHECKED EDGES\", checkedEdges);\r\n            \r\n            for (const edge of edgesIds) {\r\n                const newEdgeId = edge.replace(prevCourse, curCourse);\r\n                if (! checkedEdges.includes(newEdgeId)) {\r\n                    // Old edge which has not been transferred to new edge.\r\n                    // Deal with the TARGET NODE SELECTABILITY right here\r\n                    var target = newEdgeId.split('-')[1];\r\n                    //console.log(\"CHECKING\", newEdgeId);\r\n                    //console.log(\"TARGET IS\", target);\r\n                    // Note that we cannot use newEdge.target as this edge\r\n                    // DOES NOT EXIST ( i think )\r\n\r\n                    // TODO: TEMPORARY FIX. Make sure target is not current course\r\n                    if (target === curCourse) continue;\r\n\r\n                    if (selectableNodes.hasOwnProperty(target)) {\r\n                        //console.log(\"Deleting \" + target);\r\n                        delete selectableNodes[target];\r\n                    }\r\n                }\r\n            }\r\n\r\n            // For each edge, show it IF TARGET AND SOURCE ARE NOT HIDDEN\r\n            // Will also show any additional edges\r\n            // (Example: COMP6441, COMP6841. COMP6841 -> COMP6448 but COMP6441 does not)\r\n            for (const newEdge of newEdgesList) {\r\n                var edge = getElement(newEdge.id, elements);\r\n                const sourceNode = getElement(edge.source, elements);\r\n                const targetNode = getElement(edge.target, elements);\r\n                if ((!sourceNode.isHidden) && (!targetNode.isHidden)) {\r\n                    // Show the edge if both nodes are not hidden\r\n                    edge.isHidden = false;    \r\n                }\r\n\r\n                // Determine if this edge has been checked before\r\n                if (checkedEdges.includes(newEdge.id)) {\r\n                    // It has been checked before\r\n                    // TODO: THIS CAN BREAK if both nodes have same edges\r\n                    // but one has an additional prerequisite??????\r\n                    continue;\r\n                } else {\r\n                    //console.log(newEdge.id + \" NOT BEEN CHECKED BEFORE\")\r\n                    // It has NOT been checked before\r\n                    if (selectedNodes.hasOwnProperty(curCourse)) {\r\n                        //console.log(curCourse + \" was previously selected\");\r\n                        \r\n                        if (sourceNode.id === curCourse) {\r\n                            // Reveal node is selected and source of edge. Make potential edge.\r\n                            potentialEdges[newEdge.id] = 1;\r\n                            // Check if the target node is selectable\r\n                            if (! selectableNodes.hasOwnProperty(edge.target)) {\r\n                                if (checkPrerequisites(targetNode, elements, selectedNodes)) {\r\n                                    //console.log(edge.target + \" DOES MEET PREREQS\");\r\n                                    selectableNodes[targetNode.id] = 1;\r\n                                } else {\r\n                                    //console.log(edge.target + \" DOES NOT MEET PREREQS\");\r\n                                }\r\n                            }\r\n                        } else {\r\n                            // Reveal node is selected and target of edge. Check previous edges/nodes\r\n                            if (curNode.data.conditions.prerequisites !== null) {\r\n                                for (const prereq of curNode.data.conditions.prerequisites) {\r\n                                    if (selectedNodes.hasOwnProperty(prereq)) {\r\n                                        // This node was selected. Make the edge selected\r\n                                        if (potentialEdges.hasOwnProperty('e' + prereq + '-' + curCourse)) delete potentialEdges['e' + prereq + '-' + curCourse];\r\n                                        selectedEdges['e' + prereq + '-' + curCourse] = 1;\r\n                                    } else {\r\n                                        // This node was not selected. Make sure the edge is unselected\r\n                                        if (potentialEdges.hasOwnProperty('e' + prereq + '-' + curCourse)) delete potentialEdges['e' + prereq + '-' + curCourse];\r\n                                        if (selectedEdges.hasOwnProperty('e' + prereq + '-' + curCourse)) delete selectedEdges['e' + prereq + '-' + curCourse];\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        //console.log(curCourse + \" was not previously selected\")\r\n                        // The node was not selected before. Delete any potential edges\r\n                        // Make target node unselectable if prereqs are not met\r\n                        if (potentialEdges.hasOwnProperty(edge.id)) {\r\n                            //console.log(\"DELETING \" + edge.id);\r\n                            delete potentialEdges[edge.id];\r\n                            if (selectableNodes.hasOwnProperty(edge.target)) {\r\n                                //console.log(edge.target + \" WAS SELECTABLE\")\r\n                                if (! checkPrerequisites(targetNode, elements, selectedNodes)) {\r\n                                    //console.log(edge.target + \" DOES NOT MEET PREREQS\");\r\n                                    delete selectableNodes[targetNode.id];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            /*for (const newEdge of newEdgesList) {\r\n                for (const edge of newElements) {\r\n                    if (newEdge.id === edge.id) {\r\n                        const sourceNode = getElement(edge.source, elements);\r\n                        const targetNode = getElement(edge.target, elements);\r\n                        if ((!sourceNode.isHidden) && (!targetNode.isHidden)) {\r\n                            edge.isHidden = false;\r\n                            \r\n                            \r\n                            // If the new node is selected, make this edge blue\r\n                            // Else, make this edge grey. Deals with differing edge\r\n                            // cases COMP6441 and COMP6841\r\n                            if (selectedNodes.hasOwnProperty(curCourse)) {\r\n                                potentialEdges[edge.id] = 1;\r\n                                // Make sure the target node is selectable\r\n                                if (! selectableNodes.hasOwnProperty(edge.target)) {\r\n                                    if (checkPrerequisites(targetNode, selectedNodes)) {\r\n                                        selectableNodes[targetNode.id] = 1;\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                if (potentialEdges.hasOwnProperty(edge.id)) {\r\n                                   delete potentialEdges[edge.id];\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }*/\r\n\r\n\r\n            break;\r\n        }\r\n    }\r\n\r\n    return newElements;\r\n}","// HELPER FUNCTION to highlight prerequisites in purple on hover\r\n// When hovering over an unselected node, show a path of edges\r\n// which will stop at a selected/selectable node\r\nimport getElement from './getelement.js';\r\n\r\nexport default function hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges) {\r\n    if (node.data.conditions.prerequisites === null) return;\r\n    // Get all selected edges one layer down and add to hover edges\r\n    for (const prereq of node.data.conditions.prerequisites) {\r\n        if (selectedEdges.hasOwnProperty('e' + prereq + '-' + node.id)) {\r\n            hoverEdges['e' + prereq + '-' + node.id] = 1;\r\n        }\r\n    }\r\n\r\n    // hoverEdge all unselected (AND POTENTIAL???) edges until we hit selected/selectable node\r\n    var prereqQueue = [node.id];\r\n    while (prereqQueue.length !== 0) {\r\n        const current = getElement(prereqQueue.shift(), elements);\r\n        // Make sure this course exists as a node in our map\r\n        if (current === null) continue;\r\n\r\n        if (current.data.conditions.prerequisites === null) continue;\r\n\r\n        for (const prereq of current.data.conditions.prerequisites) {\r\n            if (!selectedEdges.hasOwnProperty('e' + prereq + '-' + current.id)) {\r\n                hoverEdges['e' + prereq + '-' + current.id] = 1;\r\n            }\r\n            /*if ((!selectedEdges.hasOwnProperty('e' + prereq + '-' + current.id)) && (!potentialEdges.hasOwnProperty('e' + prereq + '-' + current.id))) {\r\n                hoverEdges['e' + prereq + '-' + current.id] = 1;\r\n            }*/\r\n\r\n            if ((!selectedNodes.hasOwnProperty(prereq)) && (!selectableNodes.hasOwnProperty(prereq))) {\r\n                prereqQueue.push(prereq);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import React, {useState, Fragment} from 'react';\r\nimport ReactFlow, {Background, Controls, MiniMap} from 'react-flow-renderer';\r\n\r\nvar initialElements = [\r\n    {id: '1', style: {opacity: 1}, position: {x: 0, y: 0}, data: {label: 'VINCENT'}, type: 'default'},\r\n    {id: '2', style: {opacity: 1}, position: {x: 0, y: 100}, data: {label: 'HAYES'}, type: 'default'},\r\n    {id: '3', style: {opacity: 1}, position: {x: 0, y: -100}, data: {label: 'JAMES'}, type: 'default'},\r\n    \r\n    {id: 'e1-2', source: '1', target: '2', type: 'step', animated: true}\r\n];\r\n\r\nconst onLoad = (reactFlowInstance) => {\r\n    reactFlowInstance.fitView();\r\n}\r\n\r\nconst Teaching = () => {\r\n    const [elements, setElements] = useState(initialElements);\r\n    // const [isDraggable, setIsDraggable] = useState(true);\r\n\r\n    const addNode = () => {\r\n        setElements(e => e.concat({\r\n            id: (e.length+1).toString(),\r\n            data: {label: 'new node' + e.length},\r\n            position: {x: Math.random() * window.innerWidth, y: Math.random() * window.innerHeight}\r\n        }));\r\n    };\r\n    \r\n\r\n    const onClick = (event, element) => {\r\n        console.log('hi');\r\n        setElements((els) =>\r\n            els.map((e) => {\r\n                if (e.id === element.id) {\r\n                    console.log(element);    \r\n                    console.log(e.style.opacity);\r\n                    return e;\r\n                }\r\n                return e;\r\n            })\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <ReactFlow\r\n                elements={elements}\r\n                onLoad={onLoad}\r\n                style={{width: \"100%\", height: \"99vh\"}}\r\n                onElementClick={onClick}\r\n                nodesDraggable={false}\r\n            >\r\n                <Background />\r\n                <MiniMap \r\n                    nodeColor = {n=>{\r\n                        if (n.data.label === 'VINCENT') return 'red';\r\n                        return 'blue';\r\n                    }}\r\n                />\r\n                <Controls />\r\n            </ReactFlow>\r\n            <div>\r\n                <button type=\"button\" onClick={addNode}>\r\n                    ADD NEW NODE HERE!!!!\r\n                </button>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Teaching;","import React, {Component} from 'react';\r\nimport { Route, HashRouter } from 'react-router-dom';\r\n\r\nimport BESengah from './maps/EngineeringHonoursSoftware/map.js';\r\nimport Teaching from './components/teaching.js';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <HashRouter basename='/'>\r\n        <div>\r\n          <Route path=\"/\" component={BESengah} />\r\n          <Route path=\"/Teaching\" component={Teaching}/>\r\n        </div>\r\n      </HashRouter>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType !== null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}