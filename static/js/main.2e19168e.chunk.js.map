{"version":3,"sources":["components/getelement.js","components/degreeplanner-course.jsx","components/degreeplanner.js","components/degreeplanner-term.jsx","components/checkprerequisites.js","components/customnode1.js","components/customnode2.js","components/headernode1.js","components/hoverinfo.js","components/unhoverprerequisites.js","components/dropdownDegrees.js","components/dropdownsearch.js","components/sidebar-modal.js","components/sidebar.js","components/unselectnode.js","components/highlightelements.js","maps/EngineeringHonoursSoftware/map.js","components/selectnode.js","components/unselectunconnected.js","components/getselectable.js","components/exclusionswap.js","components/hoverprerequisites.js","components/teaching.js","App.js","serviceWorker.js","index.js"],"names":["getElement","id","elementsData","e","Course","draggableId","this","props","course","index","provided","ref","innerRef","draggableProps","dragHandleProps","style","margin","content","placeholder","React","Component","getCourses","selectedCourses","courses","forEach","c","coursesJSON","terms","termsAvailable","map","term","course_name","units","console","log","generateTerms","yearId","TSKey","T1Key","T2Key","T3Key","title","courseIds","addPriority","priority","courseId","unlocksCourse","conditions","prerequisites","prereq","unlocks","push","prioritiseCourses","level","Number","filter","t","length","prioritised","Object","values","sort","a","b","checkPrereqsMet","termPlan","termId","REGEX_COURSE_CODE","prereqsExecutable","prereqs_executable","coursesTaken","replace","eval","addCourseToPlan","courseUnits","includes","substring","populateTerms","maxYears","prioritisedCourses","year","makePlan","plan","generatePlanScaffold","years","toString","DegreePlanner","state","onDragStart","result","onDragEnd","destination","source","droppableId","sourceYear","start","destinationYear","finish","startCourseIds","Array","from","splice","newStart","finishCourseIds","newFinish","newState","setState","newCourseIds","newTerm","nextProps","nextState","nextPropsSelectedCourses","propsSelectedCourses","as","textAlign","marginTop","keys","columns","termOrder","Column","key","allCourses","backgroundColor","checkTermAvailability","checkValidCourses","Term","snapshot","isDraggingOver","draggingOverWith","transition","total","reduce","colour","color","floating","showUnits","droppableProps","minHeight","checkPrerequisites","node","elements","selectedNodes","data","condition","match","hasOwnProperty","units_required","level_for_units_required","target","selectedList","selected","takenNode","core_year","zIndex","pointerEvents","opacity","top","memo","type","position","course_code","bottom","degree_name","HoverInfo","raw","exclusions","join","corequisites","unhoverPrerequisites","hoverEdges","edge","courseOptions","programOptions","code","programsJSON","degrees_involved","majors","honours","name","replacement","spec","specialisationsJSON","getMajors","minors","getMinors","DropdownDegrees","majorOptions","minorOptions","disabledPrimary","disabledSecondary","hiddenPrimary","hiddenSecondary","valProgram","valPrimary","valSecondary","phPrimary","phSecondary","chooseProgram","program","value","choosePrimary","chooseSecondary","minor","clickDone","Grid","centered","marginBottom","Row","Dropdown","selection","search","onChange","options","enabled","disabled","visibility","Button","onClick","nodeOptions","elementsList","dataJSON","text","DropdownSearch","useState","setSearch","updateTransform","useStoreActions","actions","prop","x","y","element","k","exampleReducer","action","open","dimmer","Error","SideBarModal","useReducer","undefined","dispatch","Modal","closeIcon","onClose","Header","Container","getSelectedCourses","specialisationCode","levels","structure","coreCourses","levelName","courseList","rawList","allCourseIds","getCoursesInLevel","flat","Segment","Label","compact","basic","Sidebar","handleClick","paddingLeft","paddingRight","Message","info","Divider","stretched","selector","animated","Content","visible","hidden","Icon","unselectNode","selectedEdges","selectableNodes","potentialEdges","unselectQueue","current","shift","unlockCourse","selectedEdgeAnimated","stroke","strokeWidth","selectedEdgeStatic","hoverEdge","potentialHoverEdge","potentialEdge","unselectedEdge","highlightElements","isEdge","background","backgroundColour","textColour","require","nodesData","isNode","edgesData","exclusionGroups","exclusionNodes","group","exclusion","onLoad","reactFlowInstance","last","pop","isHidden","setTransform","zoom","nodeTypes","custom1","CustomNode1","custom2","CustomNode2","header1","HeaderNode1","layoutStyle","overflowX","overflowY","width","height","BESengah","hoverDisplay","setElements","hoverText","setHoverText","hoverNode","setHoverNode","clickCount","singleClickTimer","layout","setLayout","selectUnselect","selectNode","selectedNode","selectable","selectableNode","unselectUnconnected","analyseNodesKeys","getSelectable","toggleExclusion","edges","newElements","prevCourse","curCourse","curNode","edgesList","getConnectedEdges","newEdgesList","edgesIds","newEdgesIds","newEdge","checkedEdges","hideEdge","newEdgeId","split","sourceNode","targetNode","exclusionSwap","divided","onMouseEnter","onMouseLeave","nodesConnectable","onElementClick","event","setTimeout","clearTimeout","minZoom","onNodeMouseEnter","prereqQueue","hoverPrerequisites","onNodeMouseLeave","selectNodesOnDrag","onNodeDragStop","elementsSelectable","initialElements","label","fitView","Teaching","els","nodesDraggable","nodeColor","n","concat","Math","random","window","innerWidth","innerHeight","App","basename","path","component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2e19168e.chunk.js","sourcesContent":["// Given an id, returns the element\r\nconst getElement = (id, elementsData) => {\r\n    //console.log(\"GET ELEMENT OF \" + id);\r\n    for (var e of elementsData) {\r\n        if (e.id === id) {\r\n            return e;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport default getElement;","import React from \"react\";\r\nimport { Label, Container } from 'semantic-ui-react'\r\n\r\nimport { Draggable } from \"react-beautiful-dnd\"\r\n\r\nexport default class Course extends React.Component {\r\n    render () {\r\n        return (\r\n            <Container>\r\n                <Draggable draggableId={this.props.course.id} index={this.props.index}>\r\n                    {provided => (\r\n                        <div>\r\n                            <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                                <Label style={{margin: \"5px\"}}>{this.props.course.content}</Label>\r\n                            </div>\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Draggable>\r\n            </Container>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Icon, Button, Container, Segment, Header, Label, Grid } from 'semantic-ui-react'\r\n\r\n// import programsJSON from \"../webscraper/programs.json\"\r\n// import specialisationsJSON from \"../webscraper/specialisations.json\"\r\nimport coursesJSON from \"../webscraper/courses.json\"\r\nimport specialisationsJSON from \"../webscraper/specialisations.json\"\r\n\r\nimport { DragDropContext } from \"react-beautiful-dnd\"\r\nimport Term from \"./degreeplanner-term\"\r\n\r\n\r\nconst getCourses = (selectedCourses) => {\r\n    const courses = {}\r\n\r\n    selectedCourses.forEach(c => {\r\n        if (!(c in coursesJSON)) return;\r\n        if (!(coursesJSON[c].terms)) {\r\n            console.log(\"no terms offered for\", c);\r\n            return;\r\n        }\r\n        const termsAvailable = coursesJSON[c].terms.map(term => {\r\n            if (term === \"Summer Term\") return \"TS\"\r\n            if (term === \"Term 1\") return \"T1\"\r\n            if (term === \"Term 2\") return \"T2\"\r\n            if (term === \"Term 3\") return \"T3\"\r\n        })\r\n\r\n        courses[c] = {\r\n            id: c,\r\n            content: `${c} - ${coursesJSON[c].course_name}`,\r\n            termsAvailable: termsAvailable,\r\n            units: coursesJSON[c].units\r\n        }\r\n    })\r\n\r\n    return courses\r\n}\r\n\r\nconst generateTerms = (yearId) => {\r\n    const terms = {}\r\n\r\n    // Terms have id of <YEAR>T<TERM TYPE> eg: 1TS is 1st Year, Summer Term\r\n\r\n    const TSKey = `${yearId}TS`;\r\n    const T1Key = `${yearId}T1`;\r\n    const T2Key = `${yearId}T2`;\r\n    const T3Key = `${yearId}T3`;\r\n    terms[\"termOrder\"] = [TSKey, T1Key, T2Key, T3Key];\r\n\r\n    terms[TSKey] = {\r\n        id: TSKey,\r\n        title: `Year ${yearId} - Summer Term`,\r\n        courseIds: []\r\n    }\r\n\r\n    terms[T1Key] = {\r\n        id: T1Key,\r\n        title: `Year ${yearId} - Term One`,\r\n        courseIds: []\r\n    }\r\n\r\n    terms[T2Key] = {\r\n        id: T2Key,\r\n        title: `Year ${yearId} - Term Two`,\r\n        courseIds: []\r\n    }\r\n\r\n    terms[T3Key] = {\r\n        id: T3Key,\r\n        title: `Year ${yearId} - Term Three`,\r\n        courseIds: []\r\n    }\r\n\r\n    return terms;\r\n}\r\n\r\nconst addPriority = (priority, courseId, unlocksCourse) => {\r\n    if (!(courseId in coursesJSON)) return priority;\r\n    if (!coursesJSON[courseId].conditions.prerequisites) return priority;\r\n\r\n    for (const prereq of coursesJSON[courseId].conditions.prerequisites) {\r\n        if (!(prereq in priority)) continue;\r\n        if (courseId === prereq) continue;\r\n\r\n        priority[prereq].unlocks.push(unlocksCourse);\r\n        priority = addPriority(priority, prereq, unlocksCourse);\r\n    }\r\n\r\n    return priority;\r\n}\r\n\r\nconst prioritiseCourses = (selectedCourses) => {\r\n    // Initiate priorities\r\n    var priority = {};\r\n    for (const courseId of selectedCourses) {\r\n        if (!(courseId in coursesJSON)) continue\r\n\r\n        priority[courseId] = {\r\n            courseId: courseId,\r\n            level: Number(courseId[4]),\r\n            unlocks: [],\r\n            termsAvailable: coursesJSON[courseId].terms ? coursesJSON[courseId].terms.filter(t => t != \"Summer Term\").length : 0\r\n        }\r\n    }\r\n\r\n    // Calculate priorities\r\n    for (const courseId of selectedCourses) {\r\n        priority = addPriority(priority, courseId, courseId);\r\n    }\r\n\r\n    // Sort keys of priority into array to give into prioritised\r\n    const prioritised = Object.values(priority);\r\n\r\n    prioritised.sort((a, b) => {\r\n        // Sort by:\r\n        // 1. Level (ASC)\r\n        // 2. Unlocks (DESC)\r\n        // 3. Terms Available (ASC)\r\n\r\n        if (a.level === b.level) {\r\n            if (a.unlocks.length === b.unlocks.length) {\r\n                return a.termsAvailable - b.termsAvailable; // Ascending\r\n            }\r\n            return b.unlocks.length - a.unlocks.length; // Descending\r\n        }\r\n        return a.level - b.level; // Ascending\r\n    });\r\n\r\n    return prioritised;\r\n}\r\n\r\nconst checkPrereqsMet = (termPlan, termId, courseId) => {\r\n    const REGEX_COURSE_CODE = /[A-Z]{4}\\d{4}/g;\r\n\r\n    let prereqsExecutable = coursesJSON[courseId].conditions.prereqs_executable;\r\n    if (!prereqsExecutable) return true; // No executable\r\n\r\n    // Get courses taken up to termId\r\n    const coursesTaken = [];\r\n    for (const t in termPlan) {\r\n        if (t === termId) break;\r\n        coursesTaken.push(...termPlan[t].courseIds);\r\n    }\r\n\r\n    for (const course of coursesTaken) {\r\n        prereqsExecutable = prereqsExecutable.replace(course, \"1\");\r\n    }\r\n    prereqsExecutable = prereqsExecutable.replace(REGEX_COURSE_CODE, \"0\");\r\n    return eval(prereqsExecutable);\r\n}\r\n\r\nconst addCourseToPlan = (termPlan, courseId) => {\r\n    const maxUOC = 18;\r\n\r\n    for (const termId in termPlan) {\r\n        if (termPlan[termId].units >= maxUOC) continue;\r\n\r\n        const courseUnits = coursesJSON[courseId].units;\r\n        if (termPlan[termId].units + courseUnits > maxUOC) continue;\r\n\r\n        if (!(coursesJSON[courseId].terms)) {\r\n            console.log(\"cannotfindterms for \", courseId);\r\n            continue;\r\n        }\r\n\r\n        const termsAvailable = coursesJSON[courseId].terms.map(term => {\r\n            if (term === \"Summer Term\") return \"TS\"\r\n            if (term === \"Term 1\") return \"T1\"\r\n            if (term === \"Term 2\") return \"T2\"\r\n            if (term === \"Term 3\") return \"T3\"\r\n        })\r\n        if (!(termsAvailable.includes(termId.substring(1, 3)))) continue;\r\n\r\n        // Need to check prerequisites have been met here\r\n        if (!checkPrereqsMet(termPlan, termId, courseId)) continue;\r\n\r\n        // Add course to plan\r\n        termPlan[termId].units += coursesJSON[courseId].units;\r\n        termPlan[termId].courseIds.push(courseId);\r\n        return termPlan;\r\n    }\r\n\r\n    console.log(\"ERROR WITH \", courseId); // TODO: put in a \"error\" segment\r\n}\r\n\r\nconst populateTerms = (maxYears, prioritisedCourses) => {\r\n    const maxTerms = 3;\r\n\r\n    const termPlan = {};\r\n    for (let year = 1; year <= maxYears; year++) {\r\n        for (let term = 1; term <= maxTerms; term++) {\r\n            const termId = `${year}T${term}`;\r\n            termPlan[termId] = {\r\n                units: 0,\r\n                courseIds: []\r\n            };\r\n        }\r\n    }\r\n\r\n    // For each course in the prioritised, slot into earliest possible term\r\n    for (const course of prioritisedCourses) {\r\n        addCourseToPlan(termPlan, course.courseId);\r\n    }\r\n\r\n    return termPlan;\r\n}\r\n\r\nconst makePlan = (plan, maxYears, selectedCourses) => {\r\n    const prioritisedCourses = prioritiseCourses(selectedCourses);\r\n\r\n    const termPlan = populateTerms(maxYears, prioritisedCourses);\r\n\r\n    for (const termId in termPlan) {\r\n        const year = termId[0];\r\n        plan[year][termId].courseIds = termPlan[termId].courseIds\r\n    }\r\n\r\n    return plan;\r\n}\r\n\r\nconst generatePlanScaffold = (years, selectedCourses) => {\r\n    let plan = {};\r\n\r\n    for (let year = 1; year <= years; year++) {\r\n        plan[year.toString()] = generateTerms(year)\r\n    }\r\n\r\n    plan = makePlan(plan, years, selectedCourses)\r\n\r\n    return plan;\r\n}\r\n\r\nclass DegreePlanner extends React.Component {\r\n    state = {\r\n        courses: getCourses(this.props.selectedCourses),\r\n        selectedCourses: this.props.selectedCourses,\r\n        plan: generatePlanScaffold(4, this.props.selectedCourses)\r\n    };\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        const { selectedCourses: nextPropsSelectedCourses } = nextProps;\r\n        const { selectedCourses: propsSelectedCourses } = this.props;\r\n        \r\n        const { selectedCourses } = this.state;\r\n\r\n        if (nextPropsSelectedCourses !== propsSelectedCourses && nextPropsSelectedCourses !== selectedCourses) {\r\n            console.log(\"UPDATE!!!!\");\r\n            console.log(nextProps);\r\n            console.log(nextState);\r\n            this.setState({\r\n                courses: getCourses(nextPropsSelectedCourses),\r\n                selectedCourses: nextPropsSelectedCourses,\r\n                plan: generatePlanScaffold(4, nextPropsSelectedCourses)\r\n            });\r\n        }\r\n\r\n        return selectedCourses !== nextState.selectedCourses;\r\n    }\r\n\r\n\r\n    onDragStart = result => {\r\n        const { draggableId } = result;\r\n    };\r\n\r\n    onDragEnd = result => {\r\n        const { destination, source, draggableId } = result;\r\n\r\n        // Null destination means label was not dragged into a droppable\r\n        if (!destination) return;\r\n\r\n        // Label was dragged into the same position\r\n        if (destination.droppableId === source.droppableId && destination.index === source.index) return;\r\n\r\n        const sourceYear = source.droppableId[0];\r\n        const start = this.state.plan[sourceYear][source.droppableId];\r\n        const destinationYear = destination.droppableId[0];\r\n        const finish = this.state.plan[destinationYear][destination.droppableId];\r\n\r\n        if (start === finish) {\r\n            const newCourseIds = Array.from(start.courseIds);\r\n            newCourseIds.splice(source.index, 1); // Remove 1 item at source.index\r\n            newCourseIds.splice(destination.index, 0, draggableId); // Insert dragggableId into destination\r\n            const newTerm = {\r\n                ...start,\r\n                courseIds: newCourseIds\r\n            };\r\n\r\n            const newState = {\r\n                ...this.state,\r\n                plan: {\r\n                    ...this.state.plan,\r\n                    [sourceYear]: {\r\n                        ...this.state.plan[sourceYear],\r\n                        [newTerm.id]: newTerm,\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setState(newState);\r\n            return;\r\n        }\r\n\r\n        // Moving from one list to another\r\n        const startCourseIds = Array.from(start.courseIds)\r\n        startCourseIds.splice(source.index, 1);\r\n\r\n        const newStart = {\r\n            ...start,\r\n            courseIds: startCourseIds,\r\n        }\r\n\r\n        const finishCourseIds = Array.from(finish.courseIds)\r\n        finishCourseIds.splice(destination.index, 0, draggableId);\r\n\r\n        const newFinish = {\r\n            ...finish,\r\n            courseIds: finishCourseIds\r\n        }\r\n\r\n        const newState = this.state;\r\n        newState.plan[sourceYear][newStart.id] = newStart;\r\n        newState.plan[destinationYear][newFinish.id] = newFinish;\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    render() {\r\n        // this.state.courses = getCourses(this.props.selectedCourses);\r\n        // this.state.plan = generatePlanScaffold(4, this.props.selectedCourses);\r\n        return (\r\n            <Segment>\r\n                <Container>\r\n                    <Header as=\"h2\" textAlign=\"center\" style={{marginTop: \"50px\"}}>Plan your degree</Header>\r\n                    <p>The following degree plan has been generated based on the courses you have selected above. By default, our algorithm:</p>\r\n                    <ul>\r\n                        <li>allocates 18 UOC per term</li>\r\n                        <li>ensures courses have their prerequisites met</li>\r\n                        <li>ensures courses are offered in allocated terms</li>\r\n                        <li>does not allocate courses in Summer Term</li>\r\n                    </ul>\r\n\r\n                    <p>Drag and drop the courses below to further customise your degree plan!</p>\r\n\r\n                    <p><em>Please note that our data is scraped from the UNSW Handbook and may have some inconsistencies.</em></p>\r\n                    <p><em>Also note, you can drag a course into a term even if it is not offered as our data may be out of date, please double check :) </em></p>\r\n\r\n                    <DragDropContext onDragEnd={this.onDragEnd} onDragStart={this.onDragStart}>\r\n                        {Object.keys(this.state.plan).map(yearId => (\r\n                            <Grid columns={4}>\r\n                                {this.state.plan[yearId].termOrder.map(termId => {\r\n                                    const term = this.state.plan[yearId][termId];\r\n                                    const courses = term.courseIds.map(courseId => this.state.courses[courseId]);\r\n                                    return (\r\n                                        <Grid.Column>\r\n                                            <Term key={term.id} term={term} courses={courses} allCourses={this.state.courses}/>\r\n                                        </Grid.Column>\r\n                                    );\r\n                                })}\r\n                            </Grid>\r\n                        ))}\r\n                    </DragDropContext>\r\n                    <Segment style={{backgroundColor: \"lightpink\"}}>\r\n                        <Header as=\"h3\">Error messages</Header>\r\n                        <p>None</p>\r\n                    </Segment>\r\n                </Container>\r\n            </Segment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DegreePlanner","import React from \"react\";\r\nimport { Container, Segment, Header, Label } from 'semantic-ui-react'\r\n\r\nimport Course from \"./degreeplanner-course\"\r\n\r\nimport { Droppable } from \"react-beautiful-dnd\"\r\n\r\nconst SUCCESS = \"#e5fbe5\";\r\nconst ERROR = \"#ffebeb\";\r\n\r\nconst checkTermAvailability = (props, courseId) => {\r\n    const termId = props.term.id.substring(1, 3);\r\n    const termAvailability = props.allCourses[courseId].termsAvailable;\r\n\r\n    return termAvailability.includes(termId) ? SUCCESS : ERROR;\r\n}\r\n\r\nconst checkValidCourses = (props) => {\r\n    const termId = props.term.id.substring(1, 3);\r\n\r\n    for (const courseId of props.term.courseIds) {\r\n        if (!props.allCourses[courseId].termsAvailable.includes(termId)) {\r\n            return ERROR\r\n        }\r\n    }\r\n    return \"white\"\r\n}\r\n\r\nconst showUnits = (props) => {\r\n    const total = props.term.courseIds.reduce((total, courseId) => total + props.allCourses[courseId].units, 0);\r\n    const partTime = 12;\r\n    const fullTime = 18;\r\n\r\n    let colour = \"\"\r\n    if (total === 0) {\r\n        colour = \"grey\";\r\n    } else if (total < partTime) {\r\n        colour = \"orange\";\r\n    } else if (total < fullTime) {\r\n        colour = \"blue\";\r\n    } else if (total === fullTime) {\r\n        colour = \"teal\";\r\n    } else {\r\n        colour = \"red\";\r\n    }\r\n\r\n    return <Label color={colour} floating style={{transition: \"0.2s ease\"}}>{total}</Label>;\r\n}\r\n\r\nexport default class Term extends React.Component {\r\n    render () {\r\n        return (\r\n            <Container>\r\n                <Droppable droppableId={this.props.term.id}>\r\n                    {(provided, snapshot) => (\r\n                        <Segment style={{backgroundColor: snapshot.isDraggingOver ? checkTermAvailability(this.props, snapshot.draggingOverWith) : checkValidCourses(this.props), transition: \"0.2s ease\"}}>\r\n                            <Header as=\"h4\">{this.props.term.title}</Header>\r\n                            {showUnits(this.props)}\r\n                            {/* {getTermTitle(this.props)} */}\r\n                            <div ref={provided.innerRef} {...provided.droppableProps} style={{minHeight: \"150px\"}}>\r\n                                {this.props.courses.map((course, index) => <Course key={course.id} course={course} index={index} />)}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        </Segment>\r\n                    )}\r\n                </Droppable>\r\n            </Container>\r\n        )\r\n    }\r\n}","// Returns true if all prerequisites are met for a given node\r\n// Returns false if prerequisites are not met for a given node\r\n// Will only analyse targets of potential edges\r\n\r\nimport Course from \"./degreeplanner-course\";\r\n\r\nimport getElement from './getelement.js';\r\n\r\n// NOTE: Assumes that source of potential edges are always selected\r\nexport default function checkPrerequisites(node, elements, selectedNodes) {\r\n    if (node.data.conditions.prerequisites !== null && node.data.conditions.prereqs_executable !== null) {\r\n        // Evaluate the condition\r\n        //console.log(\"HERE\");\r\n        //console.log(node.data.conditions.prereqs_executable);\r\n        var condition = node.data.conditions.prereqs_executable;\r\n        //console.log(condition);\r\n        condition = condition.replace(/[A-Z]{4}[A-Z0-9]+/gi, function(match) {\r\n            //console.log(match);\r\n            if (selectedNodes.hasOwnProperty(match)) {\r\n                return 1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        });\r\n        if (eval(condition)) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    } else {\r\n        // Check if units required exists\r\n        if (node.data.conditions.units_required !== null) {\r\n            if (node.data.conditions.level_for_units_required === null) {\r\n                //console.log(\"LEVEL FOR UNITS\", node.id);\r\n                // See if we meet the total for this course\r\n                var total = 0;\r\n                const target = node.data.conditions.units_required;\r\n                const selectedList = Object.keys(selectedNodes);\r\n                //console.log(selectedNodes);\r\n                for (const selected of selectedList) {\r\n                    if (selected === node.id) continue; // The node can't include itself\r\n\r\n                    const takenNode = getElement(selected, elements);\r\n                    total += takenNode.data.units;\r\n                    //console.log(node.id + \"=\" + node.data.units);\r\n                }\r\n\r\n                if (total >= target) {\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n        } else if (node.data.conditions.core_year !== null) {\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return true;\r\n\r\n    // TODO: Check for corerequsiites and exclusion courses as well\r\n    // TODO: Check for completion of units and core_year\r\n\r\n    // Check if these nodes are enough to satisfy prerequisites\r\n    // Get the prerequisite condition and replace courses by 1 if they have been\r\n    // selected and 0 if they have not.\r\n    \r\n\r\n}\r\n\r\n\r\n","// For normal nodes\r\nimport React, { memo } from 'react';\r\n\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nconst style = {zIndex: -9999, pointerEvents: 'none', opacity: 0, top: '50%'};\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={style} />\r\n      <div>\r\n            <b>{data.course_code}</b>\r\n      </div>\r\n      <Handle type=\"source\" position=\"bottom\" style={style} />\r\n    </>\r\n  );\r\n});\r\n","// For grouping nodes\r\nimport React, { memo } from 'react';\r\n\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={{zIndex: -9999, pointerEvents: 'none', opacity: 0, top: '50%'}} />\r\n      <div>\r\n          <b>{data.id}</b>\r\n      </div>\r\n      <Handle type=\"source\" position=\"bottom\" style={{zIndex: -9999, pointerEvents: 'none', opacity: 0, bottom: '50%'}} />\r\n    </>\r\n  );\r\n});\r\n","import React, { memo } from 'react';\r\n\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={{opacity: 0, top: '50%'}} />\r\n      <div>\r\n            <b>{data.degree_name}</b>\r\n      </div>\r\n      <Handle type=\"source\" position=\"bottom\" style={{opacity: 0, bottom: '50%'}} />\r\n    </>\r\n  );\r\n});\r\n","// Displays hover text in top left corner which contains info about the course\r\nimport React from 'react';\r\nimport '../styles/hover.css';\r\n\r\nexport default function HoverInfo(props) {\r\n    console.log(props);\r\n    return (\r\n        <div id=\"hoverbox\">\r\n            <div id=\"header\">\r\n                {props.node.data.course_name}\r\n            </div>\r\n            {props.node.data.conditions.raw !== null &&             \r\n            <div id=\"exclusion\">\r\n                <b>Prereqs: </b>{props.node.data.conditions.raw}\r\n            </div>}\r\n            {props.node.data.exclusions !== null &&             \r\n            <div id=\"exclusion\">\r\n                <b>Excl: </b>{props.node.data.exclusions.join(\", \")}\r\n            </div>}\r\n            {props.node.data.corequisites !== null &&             \r\n            <div id=\"corequisites\">\r\n                <b>Coreqs: </b>{props.node.data.corequisites}\r\n            </div>}\r\n        </div>\r\n    );\r\n}","// HELPER FUNCTION to delete prerequisite edges\r\n// Usually used after unhovering or onclick\r\nexport default function unhoverPrerequisites(hoverEdges) {\r\n    for (var edge in hoverEdges) {\r\n        delete hoverEdges[edge];\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Button, Dropdown, Grid } from 'semantic-ui-react'\r\n\r\nimport programsJSON from \"../webscraper/programs.json\"\r\nimport specialisationsJSON from \"../webscraper/specialisations.json\"\r\n\r\nconst MAJORS = 1;\r\nconst MINORS = 2;\r\nconst HONOURS = 3;\r\n\r\nconst courseOptions = {}\r\nconst programOptions = []\r\n\r\nfor (const code in programsJSON) {\r\n    if (programsJSON[code].degrees_involved.majors.length === 0 && programsJSON[code].degrees_involved.honours.length === 0) continue;\r\n\r\n    programOptions.push({\r\n        \"key\": code,\r\n        \"value\": code,\r\n        \"text\": code + \" - \" + programsJSON[code].name\r\n    })\r\n\r\n    courseOptions[code] = programsJSON[code].degrees_involved\r\n}\r\n\r\nfor (const code in courseOptions) {\r\n    for (const type in courseOptions[code]) {\r\n\r\n        const replacement = [];\r\n        for (const spec of courseOptions[code][type]) {\r\n            if (!(spec in specialisationsJSON)) continue;\r\n            replacement.push({\r\n                \"key\": spec,\r\n                \"value\": spec,\r\n                \"text\": spec + \" - \" + specialisationsJSON[spec].name\r\n            })\r\n        }\r\n        courseOptions[code][type] = replacement;\r\n    }\r\n}\r\n\r\n// returns MAJORS if Majors but no Minors\r\n// returns MINORS if Majors and Minors exist\r\n// returns HONOURS if Honours exist\r\nconst getMajors = (code) => {\r\n    if (!(code in courseOptions)) {\r\n        console.log(\"code not found in majors\", code);\r\n        return [];\r\n    }\r\n\r\n    if (courseOptions[code].honours.length) return [HONOURS, courseOptions[code].honours];\r\n    if (courseOptions[code].minors.length) return [MINORS, courseOptions[code].majors];\r\n    return [MAJORS, courseOptions[code].majors];\r\n}\r\n\r\nconst getMinors = (code) => {\r\n    if (!(code in courseOptions)) {\r\n        console.log(\"code not found in minors\", code);\r\n        return [];\r\n    }\r\n\r\n    return courseOptions[code].minors;\r\n}\r\n\r\nclass DropdownDegrees extends Component {\r\n    state = {\r\n        programOptions: programOptions,\r\n        majorOptions: [],\r\n        minorOptions: [],\r\n\r\n        disabledPrimary: true,\r\n        disabledSecondary: true,\r\n        hiddenPrimary: 'hidden',\r\n        hiddenSecondary: 'hidden',\r\n\r\n        valProgram: null,\r\n        valPrimary: null,\r\n        valSecondary: null,\r\n\r\n        phPrimary: \"Select\",\r\n        phSecondary: \"N/A\"\r\n    }\r\n\r\n    chooseProgram = (e, program) => {\r\n        const [type, majors] = getMajors(program.value)\r\n        console.log(program.value)\r\n        this.setState({\r\n            valProgram: program.value,\r\n\r\n            valPrimary: null,\r\n            disabledPrimary: false,\r\n            hiddenPrimary: 'visible',\r\n            majorOptions: majors,\r\n            phPrimary: \"Select Major\",\r\n\r\n            valSecondary: null,\r\n            disabledSecondary: true,\r\n            hiddenSecondary: 'hidden',\r\n            minorOptions: [],\r\n            phSecondary: \"N/A\"\r\n        })\r\n\r\n        if (type === HONOURS) this.setState({phPrimary: \"Select Honour\"})\r\n        else if (type === MAJORS) this.setState({phPrimary: \"Select Major\"})\r\n        else {\r\n            this.setState({\r\n                phPrimary: \"Select Major\",\r\n                phSecondary: \"Select Minor\",\r\n                minorOptions: getMinors(program.value),\r\n                disabledSecondary: false,\r\n                hiddenSecondary: 'visible',\r\n            });\r\n        }\r\n    }\r\n\r\n    choosePrimary = (e, spec) => {\r\n        this.setState({\r\n            valPrimary: spec.value\r\n        })\r\n    }\r\n\r\n    chooseSecondary = (e, minor) => {\r\n        this.setState({\r\n            valSecondary: minor.value\r\n        })\r\n    }\r\n\r\n    clickDone = () => {\r\n        console.log('Running click')\r\n        // console.log(this.state)\r\n        console.log(this.state.valProgram, this.state.valPrimary, this.state.valSecondary)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <Grid centered style={{marginBottom: \"20px\"}}> \r\n                <Grid.Row>  \r\n                    <Dropdown\r\n                        selection\r\n                        search\r\n                        onChange={this.chooseProgram}\r\n                        options= {this.state.programOptions}\r\n                        enabled\r\n                        placeholder= 'Select Program'\r\n                    />\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Dropdown\r\n                        selection\r\n                        search\r\n                        onChange={this.choosePrimary}\r\n                        options= {this.state.majorOptions}\r\n                        disabled= {this.state.disabledPrimary}\r\n                        value= {this.state.valPrimary}\r\n                        placeholder= {this.state.phPrimary}\r\n                        style={{visibility: this.state.hiddenPrimary}}\r\n                    />\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Dropdown\r\n                        selection\r\n                        search\r\n                        onChange={this.chooseSecondary}\r\n                        options= {this.state.minorOptions}\r\n                        disabled= {this.state.disabledSecondary}\r\n                        value= {this.state.valSecondary}\r\n                        placeholder= {this.state.phSecondary}\r\n                        style={{visibility: this.state.hiddenSecondary}}\r\n                    />\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Button\r\n                    onClick={this.clickDone}\r\n                    color=\"red\"\r\n                    >Done! Print to console</Button>\r\n                </Grid.Row>\r\n            </Grid>\r\n            \r\n\r\n        </>;\r\n    }\r\n}\r\n\r\nexport default DropdownDegrees\r\n\r\n{/* <Button\r\nanimated=\"vertical\"\r\ncolor=\"red\"\r\n>\r\n<Button.Content visible>Generate degree planner</Button.Content>\r\n<Button.Content hidden>\r\n    <Icon name=\"arrow down\" />\r\n</Button.Content>\r\n</Button> */}","import React, { useState } from 'react'\r\nimport { Button, Dropdown, Grid } from 'semantic-ui-react'\r\nimport { useStoreActions } from 'react-flow-renderer';\r\nimport dataJSON from '../maps/EngineeringHonoursSoftware/data.json'\r\nimport getElement from './getelement.js'\r\n\r\nconst nodeOptions = [];\r\nconst elementsList= [];\r\n\r\nfor (const code in dataJSON) {\r\n    const id = dataJSON[code].id;\r\n    //console.log(\"Printing id\", id);\r\n    if (id.includes('-')) continue;\r\n\r\n    elementsList.push(\r\n        dataJSON[code]\r\n    )\r\n    nodeOptions.push({\r\n        key: id,\r\n        value: id,\r\n        text: id\r\n    })\r\n}\r\n\r\nconsole.log(\"Printing NodeOptions\", nodeOptions);\r\n\r\nexport default function DropdownSearch() { \r\n    const [search, setSearch] = useState(null);\r\n    \r\n    /*state = {\r\n        search: null,\r\n        getOptions: nodeOptions\r\n    }*/\r\n\r\n    const handleChange = (e, prop) => {\r\n        setSearch(prop.value);\r\n    }\r\n\r\n    const { updateTransform }  = useStoreActions((actions) => actions);\r\n    const transformUpdater = (x, y, zoom) => {\r\n        updateTransform({x, y, k: zoom});\r\n    };\r\n\r\n\r\n    const clickDone = () => {\r\n        console.log(\"CLICKED DONE FOR DDS\");\r\n        const element = getElement(search, elementsList);\r\n        transformUpdater(-element.position.x + 600, -element.position.y + 350, 1);\r\n    }\r\n\r\n        return <>\r\n            <Grid centered style={{marginBottom: \"20px\"}}>\r\n                <Grid.Row>\r\n                    <Dropdown\r\n                        selection\r\n                        search\r\n                        options={nodeOptions}\r\n                        placeholder='Search Course Node'\r\n                        onChange={handleChange}\r\n                        value={search}\r\n                    />\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Button\r\n                    onClick={clickDone}\r\n                    color=\"red\"\r\n                    >Find!</Button>\r\n                </Grid.Row>\r\n            </Grid>\r\n        </>;\r\n\r\n\r\n}\r\n","import React, { useState } from \"react\";\r\nimport DropdownDegrees from \"./dropdownDegrees.js\"\r\nimport DropdownSearch from \"./dropdownsearch.js\"\r\nimport { Icon, Button, Container, Modal, Header, Dropdown, Grid, Message } from 'semantic-ui-react'\r\n\r\nfunction exampleReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'OPEN_MODAL':\r\n      return { open: true, dimmer: action.dimmer }\r\n    case 'CLOSE_MODAL':\r\n      return { open: false }\r\n    default:\r\n      throw new Error()\r\n  }\r\n}\r\n\r\nfunction SideBarModal() {\r\n  const [state, dispatch] = React.useReducer(exampleReducer, {\r\n    open: false,\r\n    dimmer: undefined,\r\n  })\r\n  const { open, dimmer } = state\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        onClick={() => dispatch({ type: 'OPEN_MODAL', dimmer: 'blurring' })}\r\n      >\r\n        Click on Me :) \r\n      </Button>\r\n\r\n      <Modal\r\n        closeIcon\r\n        dimmer={dimmer}\r\n        open={open}\r\n        onClose={() => dispatch({ type: 'CLOSE_MODAL' })}\r\n      >\r\n        <Modal.Header textAlign=\"center\">Degree Planner</Modal.Header>\r\n        <Container>\r\n            <Header as=\"h3\" textAlign=\"center\" style={{marginTop: \"5px\"}}>Choose your degree</Header>\r\n            <DropdownDegrees />\r\n        </Container>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SideBarModal\r\n\r\n//DropdownDegrees.clickDone() \r\n\r\n//DropdownDegrees d = new DropdownDegrees(); \r\n//d.clickDone()","import React from 'react';\r\nimport SidebarModal from \"./sidebar-modal.js\";\r\nimport { Icon, Button, Container, Header, Divider, Grid, Segment, Message, Label } from 'semantic-ui-react';\r\nimport ScrollTo from \"react-scroll-into-view\";\r\nimport specialisationsJSON from \"../webscraper/specialisations.json\";\r\nimport coursesJSON from \"../webscraper/courses.json\";\r\n\r\nconst REGEX_COURSE_CODE = /[A-Z]{4}\\d{4}/g;\r\n\r\nconst getCoursesInLevel = (rawList) => {\r\n    rawList = rawList.filter(c => c != \"ANY COURSE\");\r\n    const allCourseIds = Object.keys(coursesJSON);\r\n    const courseList = [];\r\n    rawList.forEach(courseId => {\r\n        if (courseId.match(REGEX_COURSE_CODE)) {\r\n            courseList.push(courseId);\r\n        } else if (courseId.match(/^[A-Z]{4}\\d$/)) {\r\n            const relevantCourses = allCourseIds.filter(c => c.includes(courseId));\r\n            relevantCourses.forEach(c => {\r\n                if (courseList.includes(c)) return;\r\n                courseList.push(c);\r\n            });\r\n        }\r\n    });\r\n\r\n    return courseList;\r\n}\r\n\r\nconst getSelectedCourses = (specialisationCode, selectedNodes) => {\r\n    const levels = Object.keys(specialisationsJSON[specialisationCode].structure);\r\n    const coreCourses = [];\r\n\r\n    return levels.filter(levelName => {\r\n        const courseList = specialisationsJSON[specialisationCode].structure[levelName].courses;\r\n        if (!courseList) return false;\r\n        if (courseList.length === 1 && courseList.includes(\"ANY COURSE\")) return false;\r\n        return true;\r\n    }).map(levelName => {\r\n        const rawList = specialisationsJSON[specialisationCode].structure[levelName].courses.flat();\r\n        const courseList = getCoursesInLevel(rawList);\r\n        if (levelName.match(/[Cc]ore/g)) {\r\n            // CORE COURSE\r\n            courseList.forEach(c => coreCourses.push(c));\r\n            return (\r\n                <Segment color=\"red\">\r\n                    <Header as=\"h5\">{levelName}</Header>\r\n                    {courseList.map(c => c in selectedNodes ? <Label compact color=\"grey\">{c}</Label> : <Label compact color=\"grey\" basic>{c}</Label>)}\r\n                </Segment>\r\n            )\r\n        } else {\r\n            // Not core course. Render segment with chosen electives only.\r\n            return (\r\n                <Segment>\r\n                    <Header as=\"h5\">{levelName}</Header>\r\n                    {courseList.filter(c => (c in selectedNodes && !coreCourses.includes(c))).map(c => <Label compact color=\"grey\">{c}</Label>)}\r\n                </Segment>\r\n            )\r\n        }\r\n    })\r\n\r\n    // return coursesInThisSpecialisation.map(c => (c in selectedNodes) ? (<Label color=\"teal\" style={{margin: \"2px\"}}>{c}</Label>) : (<Label style={{margin: \"2px\"}}>{c}</Label>));\r\n}\r\n\r\nclass Sidebar extends React.Component {\r\n\r\n    handleClick = () => {\r\n        console.log(\"CLICKED!\")\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container style={{paddingLeft: \"10px\", paddingRight: \"10px\"}}>\r\n                <Header as=\"h1\" textAlign=\"center\" style={{marginTop: \"10px\"}}>Circles</Header>\r\n                <Message info>\r\n                    <p>Circles is a visual degree planner for UNSW students. Choose your program and degree below to begin!</p>\r\n                    <SidebarModal />\r\n                </Message>\r\n                <Divider></Divider>\r\n                <Grid stretched>\r\n                    <Grid.Row>\r\n                        <Container>\r\n                            <Header as=\"h3\" textAlign=\"center\">Your selected courses</Header>\r\n                            {getSelectedCourses(\"SENGAH\", this.props.selectedNodes)}\r\n                        </Container>\r\n                    </Grid.Row>\r\n\r\n                    <Container textAlign=\"center\">\r\n                        <ScrollTo selector=\"#DegreePlanner\">\r\n                            <Button\r\n                                animated=\"vertical\"\r\n                                color=\"red\"\r\n                                onClick={this.handleClick}\r\n                            >\r\n                                <Button.Content visible>Generate degree planner</Button.Content>\r\n                                <Button.Content hidden>\r\n                                    <Icon name=\"arrow down\" />\r\n                                </Button.Content>\r\n                            </Button>\r\n                        </ScrollTo>\r\n\r\n                    </Container>\r\n                </Grid>\r\n            </Container>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Sidebar","// HELPER FUNCTION for unselecting nodes\r\n// Given a selected node, unselects it and pushes it onto a queue to be analysed\r\n// ==================ON THE QUEUE==========================\r\n// Unshift node and Manages its prerequisites as follows:\r\n//  - if the prereq node is selected, turn selected edges into potential edges\r\n//  - if otherwise, do nothing\r\n// Determine the status of the current node:\r\n//  - if it meets prerequisites, leave it as is.\r\n//  - if it does not meet prerequisites, make it unselectable (delete from selectable/selected)\r\n// For each unlock:\r\n// - if the current node is not selected, turn edge grey no matter what\r\n// - if the current node is selected, keep edge as it is\r\n// - push the unlock onto queue if it was selectable/selected\r\nimport getElement from './getelement.js';\r\nimport checkPrerequisites from './checkprerequisites.js';\r\n\r\nexport default function unselectNode(elements, node, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    // Unselect this node\r\n    delete selectedNodes[node.id];\r\n    var unselectQueue = [node.id];\r\n    while (unselectQueue.length !== 0) {\r\n        // Unshift and get the node\r\n        const current = getElement(unselectQueue.shift(), elements);\r\n        \r\n        // Analyse its prerequisites\r\n        // If the prereq node is selected, turn selected edge into potential edges\r\n        if (current.data.conditions.prerequisites !== null) {\r\n            for (const prereq of current.data.conditions.prerequisites) {\r\n                if (selectedNodes.hasOwnProperty(prereq)) {\r\n                    if (selectedEdges.hasOwnProperty('e' + prereq + '-' + current.id)) {\r\n                        delete selectedEdges['e' + prereq + '-' + current.id];\r\n                        potentialEdges['e' + prereq + '-' + current.id] = 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Determine the status of the current node\r\n        if (! checkPrerequisites(current, elements, selectedNodes)) {\r\n            // Does not meet prerequisites. Make it unselectable\r\n            if (selectableNodes.hasOwnProperty(current.id)) delete selectableNodes[current.id];\r\n            else if (selectedNodes.hasOwnProperty(current.id)) delete selectedNodes[current.id];\r\n        } else {\r\n            // Meets prerequisites. Make it selectable\r\n            if (selectedNodes.hasOwnProperty(current.id)) delete selectedNodes[current.id];\r\n            selectableNodes[current.id] = 1;\r\n        }\r\n\r\n        // Analyse its unlocks\r\n        if (current.data.unlocks !== null) {\r\n            for (const unlockCourse of current.data.unlocks) {\r\n                if (! selectedNodes.hasOwnProperty(current.id)) {\r\n                    // Make edge grey\r\n                    if (potentialEdges.hasOwnProperty('e' + current.id + '-' + unlockCourse)) delete potentialEdges['e' + current.id + '-' + unlockCourse];\r\n                    else if (selectedEdges.hasOwnProperty('e' + current.id + '-' + unlockCourse)) delete selectedEdges['e' + current.id + '-' + unlockCourse];\r\n                }\r\n\r\n                // Lets push everything no matter what and try it out\r\n                unselectQueue.push(unlockCourse);\r\n                /*if (selectedNodes.hasOwnProperty(unlockCourse) || selectableNodes.hasOwnProperty(unlockCourse)) {\r\n                    unselectQueue.push(unlockCourse);\r\n                }*/\r\n            }\r\n        }\r\n    }\r\n}","// Helper functions to highlight nodes and edges\r\n// Will highlight/unhighlight nodes based on selectedNodes dictionary\r\nimport { isEdge } from \"react-flow-renderer\";\r\n\r\nconst selectedEdgeAnimated = {\r\n    stroke: \"#e94646\",\r\n    strokeWidth: 5,\r\n    opacity: 1,\r\n}\r\nconst selectedEdgeStatic = {\r\n    stroke: \"#e94646\",\r\n    strokeWidth: 5,\r\n    opacity: 1,\r\n}\r\n\r\nconst hoverEdge = {\r\n    stroke: \"ad66d1\",\r\n    strokeWidth: 3,\r\n    opacity: 1,\r\n}\r\n\r\nconst potentialHoverEdge = {\r\n    stroke: \"#3594e7\",\r\n    strokeWidth: 3,\r\n    opacity: 1,\r\n}\r\nconst potentialEdge = {\r\n    stroke: \"3594e7\",\r\n    strokeWidth: 1,\r\n    opacity: 0.3,\r\n}\r\n\r\nconst unselectedEdge = {\r\n    stroke: \"grey\",\r\n    strokeWidth: 1,\r\n    opacity: 0.2\r\n}\r\n\r\nexport default function highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges) {\r\n    const newElements = elements.map((e) => {\r\n        // It is an edge\r\n        if (isEdge(e)) {\r\n            if (selectedEdges.hasOwnProperty(e.id)) {\r\n                if (hoverEdges.hasOwnProperty(e.id)) return {...e, style: selectedEdgeAnimated, animated: true};\r\n                else return {...e, style: selectedEdgeStatic, animated: false};\r\n            } else if (potentialEdges.hasOwnProperty(e.id)) {\r\n                if (hoverEdges.hasOwnProperty(e.id)) return {...e, style: potentialHoverEdge, animated: true};\r\n                else return {...e, style: potentialEdge, animated: false};\r\n            } else if (hoverEdges.hasOwnProperty(e.id)) {\r\n                return {...e, style: hoverEdge, animated: true};\r\n            } else {\r\n                return {...e, style: unselectedEdge, animated: false};\r\n            } \r\n        }\r\n\r\n        // It is a node\r\n        if (selectedNodes.hasOwnProperty(e.id)) {\r\n            if (e.style.background === 'white') {\r\n                // It was previously a selectable node. Adjust colours accordingly\r\n                const backgroundColour = e.style.color;\r\n                return {...e, style: {...e.style, color: 'white', background: backgroundColour, filter: 'brightness(1.15)'}}\r\n            } else {\r\n                // It was an unselected node or an already selected node. Simply make sure its brightness is adjusted\r\n                return {...e, style: {...e.style, filter: 'brightness(1.15)'}};\r\n            }\r\n        } else if (selectableNodes.hasOwnProperty(e.id)) {\r\n            if (e.style.background === 'white') {\r\n                // It was already a selectable node. Do not need to adjust\r\n                return {...e};\r\n            } else {\r\n                // It was an unselected node or an already selected node. Adjust text colour and background\r\n                const textColour = e.style.background;\r\n                return {...e, style: {...e.style, color: textColour, background: 'white', filter: 'brightness(1.15)'}};\r\n            }\r\n        } else {\r\n            if (e.style.background === 'white') {\r\n                // It was a selectable node previously. Adjust colours accordingly\r\n                const backgroundColour = e.style.color;\r\n                return {...e, style: {...e.style, color: 'white', background: backgroundColour, filter: 'brightness(0.65)'}}; \r\n            } else {\r\n                // It was either unselected or an already selected node. Simply adjust brightness\r\n                return {...e, style: {...e.style, filter: 'brightness(0.65)'}};\r\n            }\r\n        }\r\n    })\r\n\r\n    return newElements;\r\n}","import React, {useState} from 'react';\r\nimport ReactFlow, {Background, Controls, getConnectedEdges, isNode, isEdge, useStoreState, useStoreActions, ReactFlowProvider, EdgeText} from 'react-flow-renderer';\r\n\r\nimport CustomNode1 from '../../components/customnode1.js';\r\nimport CustomNode2 from '../../components/customnode2.js';\r\nimport HeaderNode1 from '../../components/headernode1.js';\r\n\r\nimport HoverInfo from '../../components/hoverinfo.js';\r\nimport hoverPrerequisites from '../../components/hoverprerequisites.js';\r\nimport unhoverPrerequisites from '../../components/unhoverprerequisites.js';\r\n\r\nimport DropdownD from \"../../components/dropdownDegrees.js\"\r\nimport { Grid, Segment } from 'semantic-ui-react'\r\nimport Sidebar from \"../../components/sidebar.js\"\r\nimport pkg from 'semantic-ui-react/package.json'\r\n\r\nimport DegreePlanner from \"../../components/degreeplanner.js\"\r\nimport DropdownDegrees from '../../components/dropdownDegrees';\r\nimport DropdownSearch from \"../../components/dropdownsearch.js\"\r\n\r\nimport positionHelper from '../../components/positionhelper.js';\r\nimport selectNode from '../../components/selectnode.js';\r\nimport unselectNode from '../../components/unselectnode.js';\r\nimport highlightElements from '../../components/highlightelements.js';\r\nimport getSelectable from '../../components/getselectable.js';\r\nimport checkPrerequisites from '../../components/checkprerequisites';\r\nimport exclusionSwap from '../../components/exclusionswap.js';\r\nimport getElement from '../../components/getelement.js';\r\nimport unselectUnconnected from '../../components/unselectunconnected.js';\r\n\r\nimport SearchPan from '../../components/searchpan.js';\r\n\r\nimport GetPan from '../../components/getpan.js';\r\n\r\nvar elementsData = require(\"./data.json\");\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {\r\n    'SENGAH': 1\r\n}\r\nvar selectedEdges = {};\r\nvar selectableNodes = {};\r\nvar potentialEdges = {};\r\nvar hoverEdges = {};\r\n\r\n// Load up the chart with initial selectable nodes and edges\r\nfor (const node of nodesData) {\r\n    if (selectedNodes.hasOwnProperty(node.id)) {\r\n        if (node.data.unlocks === null) continue;\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n        }\r\n    } else if (checkPrerequisites(node, elementsData, selectedNodes)) {\r\n        selectableNodes[node.id] = 1;\r\n    }\r\n}\r\n\r\nvar exclusionGroups = require(\"./data_exclusion.json\");\r\nvar exclusionNodes = {};\r\nfor (const group of exclusionGroups) {\r\n    for (const exclusion of group) {\r\n        exclusionNodes[exclusion] = 1;\r\n    }\r\n}\r\n\r\nelementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\n\r\nconst onLoad = (reactFlowInstance) => {\r\n    for (var group of exclusionGroups) {\r\n        const last = group.pop();\r\n\r\n        for (var course of elementsData) {\r\n            if (last === course.id) {\r\n                course.isHidden = true;\r\n                // console.log(\"Hiding \" + course.id);\r\n                // Get all the edges and hide them too\r\n                for (var edge of elementsData) {\r\n                    if (isNode(edge)) continue;\r\n                    if (edge.source === last || edge.target === last) {\r\n                        // console.log(\"hiding \" + edge.id);\r\n                        edge.isHidden = true;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        group.push(last);\r\n    }\r\n    reactFlowInstance.setTransform({x: 470, y: 350, zoom: 0.38});\r\n};\r\n\r\nconst nodeTypes = {\r\n    custom1: CustomNode1,\r\n    custom2: CustomNode2,\r\n    header1: HeaderNode1\r\n};\r\n\r\nconst layoutStyle = {overflowX: \"hidden\", overflowY: \"overlay\", width: \"100vw\", height: \"100vh\"};\r\n\r\nconst BESengah = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverText, setHoverText] = useState(false);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    const [sidebarOpen, setSidebarOpen] = useState(false);\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n    const [layout, setLayout] = useState(layoutStyle);\r\n\r\n    const selectUnselect = (element) => {\r\n        // NOTE: Might not need this?????\r\n        // EXPLANATION: Reason we dont need it is because we have to leave node\r\n        // anyways to hover another node. But maybe good practise to have just in case\r\n        // Unhover edges which lit up on nodeMouseEnter\r\n        unhoverPrerequisites(hoverEdges);\r\n\r\n        // 1. Select the node and fill in edges.\r\n        // - Deal with unselecting nodes\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"MAINSELECT\");\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"UNSELECTING\");\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n\r\n        console.log(\"==========SelectedNodes==========\");\r\n        console.log(selectedNodes);\r\n        console.log(\"==========SelectedEdges==========\");\r\n        console.log(selectedEdges);\r\n        console.log(\"==========SelectableNodes==========\");\r\n        console.log(selectableNodes);\r\n        console.log(\"==========PotentialEdges==========\");\r\n        console.log(potentialEdges);\r\n\r\n        // 2. Determine which nodes are now selectable\r\n        // - Determine which previously selectable nodes are now unselectable\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n\r\n        // Render graph accordingly\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const toggleExclusion = (element) => {\r\n        // TODO: ARE there courses which do not \r\n        // For all immediate edges of the element, swap\r\n        // with the exclusion course\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    // ==========ONCLICK==========\r\n    const onElementClick = (event, element) => {\r\n        // console.log(\"ONELEMENTCLICK\");\r\n        if (isEdge(element)) return; // Don't care about edges\r\n        if (element.id === 'SENGAH') return; // Cannot click on main node\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return; // Cannot select non selectable nodes\r\n\r\n        // Determine double or single click for exclusion nodes\r\n        // This will prevent normal nodes from waiting the double click delay\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 200);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            // Not an exclusion node.\r\n            selectUnselect(element);\r\n        }\r\n    };\r\n    // ===========================\r\n\r\n    // ==========ONHOVER==========\r\n    const onNodeMouseEnter = (event, node) => {\r\n        if (node.id === 'SENGAH') return;\r\n        // Display node information in top left\r\n        setHoverText(true);\r\n        setHoverNode(node);\r\n\r\n        // If the node is unselected, highlight prerequisite edges in purple\r\n        //if ((!selectedNodes.hasOwnProperty(node.id)) && (!selectableNodes.hasOwnProperty(node.id))) {\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        //}\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        if (node.id === 'SENGAH') return;\r\n        setHoverText(false);\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    let hoverDisplay;\r\n    if (hoverText) {\r\n        hoverDisplay = <HoverInfo node={hoverNode}/>\r\n    }\r\n    // ===========================\r\n\r\n    const onNodeDragStop = (event, node) => {\r\n        for (var e of elements) {\r\n            if (e.id === node.id) {\r\n                e.position.x = node.position.x;\r\n                e.position.y = node.position.y;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const disableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'hidden'});\r\n    }\r\n\r\n    const enableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'overlay'});\r\n    }\r\n\r\n    return (\r\n        <ReactFlowProvider>\r\n            <div style={layout}>\r\n                <Grid columns={2} divided>\r\n                    <Grid.Column width=\"12\">\r\n                        <div onMouseEnter={disableBodyScroll} onMouseLeave={enableBodyScroll}>\r\n                            <ReactFlow\r\n                                elements={elements}\r\n                                style={{width: '100%', height: '100vh'}}\r\n                                onLoad={onLoad}\r\n                                nodeTypes={nodeTypes}\r\n                                nodesConnectable={false}\r\n                                onElementClick={onElementClick}\r\n                                minZoom={0.38}\r\n                                //setInitTransform={TransformUpdater({x: 100, y: 100, z: 1})}\r\n                                //nodesDraggable={false}\r\n                                onNodeMouseEnter={onNodeMouseEnter}\r\n                                onNodeMouseLeave={onNodeMouseLeave}\r\n                                selectNodesOnDrag={false}\r\n                                onNodeDragStop={onNodeDragStop}\r\n                                elementsSelectable={false}\r\n                            >\r\n                            </ReactFlow>\r\n                            <DropdownSearch/>\r\n                        </div>\r\n                    </Grid.Column>\r\n                    <Grid.Column width=\"4\">\r\n                        <Sidebar selectedNodes={selectedNodes}/>\r\n                    </Grid.Column>\r\n                </Grid>\r\n                {hoverDisplay}\r\n                {/* <button onClick={positionHelper(elements)}>GENERATE POSITION</button> */}\r\n                <div id=\"DegreePlanner\">\r\n                    <DegreePlanner selectedCourses={Object.keys(selectedNodes)} />\r\n                </div>\r\n            </div>\r\n        </ReactFlowProvider>\r\n    );\r\n};\r\n\r\nexport default BESengah;","// HELPER FUNCTION for selecting nodes\r\n// Given a selectable node, highlights potential edges and fills in prereq edges\r\nimport checkPrerequisites from './checkprerequisites.js';\r\nimport getElement from './getelement.js';\r\n\r\nexport default function selectNode(elements, node, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    selectedNodes[node.id] = 1;\r\n    delete selectableNodes[node.id];\r\n\r\n    // Turn its prerequisite potential edges into actual edges\r\n    // Keep grey edges as grey\r\n    if (node.data.conditions.prerequisites !== null) {\r\n        for (const prereq of node.data.conditions.prerequisites) {\r\n            if (potentialEdges.hasOwnProperty('e' + prereq + '-' + node.id)) {\r\n                selectedEdges['e' + prereq + '-' + node.id] = 1;\r\n                delete potentialEdges['e' + prereq + '-' + node.id];\r\n            }\r\n        }\r\n    }\r\n\r\n    // Unlock its future edges\r\n    if (node.data.unlocks !== null) {\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            // Edges from node to unlocks should be unselected\r\n            if (selectedNodes.hasOwnProperty(unlockCourse)) {\r\n                // This course is already selected. Make the edge a selected edge\r\n                selectedEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n            } else {\r\n                // This course is either unselected or selectable\r\n                // In either case, add potential edge\r\n                potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n            }\r\n        }            \r\n    }\r\n\r\n    return;\r\n}\r\n","// HELPER FUNCTION FOR unselecting nodes\r\n// Determines if any nodes not connected to unselect node needs to be unselected.\r\n// For example, nodes which rely on N units completed\r\nimport checkPrerequisites from './checkprerequisites.js';\r\nimport unselectNode from './unselectnode.js';\r\nimport getElement from './getelement.js';\r\n\r\nexport default function unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    const selectedNodesList = Object.keys(selectedNodes);\r\n    for (const selected of selectedNodesList) {\r\n        // Determine if prerequisites are met\r\n        const selectedNode = getElement(selected, elements);\r\n        if (! checkPrerequisites(selectedNode, elements, selectedNodes)) {\r\n            // Prerequisites are not met\r\n            unselectNode(elements, selectedNode, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n    }\r\n\r\n    const selectableNodesList = Object.keys(selectableNodes);\r\n    for (const selectable of selectableNodesList) {\r\n        // Determine if prerequisites are met\r\n        const selectableNode = getElement(selectable, elements);\r\n        if (! checkPrerequisites(selectableNode, elements, selectedNodes)) {\r\n            // Prerequisites are not met\r\n            delete selectableNode[selectable];\r\n        }\r\n    }\r\n}","// HELPER FUNCTION to determine which previously unselectable nodes\r\n// are now selectable\r\nimport checkPrerequisites from './checkprerequisites.js';\r\nimport getElement from './getelement.js';\r\nimport {isNode} from 'react-flow-renderer';\r\n\r\nexport default function getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    // TODO: Deal with outsider nodes\r\n\r\n    const analyseNodesKeys = [];\r\n    for (const e of elements) {\r\n        if (isNode(e)) {\r\n            analyseNodesKeys.push(e);\r\n        }\r\n    }\r\n\r\n    // Analyse the target of potential edges for potential nodes\r\n    /*var analyseNodes = {};\r\n    const potentialEdgesKeys = Object.keys(potentialEdges);\r\n    for (var edge of potentialEdgesKeys) {\r\n        // Get the target course\r\n        const target = edge.split('-')[1];\r\n\r\n        if ((! selectedNodes.hasOwnProperty(target)) && (! selectableNodes.hasOwnProperty(target))) {\r\n            analyseNodes[edge.split('-')[1]] = 1;\r\n        }\r\n    }*/\r\n\r\n    \r\n    //const analyseNodesKeys = Object.keys(analyseNodes);\r\n    //console.log(\"==========ANALYSE NODES KEYS===========\");\r\n    //console.log(analyseNodesKeys);\r\n    //console.log(\"==============ELEMENTS===============\");\r\n    //console.log(elements);\r\n\r\n    for (const node of analyseNodesKeys) {\r\n        // Determine if the prerequisite has been met\r\n        //const node = getElement(nodeID, elements);\r\n        //console.log(node);\r\n        \r\n        // If the node is already selected, don't bother making it selectable\r\n        if (selectedNodes.hasOwnProperty(node.id)) continue;\r\n\r\n\r\n        if (checkPrerequisites(node, elements, selectedNodes)) {\r\n            //console.log(\"SELECTABLE\");\r\n            //console.log(node.id);\r\n            selectableNodes[node.id] = 1;\r\n        } else {\r\n            if (selectableNodes.hasOwnProperty(node.id)) delete selectableNodes[node.id];\r\n            //console.log(\"DELETE UNSELECTABLE\");\r\n            //console.log(node.id);\r\n            // TODO: Deal with selected nodes cases? (e.g. unselecting a child???)\r\n\r\n        }\r\n    }\r\n}","// HELPER FUNCTION to toggle exclusion courses\r\n// Will hide the current course and its edges, unhide the next course and edges\r\n// in the queue. Finds new edges to show by regex substitution???\r\nimport { getConnectedEdges } from 'react-flow-renderer';\r\nimport getElement from './getelement.js';\r\nimport checkPrerequisites from './checkprerequisites.js';\r\nimport unselectNode from './unselectnode.js';\r\n\r\nexport default function exclusionSwap(node, elements, edges, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups) {\r\n    /*console.log(\"EXCLUSION SWAP\");\r\n    console.log(exclusionGroups);\r\n    console.log(node.id);*/\r\n    const newElements = [...elements];\r\n    for (var group of exclusionGroups) {\r\n        //console.log(\"CHECKING\", group);\r\n        if (group.includes(node.id)) {\r\n            //console.log(\"FOUND THE EXCLUSION GROUP\");\r\n            //console.log(group);\r\n\r\n            // Move this to the back\r\n            const prevCourse = group.shift();\r\n            group.push(prevCourse);\r\n\r\n            // Current course we need to display is now at front of queue\r\n            const curCourse = group[0];\r\n\r\n            //console.log(prevCourse);-\r\n            //console.log(curCourse);\r\n\r\n\r\n            // Toggle the nodes themselves accordingly\r\n            for (var e of elements) {\r\n                if (e.id === prevCourse) {\r\n                    /*console.log(e);\r\n                    console.log(\"HIDING\");\r\n                    console.log(prevCourse);*/\r\n                    e.isHidden = true;\r\n                    //console.log(e);\r\n                } else if (e.id === curCourse) {\r\n                    /*console.log(e);\r\n                    console.log(\"REVEALING\");\r\n                    console.log(curCourse);*/\r\n                    e.isHidden = false;\r\n                    //console.log(e);\r\n                }\r\n            }\r\n\r\n            // Determine state of the nodes (E.g. COMP6441 can be selectable\r\n            // whilst COMP6841 is not)\r\n            var curNode = getElement(curCourse, elements);\r\n            if (checkPrerequisites(curNode, elements, selectedNodes)) {\r\n                // The new node is selectable\r\n                //console.log(\"================== SELECTABLE\", curCourse);\r\n                selectableNodes[curCourse] = 1;\r\n                \r\n                // Determine previous node condition\r\n                if (selectedNodes.hasOwnProperty(prevCourse)) {\r\n                    //console.log(\"PREVIOUS SELECTED\", prevCourse);\r\n                    delete selectedNodes[prevCourse];\r\n                    delete selectableNodes[curCourse];\r\n                    selectedNodes[curCourse] = 1;\r\n                } else if (selectableNodes.hasOwnProperty(prevCourse)) {\r\n                    //console.log(\"PREVIOUS SELECTABLE\", prevCourse);\r\n                    delete selectableNodes[prevCourse];\r\n                }\r\n            } else {\r\n                // The new node is not selectable\r\n                // Unselect the original node\r\n                unselectNode(elements, node, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            }         \r\n\r\n            // Get all the edges of the previous course and hide all of them\r\n            // Then use regex sub to determine the new edges to reveal\r\n            // Transfer over selected, potential and hover edges if they are in newedgeslist\r\n            var edgesList = getConnectedEdges([node], edges);\r\n            var newEdgesList = getConnectedEdges([curNode], edges);\r\n            var edgesIds = [];\r\n            var newEdgesIds = [];\r\n            for (const edge of edgesList) {\r\n                edgesIds.push(edge.id);\r\n            }\r\n            for (const newEdge of newEdgesList) {\r\n                newEdgesIds.push(newEdge.id);\r\n            }        \r\n\r\n            // Stores all the common edges\r\n            var checkedEdges = [];\r\n\r\n            // Go through each edge we need to hide and check what we should do\r\n            // with the edge in hideEdgesList\r\n            for (const edge of edgesList) {\r\n                var hideEdge = getElement(edge.id, elements);\r\n                hideEdge.isHidden = true;\r\n                var newEdgeId = hideEdge.id.replace(prevCourse, curCourse);\r\n                if (getElement(newEdgeId, edges) !== null) {\r\n                    checkedEdges.push(newEdgeId);\r\n                } \r\n\r\n                // If selected, unselect it\r\n                if (selectedEdges.hasOwnProperty(hideEdge.id)) {\r\n                    delete selectedEdges[hideEdge.id];\r\n                    if (newEdgesIds.includes(newEdgeId)) {\r\n                        // This is in the newEdges list. Transfer the edge property\r\n                        selectedEdges[newEdgeId] = 1;\r\n                    }\r\n                }\r\n\r\n                // If potential, unpotential it\r\n                if (potentialEdges.hasOwnProperty(hideEdge.id)) {\r\n                    delete potentialEdges[hideEdge.id];\r\n                    if (newEdgesIds.includes(newEdgeId)) {\r\n                        // This is in the newEdges list. Transfer the edge property\r\n                        potentialEdges[newEdgeId] = 1;\r\n                    }\r\n                }\r\n\r\n                // If hover, unhover it\r\n                if (hoverEdges.hasOwnProperty(hideEdge.id)) {\r\n                    delete hoverEdges[hideEdge.id];\r\n                    if (newEdgesIds.includes(newEdgeId)) {\r\n                        // This is in the newEdges list. Transfer the edge property\r\n                        hoverEdges[newEdgeId] = 1;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            //console.log(\"CHECKED EDGES\", checkedEdges);\r\n            \r\n            for (const edge of edgesIds) {\r\n                const newEdgeId = edge.replace(prevCourse, curCourse);\r\n                if (! checkedEdges.includes(newEdgeId)) {\r\n                    // Old edge which has not been transferred to new edge.\r\n                    // Deal with the TARGET NODE SELECTABILITY right here\r\n                    var target = newEdgeId.split('-')[1];\r\n                    //console.log(\"CHECKING\", newEdgeId);\r\n                    //console.log(\"TARGET IS\", target);\r\n                    // Note that we cannot use newEdge.target as this edge\r\n                    // DOES NOT EXIST ( i think )\r\n\r\n                    // TODO: TEMPORARY FIX. Make sure target is not current course\r\n                    if (target === curCourse) continue;\r\n\r\n                    if (selectableNodes.hasOwnProperty(target)) {\r\n                        //console.log(\"Deleting \" + target);\r\n                        delete selectableNodes[target];\r\n                    }\r\n                }\r\n            }\r\n\r\n            // For each edge, show it IF TARGET AND SOURCE ARE NOT HIDDEN\r\n            // Will also show any additional edges\r\n            // (Example: COMP6441, COMP6841. COMP6841 -> COMP6448 but COMP6441 does not)\r\n            for (const newEdge of newEdgesList) {\r\n                var edge = getElement(newEdge.id, elements);\r\n                const sourceNode = getElement(edge.source, elements);\r\n                const targetNode = getElement(edge.target, elements);\r\n                if ((!sourceNode.isHidden) && (!targetNode.isHidden)) {\r\n                    // Show the edge if both nodes are not hidden\r\n                    edge.isHidden = false;    \r\n                }\r\n\r\n                // Determine if this edge has been checked before\r\n                if (checkedEdges.includes(newEdge.id)) {\r\n                    // It has been checked before\r\n                    // TODO: THIS CAN BREAK if both nodes have same edges\r\n                    // but one has an additional prerequisite??????\r\n                    continue;\r\n                } else {\r\n                    //console.log(newEdge.id + \" NOT BEEN CHECKED BEFORE\")\r\n                    // It has NOT been checked before\r\n                    if (selectedNodes.hasOwnProperty(curCourse)) {\r\n                        //console.log(curCourse + \" was previously selected\");\r\n                        \r\n                        if (sourceNode.id === curCourse) {\r\n                            // Reveal node is selected and source of edge. Make potential edge.\r\n                            potentialEdges[newEdge.id] = 1;\r\n                            // Check if the target node is selectable\r\n                            if (! selectableNodes.hasOwnProperty(edge.target)) {\r\n                                if (checkPrerequisites(targetNode, elements, selectedNodes)) {\r\n                                    //console.log(edge.target + \" DOES MEET PREREQS\");\r\n                                    selectableNodes[targetNode.id] = 1;\r\n                                } else {\r\n                                    //console.log(edge.target + \" DOES NOT MEET PREREQS\");\r\n                                }\r\n                            }\r\n                        } else {\r\n                            // Reveal node is selected and target of edge. Check previous edges/nodes\r\n                            if (curNode.data.conditions.prerequisites !== null) {\r\n                                for (const prereq of curNode.data.conditions.prerequisites) {\r\n                                    if (selectedNodes.hasOwnProperty(prereq)) {\r\n                                        // This node was selected. Make the edge selected\r\n                                        if (potentialEdges.hasOwnProperty('e' + prereq + '-' + curCourse)) delete potentialEdges['e' + prereq + '-' + curCourse];\r\n                                        selectedEdges['e' + prereq + '-' + curCourse] = 1;\r\n                                    } else {\r\n                                        // This node was not selected. Make sure the edge is unselected\r\n                                        if (potentialEdges.hasOwnProperty('e' + prereq + '-' + curCourse)) delete potentialEdges['e' + prereq + '-' + curCourse];\r\n                                        if (selectedEdges.hasOwnProperty('e' + prereq + '-' + curCourse)) delete selectedEdges['e' + prereq + '-' + curCourse];\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        //console.log(curCourse + \" was not previously selected\")\r\n                        // The node was not selected before. Delete any potential edges\r\n                        // Make target node unselectable if prereqs are not met\r\n                        if (potentialEdges.hasOwnProperty(edge.id)) {\r\n                            //console.log(\"DELETING \" + edge.id);\r\n                            delete potentialEdges[edge.id];\r\n                            if (selectableNodes.hasOwnProperty(edge.target)) {\r\n                                //console.log(edge.target + \" WAS SELECTABLE\")\r\n                                if (! checkPrerequisites(targetNode, elements, selectedNodes)) {\r\n                                    //console.log(edge.target + \" DOES NOT MEET PREREQS\");\r\n                                    delete selectableNodes[targetNode.id];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            /*for (const newEdge of newEdgesList) {\r\n                for (const edge of newElements) {\r\n                    if (newEdge.id === edge.id) {\r\n                        const sourceNode = getElement(edge.source, elements);\r\n                        const targetNode = getElement(edge.target, elements);\r\n                        if ((!sourceNode.isHidden) && (!targetNode.isHidden)) {\r\n                            edge.isHidden = false;\r\n                            \r\n                            \r\n                            // If the new node is selected, make this edge blue\r\n                            // Else, make this edge grey. Deals with differing edge\r\n                            // cases COMP6441 and COMP6841\r\n                            if (selectedNodes.hasOwnProperty(curCourse)) {\r\n                                potentialEdges[edge.id] = 1;\r\n                                // Make sure the target node is selectable\r\n                                if (! selectableNodes.hasOwnProperty(edge.target)) {\r\n                                    if (checkPrerequisites(targetNode, selectedNodes)) {\r\n                                        selectableNodes[targetNode.id] = 1;\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                if (potentialEdges.hasOwnProperty(edge.id)) {\r\n                                   delete potentialEdges[edge.id];\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }*/\r\n\r\n\r\n            break;\r\n        }\r\n    }\r\n\r\n    return newElements;\r\n}","// HELPER FUNCTION to highlight prerequisites in purple on hover\r\n// When hovering over an unselected node, show a path of edges\r\n// which will stop at a selected/selectable node\r\nimport getElement from './getelement.js';\r\n\r\nexport default function hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges) {\r\n    if (node.data.conditions.prerequisites === null) return;\r\n    // Get all selected edges one layer down and add to hover edges\r\n    for (const prereq of node.data.conditions.prerequisites) {\r\n        if (selectedEdges.hasOwnProperty('e' + prereq + '-' + node.id)) {\r\n            hoverEdges['e' + prereq + '-' + node.id] = 1;\r\n        }\r\n    }\r\n\r\n    // hoverEdge all unselected (AND POTENTIAL???) edges until we hit selected/selectable node\r\n    var prereqQueue = [node.id];\r\n    while (prereqQueue.length !== 0) {\r\n        const current = getElement(prereqQueue.shift(), elements);\r\n        // Make sure this course exists as a node in our map\r\n        if (current === null) continue;\r\n\r\n        if (current.data.conditions.prerequisites === null) continue;\r\n\r\n        for (const prereq of current.data.conditions.prerequisites) {\r\n            if (!selectedEdges.hasOwnProperty('e' + prereq + '-' + current.id)) {\r\n                hoverEdges['e' + prereq + '-' + current.id] = 1;\r\n            }\r\n            /*if ((!selectedEdges.hasOwnProperty('e' + prereq + '-' + current.id)) && (!potentialEdges.hasOwnProperty('e' + prereq + '-' + current.id))) {\r\n                hoverEdges['e' + prereq + '-' + current.id] = 1;\r\n            }*/\r\n\r\n            if ((!selectedNodes.hasOwnProperty(prereq)) && (!selectableNodes.hasOwnProperty(prereq))) {\r\n                prereqQueue.push(prereq);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import React, {useState, Fragment} from 'react';\r\nimport ReactFlow, {Background, Controls, MiniMap} from 'react-flow-renderer';\r\n\r\nvar initialElements = [\r\n    {id: '1', style: {opacity: 1}, position: {x: 0, y: 0}, data: {label: 'VINCENT'}, type: 'default'},\r\n    {id: '2', style: {opacity: 1}, position: {x: 0, y: 100}, data: {label: 'HAYES'}, type: 'default'},\r\n    {id: '3', style: {opacity: 1}, position: {x: 0, y: -100}, data: {label: 'JAMES'}, type: 'default'},\r\n    \r\n    {id: 'e1-2', source: '1', target: '2', type: 'step', animated: true}\r\n];\r\n\r\nconst onLoad = (reactFlowInstance) => {\r\n    reactFlowInstance.fitView();\r\n}\r\n\r\nconst Teaching = () => {\r\n    const [elements, setElements] = useState(initialElements);\r\n    const [isDraggable, setIsDraggable] = useState(true);\r\n\r\n    const addNode = () => {\r\n        setElements(e => e.concat({\r\n            id: (e.length+1).toString(),\r\n            data: {label: 'new node' + e.length},\r\n            position: {x: Math.random() * window.innerWidth, y: Math.random() * window.innerHeight}\r\n        }));\r\n    };\r\n    \r\n\r\n    const onClick = (event, element) => {\r\n        console.log('hi');\r\n        setElements((els) =>\r\n            els.map((e) => {\r\n                if (e.id === element.id) {\r\n                    console.log(element);    \r\n                    console.log(e.style.opacity);\r\n                    return e;\r\n                }\r\n                return e;\r\n            })\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <ReactFlow\r\n                elements={elements}\r\n                onLoad={onLoad}\r\n                style={{width: \"100%\", height: \"99vh\"}}\r\n                onElementClick={onClick}\r\n                nodesDraggable={false}\r\n            >\r\n                <Background />\r\n                <MiniMap \r\n                    nodeColor = {n=>{\r\n                        if (n.data.label === 'VINCENT') return 'red';\r\n                        return 'blue';\r\n                    }}\r\n                />\r\n                <Controls />\r\n            </ReactFlow>\r\n            <div>\r\n                <button type=\"button\" onClick={addNode}>\r\n                    ADD NEW NODE HERE!!!!\r\n                </button>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Teaching;","import React, {Component} from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Link,\r\n  Redirect,\r\n  HashRouter\r\n} from 'react-router-dom';\r\n\r\nimport BESengah from './maps/EngineeringHonoursSoftware/map.js';\r\nimport Teaching from './components/teaching.js';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <HashRouter basename='/'>\r\n        <div>\r\n          <Route path=\"/\" component={BESengah} />\r\n          <Route path=\"/Teaching\" component={Teaching}/>\r\n        </div>\r\n      </HashRouter>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}