{"version":3,"sources":["components/checkprerequisites.js","components/customnode1.js","components/customnode2.js","components/headernode1.js","components/hoverinfo.js","components/getelement.js","components/unhoverprerequisites.js","components/dropdownDegrees.js","components/sidebar-modal.js","components/sidebar.js","components/degreeplanner-course.jsx","components/degreeplanner-term.jsx","components/degreeplanner.js","components/unselectnode.js","components/highlightelements.js","maps/EngineeringHonoursSoftware/map.js","components/selectnode.js","components/getselectable.js","components/exclusionswap.js","components/hoverprerequisites.js","components/teaching.js","App.js","serviceWorker.js","index.js"],"names":["checkPrerequisites","node","selectedNodes","data","conditions","prerequisites","prereqs_executable","console","log","id","condition","replace","match","hasOwnProperty","eval","style","zIndex","pointerEvents","opacity","top","memo","type","position","course_code","bottom","degree_name","HoverInfo","props","getElement","elementsData","e","unhoverPrerequisites","hoverEdges","edge","courseOptions","programOptions","code","programsJSON","degrees_involved","majors","length","honours","push","name","replacement","spec","specialisationsJSON","getMajors","minors","getMinors","DropdownDegrees","state","majorOptions","minorOptions","disabledPrimary","disabledSecondary","hiddenPrimary","hiddenSecondary","valProgram","valPrimary","valSecondary","phPrimary","phSecondary","chooseProgram","program","value","setState","choosePrimary","chooseSecondary","minor","clickDone","Grid","centered","marginBottom","Row","Dropdown","selection","search","onChange","this","options","enabled","placeholder","disabled","visibility","Button","onClick","color","Component","exampleReducer","action","open","dimmer","Error","SideBarModal","React","useReducer","undefined","dispatch","Modal","closeIcon","onClose","Header","textAlign","Container","as","marginTop","example","key","flag","text","Sidebar","paddingLeft","paddingRight","Message","info","stretched","fluid","multiple","selector","animated","Content","visible","hidden","Icon","Course","draggableId","course","index","provided","ref","innerRef","draggableProps","dragHandleProps","Label","margin","content","checkTermAvailability","courseId","termId","term","substring","allCourses","termsAvailable","includes","checkValidCourses","courseIds","Term","droppableId","snapshot","Segment","backgroundColor","isDraggingOver","draggingOverWith","transition","title","droppableProps","minHeight","courses","map","selectedCourses","getCourses","forEach","c","coursesJSON","terms","course_name","generateTerms","yearId","TSKey","T1Key","T2Key","T3Key","generatePlan","years","plan","year","toString","populateTerms","DegreePlanner","onDragEnd","result","destination","source","sourceYear","start","destinationYear","finish","startCourseIds","Array","from","splice","newStart","finishCourseIds","newFinish","newState","newCourseIds","newTerm","Object","keys","columns","termOrder","Column","unselectNode","elements","selectedEdges","selectableNodes","potentialEdges","unselectQueue","current","shift","prereq","unlocks","unlockCourse","highlightElements","isEdge","stroke","strokeWidth","background","backgroundColour","filter","textColour","require","nodesData","isNode","edgesData","exclusionGroups","exclusionNodes","group","exclusion","onLoad","reactFlowInstance","last","pop","isHidden","target","setTransform","x","y","zoom","nodeTypes","custom1","CustomNode1","custom2","CustomNode2","header1","HeaderNode1","layoutStyle","overflowX","overflowY","width","height","BESengah","hoverDisplay","useState","setElements","hoverText","setHoverText","hoverNode","setHoverNode","clickCount","singleClickTimer","layout","setLayout","selectUnselect","element","selectNode","analyseNodes","split","nodeID","getSelectable","toggleExclusion","edges","newElements","prevCourse","curCourse","curNode","edgesList","getConnectedEdges","newEdgesList","edgesIds","newEdgesIds","newEdge","checkedEdges","hideEdge","newEdgeId","sourceNode","targetNode","exclusionSwap","divided","onMouseEnter","onMouseLeave","nodesConnectable","onElementClick","event","setTimeout","clearTimeout","minZoom","onNodeMouseEnter","prereqQueue","hoverPrerequisites","onNodeMouseLeave","selectNodesOnDrag","onNodeContextMenu","onNodeDragStop","whyDidYouRender","initialElements","label","fitView","Teaching","els","nodesDraggable","nodeColor","n","concat","Math","random","window","innerWidth","innerHeight","App","basename","to","path","component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.23a95ffd.chunk.js","sourcesContent":["// Returns true if all prerequisites are met for a given node\r\n// Returns false if prerequisites are not met for a given node\r\n// Will only analyse targets of potential edges\r\n// NOTE: Assumes that source of potential edges are always selected\r\nexport default function checkPrerequisites(node, selectedNodes) {\r\n    if (node.data.conditions.prerequisites === null) return true;\r\n    if (node.data.conditions.prereqs_executable === null) return true;\r\n\r\n    // TODO: Check for corerequsiites and exclusion courses as well\r\n\r\n    // Check if these nodes are enough to satisfy prerequisites\r\n    // Get the prerequisite condition and replace courses by 1 if they have been\r\n    // selected and 0 if they have not.\r\n    \r\n    console.log(node.id);\r\n    var condition = node.data.conditions.prereqs_executable;\r\n    console.log(condition);\r\n    condition = condition.replace(/[A-Z]{4}[A-Z0-9]*/gi, function(match) {\r\n        if (selectedNodes.hasOwnProperty(match)) {\r\n            return 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    });\r\n    console.log(\"--------------\");\r\n    console.log(condition);\r\n    if (eval(condition)) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\n","// For normal nodes\r\nimport React, { memo } from 'react';\r\n\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nconst style = {zIndex: -9999, pointerEvents: 'none', opacity: 0, top: '50%'};\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={style} />\r\n      <div>\r\n            <b>{data.course_code}</b>\r\n      </div>\r\n      <Handle type=\"source\" position=\"bottom\" style={style} />\r\n    </>\r\n  );\r\n});\r\n","// For grouping nodes\r\nimport React, { memo } from 'react';\r\n\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={{zIndex: -9999, pointerEvents: 'none', opacity: 0, top: '50%'}} />\r\n      <div>\r\n          <b>{data.id}</b>\r\n      </div>\r\n      <Handle type=\"source\" position=\"bottom\" style={{zIndex: -9999, pointerEvents: 'none', opacity: 0, bottom: '50%'}} />\r\n    </>\r\n  );\r\n});\r\n","import React, { memo } from 'react';\r\n\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={{opacity: 0, top: '50%'}} />\r\n      <div>\r\n            <b>{data.degree_name}</b>\r\n      </div>\r\n      <Handle type=\"source\" position=\"bottom\" style={{opacity: 0, bottom: '50%'}} />\r\n    </>\r\n  );\r\n});\r\n","// Displays hover text in top left corner which contains info about the course\r\nimport React from 'react';\r\nimport '../styles/hover.css';\r\n\r\nexport default function HoverInfo(props) {\r\n    console.log(props);\r\n    return (\r\n        <div id=\"hoverbox\">\r\n            <div id=\"header\">\r\n                {props.node.id}\r\n            </div>\r\n        </div>\r\n    );\r\n}","// Given an id, returns the element\r\nconst getElement = (id, elementsData) => {\r\n    console.log(\"GET ELEMENT OF \" + id);\r\n    for (var e of elementsData) {\r\n        if (e.id === id) {\r\n            return e;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport default getElement;","// HELPER FUNCTION to delete prerequisite edges\r\n// Usually used after unhovering or onclick\r\nexport default function unhoverPrerequisites(hoverEdges) {\r\n    for (var edge in hoverEdges) {\r\n        delete hoverEdges[edge];\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Button, Dropdown, Grid } from 'semantic-ui-react'\r\n\r\nimport programsJSON from \"../webscraper/programs.json\"\r\nimport specialisationsJSON from \"../webscraper/specialisations.json\"\r\n\r\nconst MAJORS = 1;\r\nconst MINORS = 2;\r\nconst HONOURS = 3;\r\n\r\nconst courseOptions = {}\r\nconst programOptions = []\r\n\r\nconsole.log(programsJSON)\r\n\r\nfor (const code in programsJSON) {\r\n    if (programsJSON[code].degrees_involved.majors.length === 0 && programsJSON[code].degrees_involved.honours.length === 0) continue;\r\n\r\n    programOptions.push({\r\n        \"key\": code,\r\n        \"value\": code,\r\n        \"text\": code + \" - \" + programsJSON[code].name\r\n    })\r\n\r\n    courseOptions[code] = programsJSON[code].degrees_involved\r\n}\r\n\r\nfor (const code in courseOptions) {\r\n    for (const type in courseOptions[code]) {\r\n\r\n        const replacement = [];\r\n        for (const spec of courseOptions[code][type]) {\r\n            if (!(spec in specialisationsJSON)) continue;\r\n            replacement.push({\r\n                \"key\": spec,\r\n                \"value\": spec,\r\n                \"text\": spec + \" - \" + specialisationsJSON[spec].name\r\n            })\r\n        }\r\n        courseOptions[code][type] = replacement;\r\n    }\r\n}\r\n\r\n// returns MAJORS if Majors but no Minors\r\n// returns MINORS if Majors and Minors exist\r\n// returns HONOURS if Honours exist\r\nconst getMajors = (code) => {\r\n    if (!(code in courseOptions)) {\r\n        console.log(\"code not found in majors\", code);\r\n        return [];\r\n    }\r\n\r\n    if (courseOptions[code].honours.length) return [HONOURS, courseOptions[code].honours];\r\n    if (courseOptions[code].minors.length) return [MINORS, courseOptions[code].majors];\r\n    return [MAJORS, courseOptions[code].majors];\r\n}\r\n\r\nconst getMinors = (code) => {\r\n    if (!(code in courseOptions)) {\r\n        console.log(\"code not found in minors\", code);\r\n        return [];\r\n    }\r\n\r\n    return courseOptions[code].minors;\r\n}\r\n\r\nclass DropdownDegrees extends Component {\r\n    state = {\r\n        programOptions: programOptions,\r\n        majorOptions: [],\r\n        minorOptions: [],\r\n\r\n        disabledPrimary: true,\r\n        disabledSecondary: true,\r\n        hiddenPrimary: 'hidden',\r\n        hiddenSecondary: 'hidden',\r\n\r\n        valProgram: null,\r\n        valPrimary: null,\r\n        valSecondary: null,\r\n\r\n        phPrimary: \"Select\",\r\n        phSecondary: \"N/A\"\r\n    }\r\n\r\n    chooseProgram = (e, program) => {\r\n        const [type, majors] = getMajors(program.value)\r\n        console.log(program.value)\r\n        this.setState({\r\n            valProgram: program.value,\r\n\r\n            valPrimary: null,\r\n            disabledPrimary: false,\r\n            hiddenPrimary: 'visible',\r\n            majorOptions: majors,\r\n            phPrimary: \"Select Major\",\r\n\r\n            valSecondary: null,\r\n            disabledSecondary: true,\r\n            hiddenSecondary: 'hidden',\r\n            minorOptions: [],\r\n            phSecondary: \"N/A\"\r\n        })\r\n\r\n        if (type === HONOURS) this.setState({phPrimary: \"Select Honour\"})\r\n        else if (type === MAJORS) this.setState({phPrimary: \"Select Major\"})\r\n        else {\r\n            this.setState({\r\n                phPrimary: \"Select Major\",\r\n                phSecondary: \"Select Minor\",\r\n                minorOptions: getMinors(program.value),\r\n                disabledSecondary: false,\r\n                hiddenSecondary: 'visible',\r\n            });\r\n        }\r\n    }\r\n\r\n    choosePrimary = (e, spec) => {\r\n        this.setState({\r\n            valPrimary: spec.value\r\n        })\r\n    }\r\n\r\n    chooseSecondary = (e, minor) => {\r\n        this.setState({\r\n            valSecondary: minor.value\r\n        })\r\n    }\r\n\r\n    clickDone = () => {\r\n        console.log('Running click')\r\n        // console.log(this.state)\r\n        console.log(this.state.valProgram, this.state.valPrimary, this.state.valSecondary)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <Grid centered style={{marginBottom: \"20px\"}}> \r\n                <Grid.Row>  \r\n                    <Dropdown\r\n                        selection\r\n                        search\r\n                        onChange={this.chooseProgram}\r\n                        options= {this.state.programOptions}\r\n                        enabled\r\n                        placeholder= 'Select Program'\r\n                    />\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Dropdown\r\n                        selection\r\n                        search\r\n                        onChange={this.choosePrimary}\r\n                        options= {this.state.majorOptions}\r\n                        disabled= {this.state.disabledPrimary}\r\n                        value= {this.state.valPrimary}\r\n                        placeholder= {this.state.phPrimary}\r\n                        style={{visibility: this.state.hiddenPrimary}}\r\n                    />\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Dropdown\r\n                        selection\r\n                        search\r\n                        onChange={this.chooseSecondary}\r\n                        options= {this.state.minorOptions}\r\n                        disabled= {this.state.disabledSecondary}\r\n                        value= {this.state.valSecondary}\r\n                        placeholder= {this.state.phSecondary}\r\n                        style={{visibility: this.state.hiddenSecondary}}\r\n                    />\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Button\r\n                    onClick={this.clickDone}\r\n                    color=\"red\"\r\n                    >Done! Print to console</Button>\r\n                </Grid.Row>\r\n            </Grid>\r\n            \r\n\r\n        </>;\r\n    }\r\n}\r\n\r\nexport default DropdownDegrees\r\n\r\n{/* <Button\r\nanimated=\"vertical\"\r\ncolor=\"red\"\r\n>\r\n<Button.Content visible>Generate degree planner</Button.Content>\r\n<Button.Content hidden>\r\n    <Icon name=\"arrow down\" />\r\n</Button.Content>\r\n</Button> */}","import React, { useState } from \"react\";\r\nimport DropdownDegrees from \"./dropdownDegrees.js\"\r\nimport { Icon, Button, Container, Modal, Header, Dropdown, Grid, Message } from 'semantic-ui-react'\r\n\r\nfunction exampleReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'OPEN_MODAL':\r\n      return { open: true, dimmer: action.dimmer }\r\n    case 'CLOSE_MODAL':\r\n      return { open: false }\r\n    default:\r\n      throw new Error()\r\n  }\r\n}\r\n\r\nfunction SideBarModal() {\r\n  const [state, dispatch] = React.useReducer(exampleReducer, {\r\n    open: false,\r\n    dimmer: undefined,\r\n  })\r\n  const { open, dimmer } = state\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        onClick={() => dispatch({ type: 'OPEN_MODAL', dimmer: 'blurring' })}\r\n      >\r\n        Click on Me :) \r\n      </Button>\r\n\r\n      <Modal\r\n        closeIcon\r\n        dimmer={dimmer}\r\n        open={open}\r\n        onClose={() => dispatch({ type: 'CLOSE_MODAL' })}\r\n      >\r\n        <Modal.Header textAlign=\"center\">Degree Planner</Modal.Header>\r\n        <Container>\r\n            <Header as=\"h3\" textAlign=\"center\" style={{marginTop: \"5px\"}}>Choose your degree</Header>\r\n            <DropdownDegrees />\r\n        </Container>\r\n        {/* <Modal.Actions>\r\n          <Button color='black' onClick={() => {\r\n              dispatch({ type: 'CLOSE_MODAL' });\r\n            }}>\r\n            Generate\r\n          </Button>\r\n        </Modal.Actions> */}\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SideBarModal\r\n\r\n//DropdownDegrees.clickDone() \r\n\r\n//DropdownDegrees d = new DropdownDegrees(); \r\n//d.clickDone()","import React, {useState} from 'react';\r\nimport DropdownDegrees from \"./dropdownDegrees.js\"\r\nimport SidebarModal from \"./sidebar-modal.js\"\r\nimport { Icon, Button, Container, Modal, Header, Dropdown, Grid, Message } from 'semantic-ui-react'\r\nimport ScrollTo from \"react-scroll-into-view\"\r\n\r\nconst example = [\r\n    { key: 'af', value: 'af', flag: 'af', text: 'Afghanistan' },\r\n    { key: 'ax', value: 'ax', flag: 'ax', text: 'Aland Islands' },\r\n    { key: 'al', value: 'al', flag: 'al', text: 'Albania' },\r\n    { key: 'dz', value: 'dz', flag: 'dz', text: 'Algeria' },\r\n    { key: 'as', value: 'as', flag: 'as', text: 'American Samoa' },\r\n    { key: 'ad', value: 'ad', flag: 'ad', text: 'Andorra' },\r\n    { key: 'ao', value: 'ao', flag: 'ao', text: 'Angola' },\r\n    { key: 'ai', value: 'ai', flag: 'ai', text: 'Anguilla' },\r\n    { key: 'ag', value: 'ag', flag: 'ag', text: 'Antigua' },\r\n    { key: 'ar', value: 'ar', flag: 'ar', text: 'Argentina' },\r\n    { key: 'am', value: 'am', flag: 'am', text: 'Armenia' },\r\n    { key: 'aw', value: 'aw', flag: 'aw', text: 'Aruba' },\r\n    { key: 'au', value: 'au', flag: 'au', text: 'Australia' },\r\n    { key: 'at', value: 'at', flag: 'at', text: 'Austria' },\r\n    { key: 'az', value: 'az', flag: 'az', text: 'Azerbaijan' },\r\n    { key: 'bs', value: 'bs', flag: 'bs', text: 'Bahamas' },\r\n    { key: 'bh', value: 'bh', flag: 'bh', text: 'Bahrain' },\r\n    { key: 'bd', value: 'bd', flag: 'bd', text: 'Bangladesh' },\r\n    { key: 'bb', value: 'bb', flag: 'bb', text: 'Barbados' },\r\n    { key: 'by', value: 'by', flag: 'by', text: 'Belarus' },\r\n    { key: 'be', value: 'be', flag: 'be', text: 'Belgium' },\r\n    { key: 'bz', value: 'bz', flag: 'bz', text: 'Belize' },\r\n    { key: 'bj', value: 'bj', flag: 'bj', text: 'Benin' }\r\n]\r\n\r\nconst Sidebar = (props) => {\r\n    return (\r\n        <Container style={{paddingLeft: \"10px\", paddingRight: \"10px\"}}>\r\n            <Header as=\"h1\" textAlign=\"center\" style={{marginTop: \"10px\"}}>Circles</Header>\r\n            <Message info>\r\n                <p>Circles is a visual degree planner for UNSW students. Choose your program and degree below to begin!</p>\r\n                <SidebarModal />\r\n            </Message>\r\n\r\n            <Grid stretched>\r\n                <Grid.Row>\r\n                    <Container>\r\n                        <Header as=\"h3\" textAlign=\"center\">Choose your courses</Header>\r\n                        <Header as=\"h4\" style={{marginBottom: 0}}>Level 1 Core Courses</Header>\r\n                        <Dropdown\r\n                            fluid\r\n                            selection\r\n                            search\r\n                            multiple\r\n                            options={example}\r\n                            placeholder=\"Select courses\"\r\n                        />\r\n\r\n                        <Header as=\"h4\" style={{marginBottom: 0}}>Level 2 Core Courses</Header>\r\n                        <Dropdown\r\n                            fluid\r\n                            selection\r\n                            search\r\n                            multiple\r\n                            options={example}\r\n                            placeholder=\"Select courses\"\r\n                        />\r\n\r\n                        <Header as=\"h4\" style={{marginBottom: 0}}>Level 3 Core Courses</Header>\r\n                        <Dropdown\r\n                            fluid\r\n                            selection\r\n                            search\r\n                            multiple\r\n                            options={example}\r\n                            placeholder=\"Select courses\"\r\n                        />\r\n                    </Container>\r\n                </Grid.Row>\r\n\r\n                <Container textAlign=\"center\">\r\n                    <ScrollTo selector=\"#DegreePlanner\">\r\n\r\n                        <Button\r\n                            animated=\"vertical\"\r\n                            color=\"red\"\r\n                        >\r\n                            <Button.Content visible>Generate degree planner</Button.Content>\r\n                            <Button.Content hidden>\r\n                                <Icon name=\"arrow down\" />\r\n                            </Button.Content>\r\n                        </Button>\r\n                    </ScrollTo>\r\n\r\n                </Container>\r\n            </Grid>\r\n        </Container>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default Sidebar","import React from \"react\";\r\nimport { Label, Container } from 'semantic-ui-react'\r\n\r\nimport { Draggable } from \"react-beautiful-dnd\"\r\n\r\nexport default class Course extends React.Component {\r\n    render () {\r\n        return (\r\n            <Container>\r\n                <Draggable draggableId={this.props.course.id} index={this.props.index}>\r\n                    {provided => (\r\n                        <div>\r\n                            <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                                <Label style={{margin: \"5px\"}}>{this.props.course.content}</Label>\r\n                            </div>\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Draggable>\r\n            </Container>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { Container, Segment, Header } from 'semantic-ui-react'\r\n\r\nimport Course from \"./degreeplanner-course\"\r\n\r\nimport { Droppable } from \"react-beautiful-dnd\"\r\n\r\nconst SUCCESS = \"#e5fbe5\";\r\nconst ERROR = \"#ffebeb\";\r\n\r\nconst checkTermAvailability = (props, courseId) => {\r\n    const termId = props.term.id.substring(1, 3);\r\n    const termAvailability = props.allCourses[courseId].termsAvailable;\r\n\r\n    return termAvailability.includes(termId) ? SUCCESS : ERROR;\r\n}\r\n\r\nconst checkValidCourses = (props) => {\r\n    const termId = props.term.id.substring(1, 3);\r\n\r\n    for (const courseId of props.term.courseIds) {\r\n        if (!props.allCourses[courseId].termsAvailable.includes(termId)) {\r\n            return ERROR\r\n        }\r\n    }\r\n    return \"white\"\r\n}\r\n\r\nexport default class Term extends React.Component {\r\n    render () {\r\n        return (\r\n            <Container>\r\n                <Droppable droppableId={this.props.term.id}>\r\n                    {(provided, snapshot) => (\r\n                        <Segment style={{backgroundColor: snapshot.isDraggingOver ? checkTermAvailability(this.props, snapshot.draggingOverWith) : checkValidCourses(this.props), transition: \"0.2s ease\"}}>\r\n                            <Header as=\"h3\">{this.props.term.title}</Header>\r\n                            <div ref={provided.innerRef} {...provided.droppableProps} style={{minHeight: \"150px\"}}>\r\n                                {this.props.courses.map((course, index) => <Course key={course.id} course={course} index={index} />)}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        </Segment>\r\n                    )}\r\n                </Droppable>\r\n            </Container>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { Icon, Button, Container, Segment, Header, Dropdown, Grid } from 'semantic-ui-react'\r\n\r\n// import programsJSON from \"../webscraper/programs.json\"\r\n// import specialisationsJSON from \"../webscraper/specialisations.json\"\r\nimport coursesJSON from \"../webscraper/courses.json\"\r\n\r\nimport { DragDropContext } from \"react-beautiful-dnd\"\r\nimport Term from \"./degreeplanner-term\"\r\n\r\nconst selectedCourses = [\"COMP1511\", \"COMP1521\", \"COMP1531\", \"MATH1141\", \"MATH1241\", \"ENGG1000\", \"COMP3331\", \"MATH1081\", \"COMP2521\"];\r\n\r\nconst getCourses = (selectedCourses) => {\r\n    const courses = {}\r\n\r\n    selectedCourses.forEach(c => {\r\n        const termsAvailable = coursesJSON[c].terms.map(term => {\r\n            if (term === \"Summer Term\") return \"TS\"\r\n            if (term === \"Term 1\") return \"T1\"\r\n            if (term === \"Term 2\") return \"T2\"\r\n            if (term === \"Term 3\") return \"T3\"\r\n        })\r\n\r\n        courses[c] = {\r\n            id: c,\r\n            content: `${c} - ${coursesJSON[c].course_name}`,\r\n            termsAvailable: termsAvailable\r\n        }\r\n    })\r\n\r\n    return courses\r\n}\r\n\r\nconst generateTerms = (yearId) => {\r\n    const terms = {}\r\n\r\n    // Terms have id of <YEAR>T<TERM TYPE> eg: 1TS is 1st Year, Summer Term\r\n\r\n    const TSKey = `${yearId}TS`;\r\n    const T1Key = `${yearId}T1`;\r\n    const T2Key = `${yearId}T2`;\r\n    const T3Key = `${yearId}T3`;\r\n    terms[\"termOrder\"] = [TSKey, T1Key, T2Key, T3Key];\r\n\r\n    terms[TSKey] = {\r\n        id: TSKey,\r\n        title: \"Summer Term\",\r\n        courseIds: []\r\n    }\r\n\r\n    terms[T1Key] = {\r\n        id: T1Key,\r\n        title: \"Term 1\",\r\n        courseIds: []\r\n    }\r\n\r\n    terms[T2Key] = {\r\n        id: T2Key,\r\n        title: \"Term 2\",\r\n        courseIds: []\r\n    }\r\n\r\n    terms[T3Key] = {\r\n        id: T3Key,\r\n        title: \"Term 3\",\r\n        courseIds: []\r\n    }\r\n\r\n    return terms;\r\n}\r\n\r\nconst populateTerms = (plan) => {\r\n    plan[\"1\"][\"1T2\"].courseIds = [\"COMP1521\", \"MATH1241\", \"COMP2521\"];\r\n    plan[\"1\"][\"1T1\"].courseIds = [\"COMP1511\", \"MATH1141\", \"ENGG1000\"];\r\n    plan[\"1\"][\"1T3\"].courseIds = [\"MATH1081\", \"COMP3331\", \"COMP1531\"];\r\n\r\n    return plan;\r\n}\r\n\r\nconst generatePlan = (years) => {\r\n    let plan = {};\r\n\r\n    for (let year = 1; year <= years; year++) {\r\n        console.log(year)\r\n        plan[year.toString()] = generateTerms(year)\r\n    }\r\n    console.log(\"generated years\", plan)\r\n\r\n    plan = populateTerms(plan)\r\n\r\n    return plan;\r\n}\r\n\r\nclass DegreePlanner extends React.Component {\r\n    state = {\r\n        courses: getCourses(selectedCourses),\r\n        plan: generatePlan(4),\r\n    };\r\n\r\n    onDragEnd = result => {\r\n        const {destination, source, draggableId} = result;\r\n\r\n        // Null destination means label was not dragged into a droppable\r\n        if (!destination) return;\r\n\r\n        // Label was dragged into the same position\r\n        if (destination.droppableId === source.droppableId && destination.index === source.index) return;\r\n\r\n        const sourceYear = source.droppableId[0];\r\n        const start = this.state.plan[sourceYear][source.droppableId];\r\n        const destinationYear = destination.droppableId[0];\r\n        const finish = this.state.plan[destinationYear][destination.droppableId];\r\n\r\n        if (start === finish) {\r\n            const newCourseIds = Array.from(start.courseIds);\r\n            // console.log(\"before\", newCourseIds)\r\n            newCourseIds.splice(source.index, 1); // Remove 1 item at source.index\r\n            newCourseIds.splice(destination.index, 0, draggableId); // Insert dragggableId into destination\r\n            // console.log(\"after\", newCourseIds)\r\n            const newTerm = {\r\n                ...start,\r\n                courseIds: newCourseIds\r\n            };\r\n\r\n            const newState = {\r\n                ...this.state,\r\n                plan: {\r\n                    ...this.state.plan,\r\n                    [sourceYear]: {\r\n                        ...this.state.plan[sourceYear],\r\n                        [newTerm.id]: newTerm,\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setState(newState);\r\n            return;\r\n        }\r\n\r\n        // Moving from one list to another\r\n        const startCourseIds = Array.from(start.courseIds)\r\n        startCourseIds.splice(source.index, 1);\r\n\r\n        const newStart = {\r\n            ...start,\r\n            courseIds: startCourseIds,\r\n        }\r\n\r\n        const finishCourseIds = Array.from(finish.courseIds)\r\n        finishCourseIds.splice(destination.index, 0, draggableId);\r\n\r\n        const newFinish = {\r\n            ...finish,\r\n            courseIds: finishCourseIds\r\n        }\r\n\r\n        const newState = this.state;\r\n        newState.plan[sourceYear][newStart.id] = newStart;\r\n        newState.plan[destinationYear][newFinish.id] = newFinish;\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    populateTerms = () => {\r\n        this.state.plan[\"1\"][\"1T2\"].courseIds = [\"COMP1521\", \"MATH1241\", \"COMP2521\"];\r\n        this.state.plan[\"1\"][\"1T1\"].courseIds = [\"COMP1511\", \"MATH1141\", \"ENGG1000\"];\r\n        this.state.plan[\"1\"][\"1T3\"].courseIds = [\"MATH1081\", \"COMP3331\", \"COMP1531\"];\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Segment>\r\n                <Container>\r\n                    <Header as=\"h2\" textAlign=\"center\" style={{marginTop: \"50px\"}}>Plan your degree</Header>\r\n                    <p>The following degree plan has been generated based on the courses you have selected above. By default, our algorithm:</p>\r\n                    <ul>\r\n                        <li>allocates 18 UOC per term</li>\r\n                        <li>does not allocate courses in Summer Term</li>\r\n                        <li>ensures courses have their prerequisites met</li>\r\n                        <li>ensures courses can be taken in allocated terms</li>\r\n                    </ul>\r\n\r\n                    <p>Drag and drop the courses below to further customise your degree plan!</p>\r\n\r\n                    <p><em>Please note that our data is scraped from the UNSW Handbook and may have some inconsistencies.</em></p>\r\n                    <p><em>Also note, you can drag a course into a term even if it is not offered as our data may be out of date, please double check :) </em></p>\r\n\r\n                    <DragDropContext onDragEnd={this.onDragEnd}>\r\n                        {Object.keys(this.state.plan).map(yearId => (\r\n                            <Grid columns={4}>\r\n                                {this.state.plan[yearId].termOrder.map(termId => {\r\n                                    const term = this.state.plan[yearId][termId];\r\n                                    const courses = term.courseIds.map(courseId => this.state.courses[courseId]);\r\n                                    return (\r\n                                        <Grid.Column>\r\n                                            <Term key={term.id} term={term} courses={courses} allCourses={this.state.courses}/>\r\n                                        </Grid.Column>\r\n                                    );\r\n                                })}\r\n                            </Grid>\r\n                        ))}\r\n                    </DragDropContext>\r\n                    <Segment style={{backgroundColor: \"lightpink\"}}>\r\n                        <Header as=\"h3\">Error messages</Header>\r\n                        <p>None</p>\r\n                    </Segment>\r\n                </Container>\r\n            </Segment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DegreePlanner","// HELPER FUNCTION for unselecting nodes\r\n// Given a selected node, unselects it and pushes it onto a queue to be analysed\r\n// ==================ON THE QUEUE==========================\r\n// Unshift node and Manages its prerequisites as follows:\r\n//  - if the prereq node is selected, turn selected edges into potential edges\r\n//  - if otherwise, do nothing\r\n// Determine the status of the current node:\r\n//  - if it meets prerequisites, leave it as is.\r\n//  - if it does not meet prerequisites, make it unselectable (delete from selectable/selected)\r\n// For each unlock:\r\n// - if the current node is not selected, turn edge grey no matter what\r\n// - if the current node is selected, keep edge as it is\r\n// - push the unlock onto queue if it was selectable/selected\r\nimport getElement from './getelement.js';\r\nimport checkPrerequisites from './checkprerequisites.js';\r\n\r\nexport default function unselectNode(elements, node, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    // Unselect this node\r\n    delete selectedNodes[node.id];\r\n    var unselectQueue = [node.id];\r\n    while (unselectQueue.length !== 0) {\r\n        // Unshift and get the node\r\n        const current = getElement(unselectQueue.shift(), elements);\r\n        \r\n        // Analyse its prerequisites\r\n        // If the prereq node is selected, turn selected edge into potential edges\r\n        if (current.data.conditions.prerequisites !== null) {\r\n            for (const prereq of current.data.conditions.prerequisites) {\r\n                if (selectedNodes.hasOwnProperty(prereq)) {\r\n                    if (selectedEdges.hasOwnProperty('e' + prereq + '-' + current.id)) {\r\n                        delete selectedEdges['e' + prereq + '-' + current.id];\r\n                        potentialEdges['e' + prereq + '-' + current.id] = 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Determine the status of the current node\r\n        if (! checkPrerequisites(current, selectedNodes)) {\r\n            // Does not meet prerequisites. Make it unselectable\r\n            if (selectableNodes.hasOwnProperty(current.id)) delete selectableNodes[current.id];\r\n            else if (selectedNodes.hasOwnProperty(current.id)) delete selectedNodes[current.id];\r\n        } else {\r\n            // Meets prerequisites. Make it selectable\r\n            if (selectedNodes.hasOwnProperty(current.id)) delete selectedNodes[current.id];\r\n            selectableNodes[current.id] = 1;\r\n        }\r\n\r\n        // Analyse its unlocks\r\n        if (current.data.unlocks !== null) {\r\n            for (const unlockCourse of current.data.unlocks) {\r\n                if (! selectedNodes.hasOwnProperty(current.id)) {\r\n                    // Make edge grey\r\n                    if (potentialEdges.hasOwnProperty('e' + current.id + '-' + unlockCourse)) delete potentialEdges['e' + current.id + '-' + unlockCourse];\r\n                    else if (selectedEdges.hasOwnProperty('e' + current.id + '-' + unlockCourse)) delete selectedEdges['e' + current.id + '-' + unlockCourse];\r\n                }\r\n\r\n                if (selectedNodes.hasOwnProperty(unlockCourse) || selectableNodes.hasOwnProperty(unlockCourse)) {\r\n                    unselectQueue.push(unlockCourse);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","// Helper functions to highlight nodes and edges\r\n// Will highlight/unhighlight nodes based on selectedNodes dictionary\r\nimport { isEdge } from \"react-flow-renderer\";\r\n\r\nexport default function highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges) {\r\n    const newElements = elements.map((e) => {\r\n        // It is an edge\r\n        if (isEdge(e)) {\r\n            if (selectedEdges.hasOwnProperty(e.id)) {\r\n                if (hoverEdges.hasOwnProperty(e.id)) return {...e, style: {...e.style, stroke: 'red', strokeWidth: 5, opacity: 1}, animated: true};\r\n                else return {...e, style: {...e.style, stroke: 'red', strokeWidth: 5, opacity: 1}, animated: false};\r\n            } else if (potentialEdges.hasOwnProperty(e.id)) {\r\n                if (hoverEdges.hasOwnProperty(e.id)) return {...e, style: {...e.style, stroke: 'blue', strokeWidth: 2.5, opacity: 1}, animated: true};\r\n                else return {...e, style: {...e.style, stroke: 'blue', strokeWidth: 1, opacity: 0.3}, animated: false};\r\n            } else if (hoverEdges.hasOwnProperty(e.id)) {\r\n                return {...e, style: {...e.style, stroke: 'purple', strokeWidth: 2.5, opacity: 1}, animated: true};\r\n            } else {\r\n                return {...e, style: {...e.style, stroke: 'grey', strokeWidth: 1, opacity: 0.2}, animated: false};\r\n            } \r\n        }\r\n\r\n        // It is a node\r\n        if (selectedNodes.hasOwnProperty(e.id)) {\r\n            if (e.style.background === 'white') {\r\n                // It was previously a selectable node. Adjust colours accordingly\r\n                const backgroundColour = e.style.color;\r\n                return {...e, style: {...e.style, color: 'white', background: backgroundColour, filter: 'brightness(1)'}}\r\n            } else {\r\n                // It was an unselected node or an already selected node. Simply make sure its brightness is adjusted\r\n                return {...e, style: {...e.style, filter: 'brightness(1)'}};\r\n            }\r\n        } else if (selectableNodes.hasOwnProperty(e.id)) {\r\n            if (e.style.background === 'white') {\r\n                // It was already a selectable node. Do not need to adjust\r\n                return {...e};\r\n            } else {\r\n                // It was an unselected node or an already selected node. Adjust text colour and background\r\n                const textColour = e.style.background;\r\n                return {...e, style: {...e.style, color: textColour, background: 'white', filter: 'brightness(1)'}};\r\n            }\r\n        } else {\r\n            if (e.style.background === 'white') {\r\n                // It was a selectable node previously. Adjust colours accordingly\r\n                const backgroundColour = e.style.color;\r\n                return {...e, style: {...e.style, color: 'white', background: backgroundColour, filter: 'brightness(0.75)'}}; \r\n            } else {\r\n                // It was either unselected or an already selected node. Simply adjust brightness\r\n                return {...e, style: {...e.style, filter: 'brightness(0.75)'}};\r\n            }\r\n        }\r\n    })\r\n\r\n    return newElements;\r\n}","import React, {useState} from 'react';\r\nimport ReactFlow, {Background, Controls, getConnectedEdges, isNode, isEdge, useStoreState, useStoreActions, ReactFlowProvider, EdgeText} from 'react-flow-renderer';\r\n\r\nimport CustomNode1 from '../../components/customnode1.js';\r\nimport CustomNode2 from '../../components/customnode2.js';\r\nimport HeaderNode1 from '../../components/headernode1.js';\r\n\r\nimport HoverInfo from '../../components/hoverinfo.js';\r\nimport hoverPrerequisites from '../../components/hoverprerequisites.js';\r\nimport unhoverPrerequisites from '../../components/unhoverprerequisites.js';\r\n\r\nimport DropdownD from \"../../components/dropdownDegrees.js\"\r\nimport { Grid, Segment } from 'semantic-ui-react'\r\nimport Sidebar from \"../../components/sidebar.js\"\r\nimport pkg from 'semantic-ui-react/package.json'\r\n\r\nimport DegreePlanner from \"../../components/degreeplanner.js\"\r\nimport DropdownDegrees from '../../components/dropdownDegrees';\r\n\r\nimport positionHelper from '../../components/positionhelper.js';\r\nimport selectNode from '../../components/selectnode.js';\r\nimport unselectNode from '../../components/unselectnode.js';\r\nimport highlightElements from '../../components/highlightelements.js';\r\nimport getSelectable from '../../components/getselectable.js';\r\nimport checkPrerequisites from '../../components/checkprerequisites';\r\nimport exclusionSwap from '../../components/exclusionswap.js';\r\n\r\nvar elementsData = require(\"./data.json\");\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {\r\n    'SENGAH': 1\r\n}\r\nvar selectedEdges = {};\r\nvar selectableNodes = {};\r\nvar potentialEdges = {};\r\nvar hoverEdges = {};\r\n\r\n// Load up the chart with initial selectable nodes and edges\r\nfor (const node of nodesData) {\r\n    if (selectedNodes.hasOwnProperty(node.id)) {\r\n        if (node.data.unlocks === null) continue;\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n        }\r\n    } else if (checkPrerequisites(node, nodesData)) {\r\n        selectableNodes[node.id] = 1;\r\n    }\r\n}\r\n\r\nvar exclusionGroups = require(\"./data_exclusion.json\");\r\nvar exclusionNodes = {};\r\nfor (const group of exclusionGroups) {\r\n    for (const exclusion of group) {\r\n        exclusionNodes[exclusion] = 1;\r\n    }\r\n}\r\n\r\nelementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\n\r\nconst onLoad = (reactFlowInstance) => {\r\n    for (var group of exclusionGroups) {\r\n        const last = group.pop();\r\n    \r\n        for (var course of elementsData) {\r\n            if (last === course.id) {\r\n                course.isHidden = true;\r\n                console.log(\"Hiding \" + course.id);\r\n                // Get all the edges and hide them too\r\n                for (var edge of elementsData) {\r\n                    if (isNode(edge)) continue;\r\n                    if (edge.source === last || edge.target === last) {\r\n                        console.log(\"hiding \" + edge.id);\r\n                        edge.isHidden = true;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        group.push(last);\r\n    }\r\n    reactFlowInstance.setTransform({x: 100, y: 100, zoom: 1});\r\n};\r\n\r\nconst nodeTypes = {\r\n    custom1: CustomNode1,\r\n    custom2: CustomNode2,\r\n    header1: HeaderNode1\r\n};\r\n\r\nconst layoutStyle = {overflowX: \"hidden\", overflowY: \"overlay\", width: \"100vw\", height: \"100vh\"};\r\n\r\n\r\nconst BESengah = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverText, setHoverText] = useState(false);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    const [sidebarOpen, setSidebarOpen] = useState(false);\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n    const [layout, setLayout] = useState(layoutStyle);\r\n\r\n    const selectUnselect = (element) => {\r\n        // NOTE: Might not need this?????\r\n        // EXPLANATION: Reason we dont need it is because we have to leave node\r\n        // anyways to hover another node. But maybe good practise to have just in case\r\n        // Unhover edges which lit up on nodeMouseEnter\r\n        unhoverPrerequisites(hoverEdges);\r\n\r\n        // 1. Select the node and fill in edges.\r\n        // - Deal with unselecting nodes\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n\r\n        // 2. Determine which nodes are now selectable\r\n        // - Determine which previously selectable nodes are now unselectable\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n\r\n        // After selecting node:\r\n        /*console.log(\"==========SelectedNodes==========\");\r\n        console.log(selectedNodes);\r\n        console.log(\"==========SelectedEdges==========\");\r\n        console.log(selectedEdges);\r\n        console.log(\"==========SelectableNodes==========\");\r\n        console.log(selectableNodes);\r\n        console.log(\"==========PotentialEdges==========\");\r\n        console.log(potentialEdges);*/\r\n\r\n        // Render graph accordingly\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const toggleExclusion = (element) => {\r\n        // TODO: ARE there courses which do not \r\n        // For all immediate edges of the element, swap\r\n        // with the exclusion course\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    // ==========ONCLICK==========\r\n    const onElementClick = (event, element) => {\r\n        console.log(\"ONELEMENTCLICK\");\r\n        if (isEdge(element)) return; // Don't care about edges\r\n        if (element.id === 'SENGAH') return; // Cannot click on main node\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return; // Cannot select non selectable nodes\r\n\r\n        // Determine double or single click for exclusion nodes\r\n        // This will prevent normal nodes from waiting the double click delay\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 150);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            // Not an exclusion node.\r\n            selectUnselect(element);\r\n        }\r\n    };\r\n    // ===========================\r\n\r\n    // ==========ONHOVER==========\r\n    const onNodeMouseEnter = (event, node) => {\r\n        // Display node information in top left\r\n        setHoverText(true);\r\n        setHoverNode(node);\r\n\r\n        // If the node is unselected, highlight prerequisite edges in purple\r\n        //if ((!selectedNodes.hasOwnProperty(node.id)) && (!selectableNodes.hasOwnProperty(node.id))) {\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        //}\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        setHoverText(false);\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    let hoverDisplay;\r\n    if (hoverText) {\r\n        hoverDisplay = <HoverInfo node={hoverNode}/>\r\n    }\r\n    // ===========================\r\n\r\n    const onNodeContextMenu = (event, node) => {\r\n        console.log(\"THE EVEENT\");\r\n        console.log(event);\r\n    }\r\n\r\n    const onNodeDragStop = (event, node) => {\r\n        for (var e of elements) {\r\n            if (e.id === node.id) {\r\n                e.position.x = node.position.x;\r\n                e.position.y = node.position.y;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const disableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'hidden'});\r\n    }\r\n\r\n    const enableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'overlay'});\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div style={layout}>\r\n            <Grid columns={2} divided>\r\n                <Grid.Column width=\"12\">\r\n                    <div onMouseEnter={disableBodyScroll} onMouseLeave={enableBodyScroll}>\r\n                        <ReactFlowProvider>\r\n                            <ReactFlow\r\n                                elements={elements}\r\n                                style={{width: '100%', height: '100vh'}}\r\n                                onLoad={onLoad}\r\n                                nodeTypes={nodeTypes}\r\n                                nodesConnectable={false}\r\n                                onElementClick={onElementClick}\r\n                                minZoom={0.5}\r\n                                //setInitTransform={TransformUpdater({x: 100, y: 100, z: 1})}\r\n                                //nodesDraggable={false}\r\n                                onNodeMouseEnter={onNodeMouseEnter}\r\n                                onNodeMouseLeave={onNodeMouseLeave}\r\n                                selectNodesOnDrag={false}\r\n                                onNodeContextMenu={onNodeContextMenu}\r\n                                onNodeDragStop={onNodeDragStop}\r\n                            >\r\n                            </ReactFlow>\r\n                            {hoverDisplay}\r\n                        </ReactFlowProvider>\r\n                    </div>\r\n                </Grid.Column>\r\n                <Grid.Column width=\"4\">\r\n                    <Sidebar/>\r\n                    {/* <DegreePlanner/> */}\r\n                </Grid.Column>\r\n            </Grid>\r\n            <div id=\"DegreePlanner\">\r\n                <DegreePlanner />\r\n            </div>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\nBESengah.whyDidYouRender = true;\r\n\r\nexport default BESengah;","// HELPER FUNCTION for selecting nodes\r\n// Given a selectable node, highlights potential edges and fills in prereq edges\r\nimport checkPrerequisites from './checkprerequisites.js';\r\nimport getElement from './getelement.js';\r\n\r\nexport default function selectNode(elements, node, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    selectedNodes[node.id] = 1;\r\n    delete selectableNodes[node.id];\r\n\r\n    // Turn its prerequisite potential edges into actual edges\r\n    // Keep grey edges as grey\r\n    if (node.data.conditions.prerequisites !== null) {\r\n        for (const prereq of node.data.conditions.prerequisites) {\r\n            if (potentialEdges.hasOwnProperty('e' + prereq + '-' + node.id)) {\r\n                selectedEdges['e' + prereq + '-' + node.id] = 1;\r\n                delete potentialEdges['e' + prereq + '-' + node.id];\r\n            }\r\n        }\r\n    }\r\n\r\n    // Unlock its future edges\r\n    if (node.data.unlocks !== null) {\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            // Edges from node to unlocks should be unselected\r\n            if (selectedNodes.hasOwnProperty(unlockCourse)) {\r\n                // This course is already selected. Make the edge a selected edge\r\n                selectedEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n            } else {\r\n                // This course is either unselected or selectable\r\n                // In either case, add potential edge\r\n                potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n            }\r\n        }            \r\n    }\r\n\r\n    return;\r\n}\r\n","// HELPER FUNCTION to determine which previously unselectable nodes\r\n// are now selectable\r\nimport checkPrerequisites from './checkprerequisites.js';\r\nimport getElement from './getelement.js';\r\n\r\nexport default function getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    // TODO: Deal with outsider nodes\r\n\r\n    // Analyse the target of potential edges for potential nodes\r\n    var analyseNodes = {};\r\n    const potentialEdgesKeys = Object.keys(potentialEdges);\r\n    for (var edge of potentialEdgesKeys) {\r\n        // Get the target course\r\n        const target = edge.split('-')[1];\r\n\r\n        if ((! selectedNodes.hasOwnProperty(target)) && (! selectableNodes.hasOwnProperty(target))) {\r\n            analyseNodes[edge.split('-')[1]] = 1;\r\n        }\r\n    }\r\n\r\n    const analyseNodesKeys = Object.keys(analyseNodes);\r\n    //console.log(\"==========ANALYSE NODES KEYS===========\");\r\n    //console.log(analyseNodesKeys);\r\n    //console.log(\"==============ELEMENTS===============\");\r\n    //console.log(elements);\r\n\r\n    for (const nodeID of analyseNodesKeys) {\r\n        // Determine if the prerequisite has been met\r\n        // For now, assume prerequisites are met\r\n        const node = getElement(nodeID, elements);\r\n        //console.log(node);\r\n        \r\n        if (checkPrerequisites(node, selectedNodes)) {\r\n            selectableNodes[nodeID] = 1;\r\n        } else {\r\n            if (selectableNodes.hasOwnProperty(nodeID)) delete selectableNodes[nodeID];\r\n            // TODO: Deal with selected nodes cases? (e.g. unselecting a child???)\r\n\r\n        }\r\n    }\r\n}","// HELPER FUNCTION to toggle exclusion courses\r\n// Will hide the current course and its edges, unhide the next course and edges\r\n// in the queue. Finds new edges to show by regex substitution???\r\nimport { getConnectedEdges } from 'react-flow-renderer';\r\nimport getElement from './getelement.js';\r\nimport checkPrerequisites from './checkprerequisites.js';\r\nimport unselectNode from './unselectnode.js';\r\n\r\nexport default function exclusionSwap(node, elements, edges, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups) {\r\n    console.log(\"EXCLUSION SWAP\");\r\n    console.log(exclusionGroups);\r\n    console.log(node.id);\r\n    const newElements = [...elements];\r\n    for (var group of exclusionGroups) {\r\n        console.log(\"CHECKING\", group);\r\n        if (group.includes(node.id)) {\r\n            console.log(\"FOUND THE EXCLUSION GROUP\");\r\n            console.log(group);\r\n\r\n            // Move this to the back\r\n            const prevCourse = group.shift();\r\n            group.push(prevCourse);\r\n\r\n            // Current course we need to display is now at front of queue\r\n            const curCourse = group[0];\r\n\r\n            console.log(prevCourse);\r\n            console.log(curCourse);\r\n\r\n\r\n            // Toggle the nodes themselves accordingly\r\n            for (var e of elements) {\r\n                if (e.id === prevCourse) {\r\n                    console.log(e);\r\n                    console.log(\"HIDING\");\r\n                    console.log(prevCourse);\r\n                    e.isHidden = true;\r\n                    console.log(e);\r\n                } else if (e.id === curCourse) {\r\n                    console.log(e);\r\n                    console.log(\"REVEALING\");\r\n                    console.log(curCourse);\r\n                    e.isHidden = false;\r\n                    console.log(e);\r\n                }\r\n            }\r\n\r\n            // Determine state of the nodes (E.g. COMP6441 can be selectable\r\n            // whilst COMP6841 is not)\r\n            var curNode = getElement(curCourse, elements);\r\n            if (checkPrerequisites(curNode, selectedNodes)) {\r\n                // The new node is selectable\r\n                console.log(\"================== SELECTABLE\", curCourse);\r\n                selectableNodes[curCourse] = 1;\r\n                \r\n                // Determine previous node condition\r\n                if (selectedNodes.hasOwnProperty(prevCourse)) {\r\n                    console.log(\"PREVIOUS SELECTED\", prevCourse);\r\n                    delete selectedNodes[prevCourse];\r\n                    delete selectableNodes[curCourse];\r\n                    selectedNodes[curCourse] = 1;\r\n                } else if (selectableNodes.hasOwnProperty(prevCourse)) {\r\n                    console.log(\"PREVIOUS SELECTABLE\", prevCourse);\r\n                    delete selectableNodes[prevCourse];\r\n                }\r\n            } else {\r\n                // The new node is not selectable\r\n                // Unselect the original node\r\n                unselectNode(elements, node, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            }         \r\n\r\n            // Get all the edges of the previous course and hide all of them\r\n            // Then use regex sub to determine the new edges to reveal\r\n            // Transfer over selected, potential and hover edges if they are in newedgeslist\r\n            var edgesList = getConnectedEdges([node], edges);\r\n            var newEdgesList = getConnectedEdges([curNode], edges);\r\n            var edgesIds = [];\r\n            var newEdgesIds = [];\r\n            for (const edge of edgesList) {\r\n                edgesIds.push(edge.id);\r\n            }\r\n            for (const newEdge of newEdgesList) {\r\n                newEdgesIds.push(newEdge.id);\r\n            }        \r\n            var checkedEdges = [];\r\n\r\n            // Go through each edge we need to hide and check what we should do\r\n            // with the edge in hideEdgesList\r\n            for (const edge of edgesList) {\r\n                var hideEdge = getElement(edge.id, elements);\r\n                hideEdge.isHidden = true;\r\n                var newEdgeId = hideEdge.id.replace(prevCourse, curCourse);\r\n                if (getElement(newEdgeId, edges) !== null) {\r\n                    checkedEdges.push(newEdgeId);\r\n                } \r\n\r\n                // If selected, unselect it\r\n                if (selectedEdges.hasOwnProperty(hideEdge.id)) {\r\n                    delete selectedEdges[hideEdge.id];\r\n                    if (newEdgesIds.includes(newEdgeId)) {\r\n                        // This is in the newEdges list. Transfer the edge property\r\n                        selectedEdges[newEdgeId] = 1;\r\n                    }\r\n                }\r\n\r\n                // If potential, unpotential it\r\n                if (potentialEdges.hasOwnProperty(hideEdge.id)) {\r\n                    delete potentialEdges[hideEdge.id];\r\n                    if (newEdgesIds.includes(newEdgeId)) {\r\n                        // This is in the newEdges list. Transfer the edge property\r\n                        potentialEdges[newEdgeId] = 1;\r\n                    }\r\n                }\r\n\r\n                // If hover, unhover it\r\n                if (hoverEdges.hasOwnProperty(hideEdge.id)) {\r\n                    delete hoverEdges[hideEdge.id];\r\n                    if (newEdgesIds.includes(newEdgeId)) {\r\n                        // This is in the newEdges list. Transfer the edge property\r\n                        hoverEdges[newEdgeId] = 1;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            console.log(\"CHECKED EDGES\", checkedEdges);\r\n            \r\n            for (const edge of edgesIds) {\r\n                const newEdgeId = edge.replace(prevCourse, curCourse);\r\n                if (! checkedEdges.includes(newEdgeId)) {\r\n                    // Old edge which has not been transferred to new edge.\r\n                    // Deal with the TARGET NODE SELECTABILITY right here\r\n                    var target = newEdgeId.split('-')[1];\r\n                    console.log(\"CHECKING\", newEdgeId);\r\n                    console.log(\"TARGET IS\", target);\r\n                    // Note that we cannot use newEdge.target as this edge\r\n                    // DOES NOT EXIST ( i think )\r\n\r\n                    // TODO: TEMPORARY FIX. Make sure target is not current course\r\n                    if (target === curCourse) continue;\r\n\r\n                    if (selectableNodes.hasOwnProperty(target)) {\r\n                        console.log(\"Deleting \" + target);\r\n                        delete selectableNodes[target];\r\n                    }\r\n                }\r\n            }\r\n\r\n            // For each edge, show it IF TARGET AND SOURCE ARE NOT HIDDEN\r\n            // Will also show any additional edges\r\n            // (Example: COMP6441, COMP6841. COMP6841 -> COMP6448 but COMP6441 does not)\r\n            for (const newEdge of newEdgesList) {\r\n                var edge = getElement(newEdge.id, elements);\r\n                const sourceNode = getElement(edge.source, elements);\r\n                const targetNode = getElement(edge.target, elements);\r\n                if ((!sourceNode.isHidden) && (!targetNode.isHidden)) {\r\n                    // Show the edge if both nodes are not hidden\r\n                    edge.isHidden = false;    \r\n                }\r\n\r\n                // Determine if this edge has been checked before\r\n                if (checkedEdges.includes(newEdge.id)) {\r\n                    // It has been checked before\r\n                    // TODO: THIS CAN BREAK if both nodes have same edges\r\n                    // but one has an additional prerequisite??????\r\n                    continue;\r\n                } else {\r\n                    console.log(newEdge.id + \" NOT BEEN CHECKED BEFORE\")\r\n                    // It has NOT been checked before\r\n                    if (selectedNodes.hasOwnProperty(curCourse)) {\r\n                        console.log(curCourse + \" was previously seleted\");\r\n                        potentialEdges[newEdge.id] = 1;\r\n                        // Check if the target node is selectable\r\n                        if (! selectableNodes.hasOwnProperty(edge.target)) {\r\n                            if (checkPrerequisites(targetNode, selectedNodes)) {\r\n                                console.log(edge.target + \" DOES MEET PREREQS\");\r\n                                selectableNodes[targetNode.id] = 1;\r\n                            } else {\r\n                                console.log(edge.target + \" DOES NOT MEET PREREQS\");\r\n                            }\r\n                        }\r\n                    } else {\r\n                        console.log(curCourse + \" was not previously selected\")\r\n                        // The node was not selected before. Delete any potential edges\r\n                        // Make target node unselectable if prereqs are not met\r\n                        if (potentialEdges.hasOwnProperty(edge.id)) {\r\n                            console.log(\"DELETING \" + edge.id);\r\n                            delete potentialEdges[edge.id];\r\n                            if (selectableNodes.hasOwnProperty(edge.target)) {\r\n                                console.log(edge.target + \" WAS SELECTABLE\")\r\n                                if (! checkPrerequisites(targetNode, selectedNodes)) {\r\n                                    console.log(edge.target + \" DOES NOT MEET PREREQS\");\r\n                                    delete selectableNodes[targetNode.id];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            /*for (const newEdge of newEdgesList) {\r\n                for (const edge of newElements) {\r\n                    if (newEdge.id === edge.id) {\r\n                        const sourceNode = getElement(edge.source, elements);\r\n                        const targetNode = getElement(edge.target, elements);\r\n                        if ((!sourceNode.isHidden) && (!targetNode.isHidden)) {\r\n                            edge.isHidden = false;\r\n                            \r\n                            \r\n                            // If the new node is selected, make this edge blue\r\n                            // Else, make this edge grey. Deals with differing edge\r\n                            // cases COMP6441 and COMP6841\r\n                            if (selectedNodes.hasOwnProperty(curCourse)) {\r\n                                potentialEdges[edge.id] = 1;\r\n                                // Make sure the target node is selectable\r\n                                if (! selectableNodes.hasOwnProperty(edge.target)) {\r\n                                    if (checkPrerequisites(targetNode, selectedNodes)) {\r\n                                        selectableNodes[targetNode.id] = 1;\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                if (potentialEdges.hasOwnProperty(edge.id)) {\r\n                                   delete potentialEdges[edge.id];\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }*/\r\n\r\n\r\n            break;\r\n        }\r\n    }\r\n\r\n    return newElements;\r\n}","// HELPER FUNCTION to highlight prerequisites in purple on hover\r\n// When hovering over an unselected node, show a path of edges\r\n// which will stop at a selected/selectable node\r\nimport getElement from './getelement.js';\r\n\r\nexport default function hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges) {\r\n    if (node.data.conditions.prerequisites === null) return;\r\n    // Get all selected edges one layer down and add to hover edges\r\n    for (const prereq of node.data.conditions.prerequisites) {\r\n        if (selectedEdges.hasOwnProperty('e' + prereq + '-' + node.id)) {\r\n            hoverEdges['e' + prereq + '-' + node.id] = 1;\r\n        }\r\n    }\r\n\r\n    // hoverEdge all unselected (AND POTENTIAL???) edges until we hit selected/selectable node\r\n    var prereqQueue = [node.id];\r\n    while (prereqQueue.length !== 0) {\r\n        const current = getElement(prereqQueue.shift(), elements);\r\n        // Make sure this course exists as a node in our map\r\n        if (current === null) continue;\r\n\r\n        if (current.data.conditions.prerequisites === null) continue;\r\n\r\n        for (const prereq of current.data.conditions.prerequisites) {\r\n            if (!selectedEdges.hasOwnProperty('e' + prereq + '-' + current.id)) {\r\n                hoverEdges['e' + prereq + '-' + current.id] = 1;\r\n            }\r\n            /*if ((!selectedEdges.hasOwnProperty('e' + prereq + '-' + current.id)) && (!potentialEdges.hasOwnProperty('e' + prereq + '-' + current.id))) {\r\n                hoverEdges['e' + prereq + '-' + current.id] = 1;\r\n            }*/\r\n\r\n            if ((!selectedNodes.hasOwnProperty(prereq)) && (!selectableNodes.hasOwnProperty(prereq))) {\r\n                prereqQueue.push(prereq);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import React, {useState, Fragment} from 'react';\r\nimport ReactFlow, {Background, Controls, MiniMap} from 'react-flow-renderer';\r\n\r\nvar initialElements = [\r\n    {id: '1', style: {opacity: 1}, position: {x: 0, y: 0}, data: {label: 'VINCENT'}, type: 'default'},\r\n    {id: '2', style: {opacity: 1}, position: {x: 0, y: 100}, data: {label: 'HAYES'}, type: 'default'},\r\n    {id: '3', style: {opacity: 1}, position: {x: 0, y: -100}, data: {label: 'JAMES'}, type: 'default'},\r\n    \r\n    {id: 'e1-2', source: '1', target: '2', type: 'step', animated: true}\r\n];\r\n\r\nconst onLoad = (reactFlowInstance) => {\r\n    reactFlowInstance.fitView();\r\n}\r\n\r\nconst Teaching = () => {\r\n    const [elements, setElements] = useState(initialElements);\r\n    const [isDraggable, setIsDraggable] = useState(true);\r\n\r\n    const addNode = () => {\r\n        setElements(e => e.concat({\r\n            id: (e.length+1).toString(),\r\n            data: {label: 'new node' + e.length},\r\n            position: {x: Math.random() * window.innerWidth, y: Math.random() * window.innerHeight}\r\n        }));\r\n    };\r\n    \r\n\r\n    const onClick = (event, element) => {\r\n        console.log('hi');\r\n        setElements((els) =>\r\n            els.map((e) => {\r\n                if (e.id === element.id) {\r\n                    console.log(element);    \r\n                    console.log(e.style.opacity);\r\n                    return e;\r\n                }\r\n                return e;\r\n            })\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <ReactFlow\r\n                elements={elements}\r\n                onLoad={onLoad}\r\n                style={{width: \"100%\", height: \"99vh\"}}\r\n                onElementClick={onClick}\r\n                nodesDraggable={false}\r\n            >\r\n                <Background />\r\n                <MiniMap \r\n                    nodeColor = {n=>{\r\n                        if (n.data.label === 'VINCENT') return 'red';\r\n                        return 'blue';\r\n                    }}\r\n                />\r\n                <Controls />\r\n            </ReactFlow>\r\n            <div>\r\n                <button type=\"button\" onClick={addNode}>\r\n                    ADD NEW NODE HERE!!!!\r\n                </button>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Teaching;","import React, {Component} from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Link,\r\n  Redirect,\r\n  HashRouter\r\n} from 'react-router-dom';\r\n\r\nimport BESengah from './maps/EngineeringHonoursSoftware/map.js';\r\nimport Teaching from './components/teaching.js';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <HashRouter basename='/'>\r\n        <div>\r\n          <ul>\r\n            <li><Link to=\"/\">Home</Link></li>\r\n            <li><Link to=\"/SoftwareEngineering\">Software Engineering</Link></li>\r\n          </ul>\r\n\r\n          <hr />\r\n          <Route path=\"/SoftwareEngineering\" component={BESengah} />\r\n          <Route path=\"/Teaching\" component={Teaching}/>\r\n        </div>\r\n      </HashRouter>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}