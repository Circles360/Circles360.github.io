{"version":3,"sources":["components/checkprerequisites.js","components/getelement.js","components/degreeplanner-course.jsx","components/degreeplanner-term.jsx","components/degreeplanner.js","components/customnode1.js","components/customnode2.js","components/headernode1.js","components/hoverinfo.js","components/hoverprerequisites.js","components/unhoverprerequisites.js","components/dropdownDegrees.js","components/sidebar-modal.js","components/tutorialnode1.js","components/tutorialnode2.js","components/highlightelements.js","components/selectnode.js","components/unselectnode.js","components/getselectable.js","components/exclusionswap.js","components/unselectunconnected.js","components/interactivetutorial.js","components/tutorial-modal.js","components/sidebar.js","components/dropdownsearch.js","maps/EngineeringHonoursSoftware/map.js","components/interactivetutorialmain.js","maps/Homepage/map.js","maps/ComputerScienceCOMPA1/map.js","maps/ComputerScienceCOMPA1ACCTA2/map.js","maps/ComputerScienceCOMPA1FINSA2/map.js","components/positionhelper.js","maps/ComputerScienceCOMPA1MARKA2/map.js","maps/ComputerScienceCOMPA1INFSA2/map.js","maps/ComputerScienceCOMPA1PSYCM2/map.js","maps/EngineeringHonoursSoftware/teaching.js","App.js","serviceWorker.js","index.js","assets/refresh.svg"],"names":["checkPrerequisites","node","elements","selectedNodes","data","conditions","units_required","level_for_units_required","checkPrerequisiteUnitsLevel","prerequisites","prereqs_executable","checkPrerequisiteUnits","condition","replace","match","hasOwnProperty","eval","total","target","Object","keys","selected","id","getElement","units","core_year","courseType","substr","concat","selectedList","takenNode","elementsData","e","Course","Container","draggableId","this","props","course","index","provided","ref","innerRef","draggableProps","dragHandleProps","Label","style","margin","display","flexGrow","content","courseId","marginLeft","alignSelf","rel","href","Icon","name","placeholder","React","Component","checkTermAvailability","termId","term","substring","allCourses","termsAvailable","includes","placeholderTerms","checkValidCourses","courseIds","Term","droppableId","snapshot","Segment","backgroundColor","isDraggingOver","draggingOverWith","transition","Header","as","title","filter","c","reduce","colour","color","floating","showUnits","droppableProps","minHeight","courses","map","key","REGEX_COURSE_CODE","mapTermIds","mapTermFull","updateCourses","coursesJSON","dataJSON","forEach","terms","rawCoursesJSON","getCourses","selectedCourses","course_name","generateTerms","yearId","TSKey","T1Key","T2Key","T3Key","addPriority","priority","unlocksCourse","prereq","unlocks","push","prioritiseCourses","level","Number","t","length","prioritised","values","sort","a","b","checkPrereqsMet","termPlan","runningTotalUnits","prereqsExecutable","coursesTaken","addCourseToPlan","courseUnits","populateTerms","maxYears","prioritisedCourses","year","makePlan","plan","generatePlanScaffold","years","toString","DegreePlanner","state","program","specialisations","onDragEnd","result","destination","source","sourceYear","start","destinationYear","finish","startCourseIds","Array","from","splice","newStart","finishCourseIds","newFinish","newState","setState","newCourseIds","newTerm","getConsiderationMessages","programId","programUnits","programsJSON","considerationMessages","getCourseLink","getCoursesInLevel","rawList","flat","allCourseIds","courseList","totalUnits","Item","degree","coursesInDegree","levelName","specialisationsJSON","structure","specialisationId","degreeUnitsRequired","degreeUnitsTaken","coreCourses","levelCourses","selectedUnits","replaceAll","join","marginBottom","positive","List","error","textAlign","marginTop","onDragStart","columns","termOrder","Column","fluid","height","padding","zIndex","pointerEvents","opacity","top","memo","type","position","course_code","iconSize","width","bottom","src","Refresh","alt","degree_name","left","maxWidth","HoverInfo","raised","raw","exclusions","hoverPrerequisites","selectedEdges","selectableNodes","potentialEdges","hoverEdges","prereqQueue","current","shift","unhoverPrerequisites","edge","courseOptions","programOptions","code","degrees_involved","majors","honours","replacement","spec","getMajors","minors","console","log","getMinors","DropdownDegrees","majorOptions","minorOptions","disabledPrimary","disabledSecondary","hiddenPrimary","hiddenSecondary","valProgram","valPrimary","valSecondary","phPrimary","phSecondary","chooseProgram","value","choosePrimary","chooseSecondary","minor","getLink","window","location","split","supported","isDisabled","messageVisible","link","currentURL","slice","indexOf","getMessage","Message","info","Grid","centered","Row","Dropdown","selection","search","onChange","options","enabled","disabled","visibility","clearable","Button","onClick","exampleReducer","action","open","dimmer","Error","SideBarModal","useReducer","undefined","dispatch","size","Modal","closeIcon","onClose","instructions","selectedEdgeAnimated","stroke","strokeWidth","selectedEdgeStatic","hoverEdge","potentialHoverEdge","potentialEdge","unselectedEdge","highlightElements","isEdge","animated","textSelectedColour","background","selectedColour","textColour","selectableColour","selectNode","unlockCourse","unselectNode","unselectQueue","getSelectable","analyseNodesKeys","isNode","exclusionSwap","edges","exclusionGroups","newElements","group","prevCourse","curCourse","isHidden","curNode","edgesList","getConnectedEdges","newEdgesList","edgesIds","newEdgesIds","newEdge","checkedEdges","hideEdge","newEdgeId","sourceNode","targetNode","unselectUnconnected","selectedNode","trueSelectedNodes","selectedUnlockQueue","curUnlock","selectedUnitsNode","checkPrequisiteUnits","selectable","selectableNode","course_level","corequisites","other","equivalents","x","y","cursor","alignItems","justifyContent","fontSize","fontWeight","borderRadius","border","boxShadow","edgesData","exclusionNodes","nodeTypes","tutorial1","TutorialNode1","tutorial2","TutorialNode2","InteractiveTutorial","useState","setElements","clickCount","singleClickTimer","selectUnselect","element","onLoad","reactFlowInstance","exclusion","last","pop","fitView","nodesConnectable","onElementClick","event","setTimeout","clearTimeout","toggleExclusion","paneMoveable","selectNodesOnDrag","elementsSelectable","nodesDraggable","onNodeMouseEnter","onNodeMouseLeave","TutorialModal","getSelectedCourses","specialisationCodes","specId","levels","minUnits","unitsTaken","horizontal","Sidebar","paddingLeft","paddingRight","flexDirection","Divider","basic","selector","Content","visible","hidden","DropdownSearch","setSearch","setInitTransform","useStoreActions","actions","clickDone","searchElements","innerWidth","innerHeight","k","exclusionNode","searchNodeOptions","prop","onKeyPress","icon","text","nodesData","specialisation","require","custom1","CustomNode1","custom2","CustomNode2","header1","HeaderNode1","layoutStyle","overflowX","overflowY","getMoreCoursesForDropdown","moreOptions","nodesOnFlowchart","BESengah","hoverDisplay","hoverText","setHoverText","hoverNode","setHoverNode","layout","setLayout","additionalCourses","setAdditionalCourses","positon","divided","onMouseEnter","onMouseLeave","instance","setTransform","zoom","minZoom","right","multiple","InteractiveTutorialMain","containerStyle","getButton","circular","Homepage","paddingTop","Subheader","warning","ComputerScienceCOMPA1","ComputerScienceCOMPA1ACCTA2","ComputerScienceCOMPA1FINSA2","positionHelper","positioning_data","ComputerScienceCOMPA1MARKA2","onNodeDragStop","ComputerScienceCOMPA1INFSA2","ComputerScienceCOMPA1PSYCM2","Teaching","setReactFlowInstance","dropSearch","canvasSize","size1","project","size2","getCanvasSize","App","basename","exact","path","component","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.d4552ea6.chunk.js","sourcesContent":["// Returns true if all prerequisites are met for a given node\r\n// Returns false if prerequisites are not met for a given node\r\n// Will only analyse targets of potential edges\r\n\r\nimport getElement from './getelement.js';\r\n\r\n// NOTE: Assumes that source of potential edges are always selected\r\nexport default function checkPrerequisites(node, elements, selectedNodes) {\r\n    if (node.data.conditions.units_required !== null && node.data.conditions.level_for_units_required !== null) {\r\n        // Get the type of course this is\r\n        return(checkPrerequisiteUnitsLevel(node, elements, selectedNodes));\r\n    }\r\n\r\n    if (node.data.conditions.prerequisites !== null && node.data.conditions.prereqs_executable !== null) {\r\n        // Evaluate the condition\r\n        //console.log(\"HERE\");\r\n        //console.log(node.data.conditions.prereqs_executable);\r\n\r\n        // Check if units have been met if it has a unit requirement\r\n        if (node.data.conditions.units_required !== null) {\r\n            if (! checkPrerequisiteUnits(node, elements, selectedNodes)) return false;\r\n            // Remember we also have to check its prerequisites!!!\r\n        }\r\n\r\n        var condition = node.data.conditions.prereqs_executable;\r\n        //console.log(condition);\r\n        condition = condition.replace(/[A-Z]{4}[A-Z0-9]+/gi, function(match) {\r\n            //console.log(match);\r\n            if (selectedNodes.hasOwnProperty(match)) {\r\n                return 1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        });\r\n        // eslint-disable-next-line\r\n        if (eval(condition)) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    return(checkPrerequisiteUnits(node, elements, selectedNodes));\r\n\r\n    // TODO: Check for corerequsiites and exclusion courses as well\r\n    // TODO: Check for completion of units and core_year\r\n\r\n    // Check if these nodes are enough to satisfy prerequisites\r\n    // Get the prerequisite condition and replace courses by 1 if they have been\r\n    // selected and 0 if they have not.\r\n\r\n}\r\n\r\n// Perform prerequisite check for units given the node to check, elements and all\r\n// the selected nodes. Returns true/false\r\nexport function checkPrerequisiteUnits(node, elements, selectedNodes) {\r\n    if (node.data.conditions.units_required !== null) {\r\n        if (node.data.conditions.level_for_units_required === null) {\r\n            // See if we meet the total for this course\r\n            var total = 0;\r\n            const target = node.data.conditions.units_required;\r\n            // console.log(selectedNodes);\r\n            const selectedList = Object.keys(selectedNodes);\r\n            for (const selected of selectedList) {\r\n                if (selected === node.id) continue; // The node can't include itself\r\n                const takenNode = getElement(selected, elements);\r\n                total += takenNode.data.units;\r\n            }\r\n\r\n            if (total >= target) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            // This should have been dealt with in the main function\r\n            // Only check specific level courses\r\n            // We will put it here anyways because unselectconnected imports this function alone\r\n            return(checkPrerequisiteUnitsLevel(node, elements, selectedNodes));\r\n        }\r\n    } else if (node.data.conditions.core_year !== null) {\r\n        // NOTE: Hardcoded this for comp courses in sengah\r\n        return true;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n// Perform prerequisite check for nodes which require X units of Y level courses\r\nfunction checkPrerequisiteUnitsLevel(node, elements, selectedNodes) {\r\n    // Determine the type of course\r\n    var courseType = node.id.substr(0, 4);\r\n    courseType = courseType.concat(node.data.conditions.level_for_units_required);\r\n\r\n    var total = 0;\r\n    const target = node.data.conditions.units_required;\r\n    const selectedList = Object.keys(selectedNodes);\r\n    for (const selected of selectedList) {\r\n        if (selected.substr(0, 5) !== courseType) continue; // Not the right course type\r\n        if (selected === node.id) continue; // The node can't include itself\r\n        const takenNode = getElement(selected, elements);\r\n        total += takenNode.data.units;\r\n    }\r\n\r\n    if (total >= target) {\r\n        // If it has conditions, check the conditions\r\n        if (node.data.conditions.prerequisites !== null && node.data.conditions.prereqs_executable !== null) {\r\n            // Evaluate the condition\r\n\r\n            var condition = node.data.conditions.prereqs_executable;\r\n            condition = condition.replace(/[A-Z]{4}[A-Z0-9]+/gi, function(match) {\r\n                if (selectedNodes.hasOwnProperty(match)) {\r\n                    return 1;\r\n                } else {\r\n                    return 0;\r\n                }\r\n            });\r\n            // eslint-disable-next-line\r\n            if (eval(condition)) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n    \r\n}","// Given an id, returns the element\r\nconst getElement = (id, elementsData) => {\r\n    //console.log(\"GET ELEMENT OF \" + id);\r\n    for (var e of elementsData) {\r\n        if (e.id === id) {\r\n            return e;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport default getElement;","import React from \"react\";\r\nimport { Label, Container, Icon} from 'semantic-ui-react'\r\n\r\nimport { Draggable } from \"react-beautiful-dnd\"\r\n\r\nconst getCourseLink = (courseId) => {\r\n    const handbookVersion = 2021;\r\n    return <a style={{marginLeft: \"5px\", alignSelf: \"flex-start\"}} target=\"_blank\" rel=\"noopener noreferrer\" href={`https://www.handbook.unsw.edu.au/undergraduate/courses/${handbookVersion}/${courseId}`}><Icon name=\"external share\"/></a>;\r\n}\r\n\r\nexport default class Course extends React.Component {\r\n    render () {\r\n        return (\r\n            <Container>\r\n                <Draggable draggableId={this.props.course.id} index={this.props.index}>\r\n                    {provided => (\r\n                        <div>\r\n                            <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                                <Label style={{margin: \"5px\", display: \"flex\"}}>\r\n                                    <span style={{flexGrow: \"1\"}}>\r\n                                        {this.props.course.content}\r\n                                    </span>\r\n                                    {getCourseLink(this.props.course.id)}\r\n                                </Label>\r\n                            </div>\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Draggable>\r\n            </Container>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { Container, Segment, Header, Label } from 'semantic-ui-react'\r\n\r\nimport Course from \"./degreeplanner-course\"\r\n\r\nimport { Droppable } from \"react-beautiful-dnd\"\r\n\r\nconst SUCCESS = \"#FCFFF5\";\r\nconst ERROR = \"#FFF6F6\";\r\nconst UNKNOWN = \"#FFFAF3\"\r\n\r\nconst checkTermAvailability = (props, courseId) => {\r\n    const termId = props.term.id.substring(1, 3);\r\n    const termAvailability = props.allCourses[courseId].termsAvailable;\r\n\r\n    // return props.allCourses[courseId].placeholderTerms\r\n    //     ? UNKNOWN\r\n    //     : termAvailability.includes(termId)\r\n    //     ? SUCCESS\r\n    //     : ERROR;\r\n    return termAvailability.includes(termId)\r\n        ? props.allCourses[courseId].placeholderTerms\r\n            ? UNKNOWN\r\n            : SUCCESS\r\n        : ERROR\r\n}\r\n\r\nconst checkValidCourses = (props) => {\r\n    const termId = props.term.id.substring(1, 3);\r\n\r\n    for (const courseId of props.term.courseIds) {\r\n        if (!props.allCourses[courseId].termsAvailable.includes(termId)) return ERROR;\r\n        if (props.allCourses[courseId].placeholderTerms) return UNKNOWN;\r\n    }\r\n    return \"white\"\r\n}\r\n\r\nconst showUnits = (props) => {\r\n    const total = props.term.courseIds.filter(c => props.allCourses[c]).reduce((total, courseId) => total + props.allCourses[courseId].units, 0);\r\n    const partTime = 12;\r\n    const fullTime = 18;\r\n\r\n    let colour = \"\"\r\n    if (total === 0) {\r\n        colour = \"grey\";\r\n    } else if (total < partTime) {\r\n        colour = \"orange\";\r\n    } else if (total < fullTime) {\r\n        colour = \"blue\";\r\n    } else if (total === fullTime) {\r\n        colour = \"teal\";\r\n    } else {\r\n        colour = \"red\";\r\n    }\r\n\r\n    return <Label color={colour} floating style={{transition: \"0.2s ease\"}}>{total}</Label>;\r\n}\r\n\r\nexport default class Term extends React.Component {\r\n    render () {\r\n        return (\r\n            <Container>\r\n                <Droppable droppableId={this.props.term.id}>\r\n                    {(provided, snapshot) => (\r\n                        <Segment style={{backgroundColor: snapshot.isDraggingOver ? checkTermAvailability(this.props, snapshot.draggingOverWith) : checkValidCourses(this.props), transition: \"0.2s ease\"}}>\r\n                            <Header as=\"h4\">{this.props.term.title}</Header>\r\n                            {showUnits(this.props)}\r\n                            {/* {getTermTitle(this.props)} */}\r\n                            <div ref={provided.innerRef} {...provided.droppableProps} style={{minHeight: \"150px\"}}>\r\n                                {this.props.courses.map((course, index) => <Course key={course.id} course={course} index={index} />)}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        </Segment>\r\n                    )}\r\n                </Droppable>\r\n            </Container>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { Container, Segment, Header, Message, Grid } from 'semantic-ui-react'\r\n\r\nimport dataJSON from \"../maps/EngineeringHonoursSoftware/data.json\"\r\nimport rawCoursesJSON from \"../webscraper/courses.json\"\r\n\r\nimport programsJSON from \"../webscraper/programs.json\"\r\nimport specialisationsJSON from \"../webscraper/specialisations.json\"\r\n\r\nimport { DragDropContext } from \"react-beautiful-dnd\"\r\nimport Term from \"./degreeplanner-term\"\r\n\r\nconst REGEX_COURSE_CODE = /[A-Z]{4}\\d{4}/g;\r\n\r\nconst mapTermIds = (term) => {\r\n    if (term === \"Summer Term\") return \"TS\";\r\n    if (term === \"Term 1\") return \"T1\";\r\n    if (term === \"Term 2\") return \"T2\";\r\n    if (term === \"Term 3\") return \"T3\";\r\n    return;\r\n}\r\n\r\nconst mapTermFull = (term) => {\r\n    if (term === \"TS\") return \"Summer Term\";\r\n    if (term === \"T1\") return \"Term 1\";\r\n    if (term === \"T2\") return \"Term 2\";\r\n    if (term === \"T3\") return \"Term 3\";\r\n}\r\n\r\nconst updateCourses = (coursesJSON, dataJSON) => {\r\n    dataJSON.forEach(course => {\r\n        if (!(course.id in coursesJSON)) return;\r\n        coursesJSON[course.id].conditions.prereqs_executable = course.data.conditions.prereqs_executable\r\n        coursesJSON[course.id].terms = course.data.terms;\r\n    });\r\n    return coursesJSON;\r\n}\r\n\r\nconst coursesJSON = updateCourses(rawCoursesJSON, dataJSON);\r\n\r\nconst getCourses = (selectedCourses) => {\r\n    const courses = {}\r\n\r\n    selectedCourses.forEach(c => {\r\n        if (!(c in coursesJSON)) return;\r\n\r\n        let termsAvailable;\r\n        if (!coursesJSON[c].terms) {\r\n            termsAvailable = [\"TS\", \"T1\", \"T2\", \"T3\"];\r\n        } else {\r\n            termsAvailable = coursesJSON[c].terms.map(term => mapTermIds(term));\r\n        }\r\n\r\n        courses[c] = {\r\n            id: c,\r\n            content: `${c} - ${coursesJSON[c].course_name}`,\r\n            termsAvailable: termsAvailable,\r\n            placeholderTerms: !coursesJSON[c].terms,\r\n            units: coursesJSON[c].units\r\n        }\r\n    })\r\n\r\n    return courses\r\n}\r\n\r\nconst generateTerms = (yearId) => {\r\n    const terms = {}\r\n\r\n    // Terms have id of <YEAR>T<TERM TYPE> eg: 1TS is 1st Year, Summer Term\r\n\r\n    const TSKey = `${yearId}TS`;\r\n    const T1Key = `${yearId}T1`;\r\n    const T2Key = `${yearId}T2`;\r\n    const T3Key = `${yearId}T3`;\r\n    terms[\"termOrder\"] = [TSKey, T1Key, T2Key, T3Key];\r\n\r\n    terms[TSKey] = {\r\n        id: TSKey,\r\n        title: `Year ${yearId} - Summer Term`,\r\n        courseIds: []\r\n    }\r\n\r\n    terms[T1Key] = {\r\n        id: T1Key,\r\n        title: `Year ${yearId} - Term One`,\r\n        courseIds: []\r\n    }\r\n\r\n    terms[T2Key] = {\r\n        id: T2Key,\r\n        title: `Year ${yearId} - Term Two`,\r\n        courseIds: []\r\n    }\r\n\r\n    terms[T3Key] = {\r\n        id: T3Key,\r\n        title: `Year ${yearId} - Term Three`,\r\n        courseIds: []\r\n    }\r\n\r\n    return terms;\r\n}\r\n\r\nconst addPriority = (priority, courseId, unlocksCourse) => {\r\n    if (!(courseId in coursesJSON)) return priority;\r\n    if (!coursesJSON[courseId].conditions.prerequisites) return priority;\r\n\r\n    for (const prereq of coursesJSON[courseId].conditions.prerequisites) {\r\n        if (!(prereq in priority)) continue;\r\n        if (courseId === prereq) continue;\r\n\r\n        priority[prereq].unlocks.push(unlocksCourse);\r\n        priority = addPriority(priority, prereq, unlocksCourse);\r\n    }\r\n\r\n    return priority;\r\n}\r\n\r\nconst prioritiseCourses = (selectedCourses) => {\r\n    // Initiate priorities\r\n    var priority = {};\r\n    for (const courseId of selectedCourses) {\r\n        if (!(courseId in coursesJSON)) continue\r\n\r\n        priority[courseId] = {\r\n            courseId: courseId,\r\n            level: Number(courseId[4]),\r\n            unlocks: [],\r\n            termsAvailable: coursesJSON[courseId].terms ? coursesJSON[courseId].terms.filter(t => t !== \"Summer Term\").length : 0\r\n        }\r\n    }\r\n\r\n    // Calculate priorities\r\n    for (const courseId of selectedCourses) {\r\n        priority = addPriority(priority, courseId, courseId);\r\n    }\r\n\r\n    // Sort keys of priority into array to give into prioritised\r\n    const prioritised = Object.values(priority);\r\n\r\n    prioritised.sort((a, b) => {\r\n        // Sort by:\r\n        // 1. Level (ASC)\r\n        // 2. Unlocks (DESC)\r\n        // 3. Terms Available (ASC)\r\n\r\n        if (a.level === b.level) {\r\n            if (a.unlocks.length === b.unlocks.length) {\r\n                return a.termsAvailable - b.termsAvailable; // Ascending\r\n            }\r\n            return b.unlocks.length - a.unlocks.length; // Descending\r\n        }\r\n        return a.level - b.level; // Ascending\r\n    });\r\n\r\n    return prioritised;\r\n}\r\n\r\nconst checkPrereqsMet = (termPlan, termId, courseId) => {\r\n\r\n    let runningTotalUnits = 0;\r\n    let prereqsExecutable = coursesJSON[courseId].conditions.prereqs_executable;\r\n\r\n    // Get courses taken up to termId\r\n    const coursesTaken = [];\r\n    for (const t in termPlan) {\r\n        if (t === termId) break;\r\n        coursesTaken.push(...termPlan[t].courseIds);\r\n        runningTotalUnits += termPlan[t].courseIds.reduce((total, c) => total + (c in coursesJSON ? coursesJSON[c].units : 0), 0);\r\n    }\r\n    // console.log(courseId, \"courses taken:\", coursesTaken);\r\n\r\n    if (coursesJSON[courseId].conditions.units_required) {\r\n        if (runningTotalUnits < coursesJSON[courseId].conditions.units_required) return false;\r\n    }\r\n\r\n    if (!prereqsExecutable) return true; // No executable\r\n\r\n    for (const course of coursesTaken) {\r\n        prereqsExecutable = prereqsExecutable.replace(course, \"1\");\r\n    }\r\n    prereqsExecutable = prereqsExecutable.replace(REGEX_COURSE_CODE, \"0\");\r\n\r\n    // eslint-disable-next-line\r\n    return eval(prereqsExecutable);\r\n}\r\n\r\nconst addCourseToPlan = (termPlan, courseId) => {\r\n    const maxUOC = 18;\r\n\r\n    for (const termId in termPlan) {\r\n        if (termId.includes(\"TS\")) continue;\r\n        if (termPlan[termId].units >= maxUOC) continue;\r\n\r\n        const courseUnits = coursesJSON[courseId].units;\r\n        if (termPlan[termId].units + courseUnits > maxUOC) continue;\r\n\r\n        let termsAvailable;\r\n        if (!(coursesJSON[courseId].terms)) {\r\n            termsAvailable = [\"TS\", \"T1\", \"T2\", \"T3\"];\r\n        } else {\r\n            termsAvailable = coursesJSON[courseId].terms.map(term => mapTermIds(term));\r\n        }\r\n\r\n        if (!(termsAvailable.includes(termId.substring(1, 3)))) continue;\r\n\r\n        // Need to check prerequisites have been met here\r\n        if (!checkPrereqsMet(termPlan, termId, courseId)) continue;\r\n\r\n        // Add course to plan\r\n        termPlan[termId].units += coursesJSON[courseId].units;\r\n        termPlan[termId].courseIds.push(courseId);\r\n        return termPlan;\r\n    }\r\n\r\n    // Default put in Year 1 Summer Term if cannot find a good position for it.\r\n    // let termsAvailable;\r\n    // if (!(coursesJSON[courseId].terms)) {\r\n    //     termsAvailable = [\"TS\", \"T1\", \"T2\", \"T3\"];\r\n    // } else {\r\n    //     termsAvailable = coursesJSON[courseId].terms.map(term => mapTermIds(term));\r\n    // }\r\n\r\n    termPlan[\"1TS\"].units += coursesJSON[courseId].units;\r\n    termPlan[\"1TS\"].courseIds.push(courseId);\r\n    return termPlan;\r\n}\r\n\r\nconst populateTerms = (maxYears, prioritisedCourses) => {\r\n    const maxTerms = 3;\r\n\r\n    const termPlan = {};\r\n    for (let year = 1; year <= maxYears; year++) {\r\n        termPlan[`${year}TS`] = {\r\n            units: 0,\r\n            courseIds: []\r\n        };\r\n        for (let term = 1; term <= maxTerms; term++) {\r\n            const termId = `${year}T${term}`;\r\n            termPlan[termId] = {\r\n                units: 0,\r\n                courseIds: []\r\n            };\r\n        }\r\n    }\r\n\r\n    // For each course in the prioritised, slot into earliest possible term\r\n    for (const course of prioritisedCourses) {\r\n        addCourseToPlan(termPlan, course.courseId);\r\n    }\r\n\r\n    return termPlan;\r\n}\r\n\r\nconst makePlan = (plan, maxYears, selectedCourses) => {\r\n    const prioritisedCourses = prioritiseCourses(selectedCourses);\r\n\r\n    const termPlan = populateTerms(maxYears, prioritisedCourses);\r\n\r\n    for (const termId in termPlan) {\r\n        const year = termId[0];\r\n        plan[year][termId].courseIds = termPlan[termId].courseIds\r\n    }\r\n\r\n    return plan;\r\n}\r\n\r\nconst generatePlanScaffold = (years, selectedCourses) => {\r\n    let plan = {};\r\n\r\n    for (let year = 1; year <= years; year++) {\r\n        plan[year.toString()] = generateTerms(year)\r\n    }\r\n\r\n    plan = makePlan(plan, years, selectedCourses)\r\n\r\n    return plan;\r\n}\r\n\r\nclass DegreePlanner extends React.Component {\r\n    state = {\r\n        courses: getCourses(this.props.selectedCourses),\r\n        selectedCourses: this.props.selectedCourses,\r\n        plan: generatePlanScaffold(4, this.props.selectedCourses),\r\n        program: this.props.program,\r\n        specialisations: this.props.specialisations\r\n    };\r\n\r\n    onDragEnd = result => {\r\n        const { destination, source, draggableId } = result;\r\n\r\n        // Null destination means label was not dragged into a droppable\r\n        if (!destination) return;\r\n\r\n        // Label was dragged into the same position\r\n        if (destination.droppableId === source.droppableId && destination.index === source.index) return;\r\n\r\n        const sourceYear = source.droppableId[0];\r\n        const start = this.state.plan[sourceYear][source.droppableId];\r\n        const destinationYear = destination.droppableId[0];\r\n        const finish = this.state.plan[destinationYear][destination.droppableId];\r\n\r\n        if (start === finish) {\r\n            const newCourseIds = Array.from(start.courseIds);\r\n            newCourseIds.splice(source.index, 1); // Remove 1 item at source.index\r\n            newCourseIds.splice(destination.index, 0, draggableId); // Insert dragggableId into destination\r\n            const newTerm = {\r\n                ...start,\r\n                courseIds: newCourseIds\r\n            };\r\n\r\n            const newState = {\r\n                ...this.state,\r\n                plan: {\r\n                    ...this.state.plan,\r\n                    [sourceYear]: {\r\n                        ...this.state.plan[sourceYear],\r\n                        [newTerm.id]: newTerm,\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setState(newState);\r\n            return;\r\n        }\r\n\r\n        // Moving from one list to another\r\n        const startCourseIds = Array.from(start.courseIds)\r\n        startCourseIds.splice(source.index, 1);\r\n\r\n        const newStart = {\r\n            ...start,\r\n            courseIds: startCourseIds,\r\n        }\r\n\r\n        const finishCourseIds = Array.from(finish.courseIds)\r\n        finishCourseIds.splice(destination.index, 0, draggableId);\r\n\r\n        const newFinish = {\r\n            ...finish,\r\n            courseIds: finishCourseIds\r\n        }\r\n\r\n        const newState = this.state;\r\n        newState.plan[sourceYear][newStart.id] = newStart;\r\n        newState.plan[destinationYear][newFinish.id] = newFinish;\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    getConsiderationMessages = (state) => {\r\n        const plan = state.plan;\r\n        const courses = state.courses;\r\n        const selectedCourses = state.selectedCourses;\r\n        const program = state.program;\r\n        const programUnits = programsJSON[program].units;\r\n        const specialisations = state.specialisations;\r\n\r\n        const considerationMessages = [];\r\n        const handbookVersion = 2021;\r\n\r\n        const getCourseLink = (courseId) => {\r\n            return <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://www.handbook.unsw.edu.au/undergraduate/courses/${handbookVersion}/${courseId}`}>{courseId}</a>;\r\n        }\r\n\r\n        const getProgramLink = (programId) => {\r\n            return <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://www.handbook.unsw.edu.au/undergraduate/programs/${handbookVersion}/${programId}`}>{programId} - {programsJSON[programId].name}</a>;\r\n        }\r\n\r\n        const getSpecialisationsLink = (specialisationId) => {\r\n            return <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://www.handbook.unsw.edu.au/undergraduate/specialisations/${handbookVersion}/${specialisationId}`}>{specialisationId} - {specialisationsJSON[specialisationId].name}</a>;\r\n        }\r\n\r\n        const getCoursesInLevel = (rawList) => {\r\n            rawList = rawList.flat().filter(c => c !== \"ANY COURSE\");\r\n            const allCourseIds = Object.keys(coursesJSON);\r\n            const courseList = [];\r\n            rawList.forEach(courseId => {\r\n                if (courseId.match(REGEX_COURSE_CODE)) {\r\n                    courseList.push(courseId);\r\n                } else if (courseId.match(/^[A-Z]{4}\\d$/)) {\r\n                    const relevantCourses = allCourseIds.filter(c => c.includes(courseId));\r\n                    relevantCourses.forEach(c => {\r\n                        if (courseList.includes(c)) return;\r\n                        courseList.push(c);\r\n                    });\r\n                }\r\n            });\r\n            return courseList;\r\n        }\r\n\r\n        let totalUnits = 0;\r\n        const termPlan = {}\r\n        for (const year in plan) {\r\n            for (const term in plan[year]) {\r\n                if (term === \"termOrder\") continue;\r\n                termPlan[term] = plan[year][term]\r\n                totalUnits += termPlan[term].courseIds.reduce((total, c) => total + (c in coursesJSON ? coursesJSON[c].units : 0), 0);\r\n            }\r\n        }\r\n\r\n        if (totalUnits < programUnits) {\r\n            considerationMessages.push(\r\n                <Message.Item>\r\n                    {getProgramLink(program)} requires {programUnits} units. You have taken {totalUnits} units.\r\n                </Message.Item>\r\n            )\r\n        }\r\n        specialisations.forEach(degree => {\r\n            const coursesInDegree = [];\r\n            for (const levelName in specialisationsJSON[degree].structure) {\r\n                const level = specialisationsJSON[degree].structure[levelName];\r\n                if (!level.courses) continue;\r\n                coursesInDegree.push(...getCoursesInLevel(level.courses))\r\n            }\r\n            const degreeUnitsRequired = specialisationsJSON[degree].units\r\n            let degreeUnitsTaken = 0;\r\n            for (const term in termPlan) {\r\n                degreeUnitsTaken += termPlan[term].courseIds.reduce((total, c) => total + ((c in coursesJSON && coursesInDegree.includes(c)) ? coursesJSON[c].units : 0), 0);\r\n            }\r\n\r\n            if (degreeUnitsTaken < degreeUnitsRequired) {\r\n                considerationMessages.push(\r\n                    <Message.Item>\r\n                        {getSpecialisationsLink(degree)} requires {degreeUnitsRequired} units. You have taken {degreeUnitsTaken} units.\r\n                    </Message.Item>\r\n                )\r\n            }\r\n        })\r\n\r\n\r\n        totalUnits = 0;\r\n        for (const year in plan) {\r\n            for (const term in plan[year]) {\r\n                if (term === \"termOrder\") continue;\r\n                for (const courseId of termPlan[term].courseIds) {\r\n                    const conditions = coursesJSON[courseId].conditions\r\n                    if (!conditions.units_required) continue;\r\n                    if (totalUnits < conditions.units_required) {\r\n                        considerationMessages.push(\r\n                            <Message.Item>\r\n                                {getCourseLink(courseId)} prerequisites have not been met: {conditions.units_required} UOC required.\r\n                            </Message.Item>\r\n                        )\r\n                    }\r\n                }\r\n\r\n                totalUnits += termPlan[term].courseIds.reduce((total, c) => total + (c in coursesJSON ? coursesJSON[c].units : 0), 0);\r\n            }\r\n        }\r\n\r\n        // Check levels for each\r\n        specialisations.forEach(degree => {\r\n            const coreCourses = []\r\n            for (const levelName in specialisationsJSON[degree].structure) {\r\n                const level = specialisationsJSON[degree].structure[levelName];\r\n                if (!level.units_required) continue;\r\n                if (level.courses.filter(c => c !== \"ANY COURSE\").length === 0) continue;\r\n                if (level.name.match(/[Cc]ore/g)) level.courses.flat().forEach(c => coreCourses.push(c));\r\n\r\n                let levelCourses = getCoursesInLevel(level.courses);\r\n                if (!level.name.match(/[Cc]ore/g)) levelCourses = levelCourses.filter(c => !coreCourses.includes(c))\r\n                const selectedInLevel = levelCourses.filter(c => selectedCourses.includes(c));\r\n                const selectedUnits = selectedInLevel.reduce((total, c) => total + (c in coursesJSON ? coursesJSON[c].units : 0), 0);\r\n\r\n                if (selectedUnits < level.units_required) {\r\n                    considerationMessages.push(\r\n                        <Message.Item>\r\n                            {degree} - {level.name} requires {level.units_required} units. You have taken {selectedUnits} units.\r\n                        </Message.Item>\r\n                    );\r\n                }\r\n            }\r\n        })\r\n\r\n        for (const year in plan) {\r\n            for (const term in plan[year]) {\r\n                if (term === \"termOrder\") continue;\r\n                for (const courseId of plan[year][term].courseIds) {\r\n                    if (!checkPrereqsMet(termPlan, term, courseId)) {\r\n                        if (coursesJSON[courseId].conditions.prereqs_executable) {\r\n                            considerationMessages.push(\r\n                                <Message.Item>\r\n                                    {getCourseLink(courseId)} prerequisites have not been met: {coursesJSON[courseId].conditions.prereqs_executable\r\n                                        .replaceAll(\"|| 0 ||\", \"||\")\r\n                                        .replaceAll(\"&& 0 &&\", \"&&\")\r\n                                        .replaceAll(\"&& 0 ||\", \"||\")\r\n                                        .replaceAll(\"|| 0 &&\", \"&&\")\r\n                                        .replaceAll(\"&&\", \"and\")\r\n                                        .replaceAll(\"||\", \"or\")\r\n                                    }\r\n                                </Message.Item>\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Check terms\r\n        for (const yearId in plan) {\r\n            for (let termId in plan[yearId]) {\r\n                if (termId === \"termOrder\") continue;\r\n                const term = termId.substring(1, 3)\r\n                for (const courseId of plan[yearId][termId].courseIds) {\r\n                    // if (!courses[courseId].termsAvailable) {\r\n                    if (!courses[courseId]) {\r\n                        considerationMessages.push(\r\n                            <Message.Item>\r\n                                {getCourseLink(courseId)}: could not retrieve course. Check handbook for more details.\r\n                            </Message.Item>\r\n                        )\r\n                    } else if (courses[courseId].placeholderTerms) {\r\n                        considerationMessages.push(\r\n                            <Message.Item>\r\n                                {getCourseLink(courseId)}: unknown term availability. Check handbook for more details.\r\n                            </Message.Item>\r\n                        )\r\n                    } else if (!courses[courseId].termsAvailable.includes(term)) {\r\n                        considerationMessages.push(\r\n                            <Message.Item>\r\n                                {getCourseLink(courseId)} is only available in {courses[courseId].termsAvailable.map(term => mapTermFull(term)).join(\", \")}\r\n                            </Message.Item>\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const style = {\r\n            marginBottom: \"20px\",\r\n            transition: \"0.3s ease\"\r\n        }\r\n\r\n        if (considerationMessages.length === 0) {\r\n            return (\r\n                <Message style={style} positive>\r\n                    <Message.Header>Considerations</Message.Header>\r\n                    <Message.List>\r\n                        Looks good to me!\r\n                    </Message.List>\r\n                </Message>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <Message style={style} error>\r\n                <Message.Header>Considerations</Message.Header>\r\n                <Message.List>\r\n                    {considerationMessages}\r\n                </Message.List>\r\n            </Message>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Segment>\r\n                <Container>\r\n                    <Header as=\"h2\" textAlign=\"center\" style={{marginTop: \"50px\"}}>Plan your degree</Header>\r\n                    <p>The following degree plan has been generated based on the courses you have selected above. By default, our algorithm:</p>\r\n                    <ul>\r\n                        <li>allocates 18 UOC per term</li>\r\n                        <li>ensures courses have their prerequisites met</li>\r\n                        <li>ensures courses are offered in allocated terms</li>\r\n                        <li>does not allocate courses in Summer Term</li>\r\n                    </ul>\r\n                    <p>If the algorithm cannot place the course in a valid term, then it will place it <em>Year 1 - Semmmer Term</em> for you.</p>\r\n\r\n                    <p><b>Drag and drop the courses below to customise your degree plan!</b></p>\r\n\r\n                    <DragDropContext onDragEnd={this.onDragEnd} onDragStart={this.onDragStart}>\r\n                        {this.getConsiderationMessages(this.state)}\r\n                        {Object.keys(this.state.plan).map(yearId => (\r\n                            <Grid key={yearId} columns={4}>\r\n                                {this.state.plan[yearId].termOrder.map(termId => {\r\n                                    const term = this.state.plan[yearId][termId];\r\n                                    const courses = term.courseIds.map(courseId => this.state.courses[courseId]);\r\n                                    return (\r\n                                        <Grid.Column key={termId}>\r\n                                            <Term key={term.id} term={term} courses={courses} allCourses={this.state.courses}/>\r\n                                        </Grid.Column>\r\n                                    );\r\n                                })}\r\n                            </Grid>\r\n                        ))}\r\n                    </DragDropContext>\r\n                </Container>\r\n                <Container fluid style={{textAlign: \"center\", marginTop: \"50px\", height: \"auto\", padding: \"20px\"}}>\r\n                    <p><b>Disclaimer:</b> While we try our best, Circles is not an official UNSW website and does not guarantee accuracy or reliability (e.g. a course may not have its term availability published on the Handbook)</p>\r\n                    <p>Made by SRKO, 2020</p>\r\n                    <div>\r\n                        <a style={{margin: \"5px\"}} href=\"/\">Home</a>\r\n                        <a style={{margin: \"5px\"}} href=\"https://github.com/Circles360/Circles360.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>\r\n                    </div>\r\n                </Container>\r\n            </Segment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DegreePlanner","// For normal nodes\r\nimport React, { memo } from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nconst style = {zIndex: -9999, pointerEvents: 'none', opacity: 0, top: '50%'};\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={style} />\r\n      <div>\r\n            <b>{data.course_code}</b>\r\n      </div>\r\n      <Handle type=\"source\" position=\"top\" style={style} />\r\n    </>\r\n  );\r\n});\r\n","// For normal nodes\r\nimport React, { memo } from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nimport Refresh from '../assets/refresh.svg';\r\n\r\nconst style = {zIndex: -9999, pointerEvents: 'none', opacity: 0, top: '50%'};\r\nconst iconSize = {width: 12, position: 'relative', bottom: 2};\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={style} />\r\n      <div>\r\n            <br></br>\r\n            <b>{data.course_code}</b>\r\n            <div>\r\n              <img src={Refresh} alt={data.course_code} style={iconSize}/>\r\n            </div>\r\n      </div>\r\n      <Handle type=\"source\" position=\"top\" style={style} />\r\n    </>\r\n  );\r\n});\r\n","import React, { memo } from 'react';\r\n\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={{opacity: 0, top: '50%'}} />\r\n      <div>\r\n            <b>{data.degree_name}</b>\r\n      </div>\r\n      <Handle type=\"source\" position=\"bottom\" style={{opacity: 0, bottom: '50%'}} />\r\n    </>\r\n  );\r\n});\r\n","// Displays hover text in top left corner which contains info about the course\r\nimport React from 'react';\r\nimport { Segment, Header } from \"semantic-ui-react\";\r\n\r\nconst style = {\r\n    padding: \"20px\",\r\n    margin: \"10px\",\r\n    position: \"absolute\",\r\n    top: \"0\",\r\n    left: \"0\",\r\n    zIndex: \"10\",\r\n    maxWidth: \"20%\"\r\n}\r\n\r\nexport default function HoverInfo(props) {\r\n    return (\r\n        <Segment raised id=\"hoverbox\" style={style}>\r\n            <Header as=\"h4\" textAlign=\"center\">{props.node.data.course_name}</Header>\r\n            <p><b>Terms: </b>{(props.node.data.terms !== null) ? props.node.data.terms.join(\", \") : <text>Unknown</text>}</p>\r\n\r\n            {props.node.data.conditions.raw !== null ? <p><b>Conditions: </b>{props.node.data.conditions.raw}</p> : <p><b>Conditions: </b> None</p>}\r\n\r\n            {props.node.data.exclusions !== null &&\r\n            <p><b>Exclusion courses: </b>{props.node.data.exclusions.join(\", \")}</p>}\r\n        </Segment>\r\n    );\r\n}","// HELPER FUNCTION to highlight prerequisites in purple on hover\r\n// When hovering over an unselected node, show a path of edges\r\n// which will stop at a selected/selectable node\r\nimport getElement from './getelement.js';\r\n\r\nexport default function hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges) {\r\n    if (node.data.conditions.prerequisites === null) return;\r\n    // Get all selected edges one layer down and add to hover edges\r\n    for (const prereq of node.data.conditions.prerequisites) {\r\n        if (selectedEdges.hasOwnProperty('e' + prereq + '-' + node.id)) {\r\n            hoverEdges['e' + prereq + '-' + node.id] = 1;\r\n        }\r\n    }\r\n\r\n    // hoverEdge all unselected (AND POTENTIAL???) edges until we hit selected node (NO LONGER STOPS AT SELECTABLE NODE)\r\n    var prereqQueue = [node.id];\r\n    while (prereqQueue.length !== 0) {\r\n        const current = getElement(prereqQueue.shift(), elements);\r\n        // Make sure this course exists as a node in our map\r\n        if (current === null) continue;\r\n\r\n        if (current.data.conditions.prerequisites === null) continue;\r\n\r\n        for (const prereq of current.data.conditions.prerequisites) {\r\n            if (!selectedEdges.hasOwnProperty('e' + prereq + '-' + current.id)) {\r\n                hoverEdges['e' + prereq + '-' + current.id] = 1;\r\n            }\r\n            /*if ((!selectedEdges.hasOwnProperty('e' + prereq + '-' + current.id)) && (!potentialEdges.hasOwnProperty('e' + prereq + '-' + current.id))) {\r\n                hoverEdges['e' + prereq + '-' + current.id] = 1;\r\n            }*/\r\n\r\n            if ((!selectedNodes.hasOwnProperty(prereq))) {\r\n                prereqQueue.push(prereq);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// HELPER FUNCTION to delete prerequisite edges\r\n// Usually used after unhovering or onclick\r\nexport default function unhoverPrerequisites(hoverEdges) {\r\n    for (var edge in hoverEdges) {\r\n        delete hoverEdges[edge];\r\n    }\r\n}","// import { findAllByDisplayValue } from '@testing-library/react';\r\nimport React, { Component } from 'react'\r\nimport { Button, Dropdown, Grid, Message} from 'semantic-ui-react'\r\n\r\nimport programsJSON from \"../webscraper/programs.json\"\r\nimport specialisationsJSON from \"../webscraper/specialisations.json\"\r\n\r\nconst MAJORS = 1;\r\nconst MINORS = 2;\r\nconst HONOURS = 3;\r\n\r\nconst courseOptions = {}\r\nconst programOptions = []\r\n\r\nfor (const code in programsJSON) {\r\n    if (programsJSON[code].degrees_involved.majors.length === 0 && programsJSON[code].degrees_involved.honours.length === 0) continue;\r\n\r\n    // Only these programs are supported\r\n    if (![\"3707\", \"3778\"].includes(code)) continue;\r\n\r\n    programOptions.push({\r\n        \"key\": code,\r\n        \"value\": code,\r\n        \"text\": code + \" - \" + programsJSON[code].name\r\n    })\r\n\r\n    courseOptions[code] = programsJSON[code].degrees_involved\r\n}\r\n\r\nfor (const code in courseOptions) {\r\n    for (const type in courseOptions[code]) {\r\n        const replacement = [];\r\n        for (const spec of courseOptions[code][type]) {\r\n            if (!(spec in specialisationsJSON)) continue;\r\n\r\n            // Only these majors and minors are supported\r\n            if (![\"SENGAH\", \"COMPA1\", \"ACCTA2\", \"FINSA2\", \"INFSA2\", \"MARKA2\", \"PSYCM2\"].includes(spec)) continue;\r\n            replacement.push({\r\n                \"key\": spec,\r\n                \"value\": spec,\r\n                \"text\": spec + \" - \" + specialisationsJSON[spec].name\r\n            })\r\n        }\r\n        courseOptions[code][type] = replacement;\r\n    }\r\n}\r\n\r\n// returns MAJORS if Majors but no Minors\r\n// returns MINORS if Majors and Minors exist\r\n// returns HONOURS if Honours exist\r\nconst getMajors = (code) => {\r\n    if (!(code in courseOptions)) {\r\n        console.log(\"code not found in majors\", code);\r\n        return [];\r\n    }\r\n\r\n    if (courseOptions[code].honours.length) return [HONOURS, courseOptions[code].honours];\r\n    if (courseOptions[code].minors.length) return [MINORS, courseOptions[code].majors];\r\n    return [MAJORS, courseOptions[code].majors];\r\n}\r\n\r\nconst getMinors = (code) => {\r\n    if (!(code in courseOptions)) {\r\n        console.log(\"code not found in minors\", code);\r\n        return [];\r\n    }\r\n\r\n    return courseOptions[code].minors;\r\n}\r\n\r\nclass DropdownDegrees extends Component {\r\n    state = {\r\n        programOptions: programOptions,\r\n        majorOptions: [],\r\n        minorOptions: [],\r\n\r\n        disabledPrimary: true,\r\n        disabledSecondary: true,\r\n        hiddenPrimary: 'hidden',\r\n        hiddenSecondary: 'hidden',\r\n\r\n        valProgram: null,\r\n        valPrimary: null,\r\n        valSecondary: null,\r\n\r\n        phPrimary: \"Select\",\r\n        phSecondary: \"N/A\",\r\n    }\r\n\r\n    chooseProgram = (e, program) => {\r\n        const [type, majors] = getMajors(program.value)\r\n        console.log(program.value)\r\n        this.setState({\r\n            valProgram: program.value,\r\n\r\n            valPrimary: null,\r\n            disabledPrimary: false,\r\n            hiddenPrimary: 'visible',\r\n            majorOptions: majors,\r\n            phPrimary: \"Select Major\",\r\n\r\n            valSecondary: null,\r\n            disabledSecondary: true,\r\n            hiddenSecondary: 'hidden',\r\n            minorOptions: [],\r\n            phSecondary: \"N/A\"\r\n        })\r\n\r\n        if (type === HONOURS) this.setState({phPrimary: \"Select Honour\"})\r\n        else if (type === MAJORS) this.setState({phPrimary: \"Select Major\"})\r\n        else {\r\n            this.setState({\r\n                phPrimary: \"Select Major\",\r\n                phSecondary: \"Select Minor (optional)\",\r\n                minorOptions: getMinors(program.value),\r\n                disabledSecondary: false,\r\n                hiddenSecondary: 'visible',\r\n            });\r\n        }\r\n    }\r\n\r\n    choosePrimary = (e, spec) => {\r\n        this.setState({\r\n            valPrimary: spec.value\r\n        })\r\n    }\r\n\r\n    chooseSecondary = (e, minor) => {\r\n        this.setState({\r\n            valSecondary: minor.value\r\n        })\r\n    }\r\n\r\n    getLink = () => {\r\n        console.log(window.location.href.split(\"/\")[1]);\r\n        const link = `#/${this.state.valProgram}/${this.state.valPrimary}` + (this.state.valSecondary ? `/${this.state.valSecondary}` : \"\");\r\n        return link;\r\n    }\r\n\r\n    supported = {\r\n        \"3707\": [\"SENGAH\"],\r\n        \"3778\": [\"COMPA1\"]\r\n    };\r\n\r\n    isDisabled = () => {\r\n        // this.state.messageVisible = \"hidden\"\r\n        this.setState({messageVisible: \"hidden\"})\r\n\r\n        if (!!this.state.valSecondary) return true;\r\n        if (!(this.state.valProgram in this.supported)) return true;\r\n        if (!this.supported[this.state.valProgram].includes(this.state.valPrimary)) return true;\r\n\r\n        const link = `/${this.state.valProgram}/${this.state.valPrimary}` + (this.state.valSecondary ? `/${this.state.valSecondary}` : \"\");\r\n        const currentURL = window.location.href;\r\n        // console.log(currentURL.slice(currentURL.indexOf(\"#\") + 1))\r\n        if (currentURL.slice(currentURL.indexOf(\"#\") + 1) === link) return true;\r\n\r\n        const isSupported = this.state.valProgram === null || this.state.valPrimary === null;\r\n        return isSupported;\r\n    }\r\n\r\n    getMessage = () => {\r\n        if (!(this.state.valProgram in this.supported)) {\r\n            return (\r\n                <Message info>\r\n                    {`Only ${Object.keys(this.supported).join(\", \")} is supported`}\r\n                </Message>\r\n            )\r\n        }\r\n\r\n\r\n        if (!this.supported[this.state.valProgram].includes(this.state.valPrimary)) {\r\n            return (\r\n                <Message info>\r\n                    {`Only ${this.supported[this.state.valProgram].join(\", \")} is supported`}\r\n                </Message>\r\n            )\r\n        }\r\n\r\n        const link = `/${this.state.valProgram}/${this.state.valPrimary}` + (this.state.valSecondary ? `/${this.state.valSecondary}` : \"\");\r\n        const currentURL = window.location.href;\r\n        // console.log(currentURL.slice(currentURL.indexOf(\"#\") + 1))\r\n        if (currentURL.slice(currentURL.indexOf(\"#\") + 1) === link) {\r\n            return (\r\n                <Message info>\r\n                    {`You're already looking at this degree`}\r\n                </Message>\r\n            )\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <Grid centered style={{marginTop: \"20px\", marginBottom: \"20px\"}}>\r\n                <Grid.Row>\r\n                    <Dropdown\r\n                        selection\r\n                        search\r\n                        onChange={this.chooseProgram}\r\n                        options= {this.state.programOptions}\r\n                        enabled\r\n                        placeholder= 'Select Program'\r\n                    />\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Dropdown\r\n                        selection\r\n                        search\r\n                        onChange={this.choosePrimary}\r\n                        options= {this.state.majorOptions}\r\n                        disabled= {this.state.disabledPrimary}\r\n                        value= {this.state.valPrimary}\r\n                        placeholder= {this.state.phPrimary}\r\n                        style={{visibility: this.state.hiddenPrimary}}\r\n                    />\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Dropdown\r\n                        selection\r\n                        search\r\n                        clearable\r\n                        onChange={this.chooseSecondary}\r\n                        options= {this.state.minorOptions}\r\n                        disabled= {this.state.disabledSecondary}\r\n                        value= {this.state.valSecondary}\r\n                        placeholder= {this.state.phSecondary}\r\n                        style={{visibility: this.state.hiddenSecondary}}\r\n                    />\r\n                </Grid.Row>\r\n                {this.getMessage()}\r\n                <Grid.Row>\r\n                    <Button\r\n                        onClick={() => {window.location.href=this.getLink()}}\r\n                        color=\"red\"\r\n                    >\r\n                        Load flowchart\r\n                    </Button>\r\n                </Grid.Row>\r\n            </Grid>\r\n        </>;\r\n    }\r\n}\r\n\r\nexport default DropdownDegrees","import React from \"react\";\r\nimport DropdownDegrees from \"./dropdownDegrees.js\"\r\nimport { Button, Container, Modal } from 'semantic-ui-react'\r\n\r\nfunction exampleReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'OPEN_MODAL':\r\n      return { open: true, dimmer: action.dimmer }\r\n    case 'CLOSE_MODAL':\r\n      return { open: false }\r\n    default:\r\n      throw new Error()\r\n  }\r\n}\r\n\r\nfunction SideBarModal() {\r\n  const [state, dispatch] = React.useReducer(exampleReducer, {\r\n    open: false,\r\n    dimmer: undefined,\r\n  })\r\n  const { open, dimmer } = state\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        size=\"mini\"\r\n        color=\"blue\"\r\n        onClick={() => dispatch({ type: 'OPEN_MODAL', dimmer: 'blurring' })}\r\n      >\r\n        Choose Degree\r\n      </Button>\r\n\r\n      <Modal\r\n        closeIcon\r\n        dimmer={dimmer}\r\n        open={open}\r\n        onClose={() => dispatch({ type: 'CLOSE_MODAL' })}\r\n      >\r\n        <Modal.Header textAlign=\"center\">Choose your degree</Modal.Header>\r\n        <Container>\r\n            <DropdownDegrees />\r\n        </Container>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SideBarModal\r\n\r\n//DropdownDegrees.clickDone() \r\n\r\n//DropdownDegrees d = new DropdownDegrees(); \r\n//d.clickDone()","// For normal nodes\r\nimport React, { memo } from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nconst style = {zIndex: -9999, pointerEvents: 'none', opacity: 0, top: '50%'};\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={style} />\r\n      <div>\r\n            <text>{data.instructions}</text>\r\n      </div>\r\n      <Handle type=\"source\" position=\"top\" style={style} />\r\n    </>\r\n  );\r\n});\r\n","// For normal nodes\r\nimport React, { memo } from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nimport Refresh from '../assets/refresh.svg';\r\n\r\nconst style = {zIndex: -9999, pointerEvents: 'none', opacity: 0, top: '50%'};\r\nconst iconSize = {width: 12, position: 'relative'};\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={style} />\r\n      <div>\r\n            <br></br>\r\n            <text>{data.instructions}</text>\r\n            <br></br>\r\n            <div>\r\n              <img src={Refresh} alt={data.course_code} style={iconSize}/>\r\n            </div>\r\n      </div>\r\n      <Handle type=\"source\" position=\"top\" style={style} />\r\n    </>\r\n  );\r\n});\r\n","// Helper functions to highlight nodes and edges\r\n// Will highlight/unhighlight nodes based on selectedNodes dictionary\r\nimport { isEdge } from \"react-flow-renderer\";\r\n\r\nconst selectedEdgeAnimated = {\r\n    stroke: \"#e94646\",\r\n    strokeWidth: 2,\r\n    opacity: 1,\r\n    transition: \"0.3s ease\"\r\n}\r\nconst selectedEdgeStatic = {\r\n    stroke: \"#454545\",\r\n    strokeWidth: 2,\r\n    opacity: 1,\r\n    transition: \"0.3s ease\"\r\n}\r\n\r\nconst hoverEdge = {\r\n    stroke: \"#e94646\",\r\n    strokeWidth: 2,\r\n    opacity: 1,\r\n    transition: \"0.3s ease\"\r\n}\r\n\r\nconst potentialHoverEdge = {\r\n    stroke: \"#e94646\",\r\n    strokeWidth: 2,\r\n    opacity: 1,\r\n    transition: \"0.3s ease\"\r\n}\r\nconst potentialEdge = {\r\n    stroke: \"#cecece\",\r\n    strokeWidth: 1,\r\n    opacity: 1,\r\n    transition: \"0.3s ease\"\r\n}\r\n\r\nconst unselectedEdge = {\r\n    stroke: \"#cecece\",\r\n    strokeWidth: 1,\r\n    opacity: 1,\r\n    transition: \"0.3s ease\"\r\n}\r\n\r\nexport default function highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges) {\r\n    // console.log(\"=================\");\r\n    // console.log(selectedNodes);\r\n    // console.log(selectedEdges);\r\n    // console.log(selectableNodes);\r\n    // console.log(potentialEdges);\r\n    const newElements = elements.map((e) => {\r\n        // It is an edge\r\n        if (isEdge(e)) {\r\n            if (selectedEdges.hasOwnProperty(e.id)) {\r\n                if (hoverEdges.hasOwnProperty(e.id)) return {...e, style: selectedEdgeAnimated, animated: true};\r\n                else return {...e, style: selectedEdgeStatic, animated: false};\r\n            } else if (potentialEdges.hasOwnProperty(e.id)) {\r\n                if (hoverEdges.hasOwnProperty(e.id)) return {...e, style: potentialHoverEdge, animated: true};\r\n                else return {...e, style: potentialEdge, animated: false};\r\n            } else if (hoverEdges.hasOwnProperty(e.id)) {\r\n                return {...e, style: hoverEdge, animated: true};\r\n            } else {\r\n                return {...e, style: unselectedEdge, animated: false};\r\n            }\r\n        }\r\n\r\n        // It is a node\r\n        if (selectedNodes.hasOwnProperty(e.id)) {\r\n            // SELECTED NODE\r\n            return {...e, style: {...e.style, color: e.textSelectedColour, background: e.selectedColour}};\r\n        } else if (selectableNodes.hasOwnProperty(e.id)) {\r\n            // NOT SELECTED BUT CAN BE SELECTED\r\n            // console.log(e.textColour);\r\n            return {...e, style: {...e.style, color: e.textColour, background: e.selectableColour}};\r\n        } else {\r\n            // UNSELECTED NODE\r\n            return {...e, style: {...e.style, color: e.textColour, background: 'white'}};\r\n        }\r\n    })\r\n\r\n    return newElements;\r\n}","// HELPER FUNCTION for selecting nodes\r\n// Given a selectable node, highlights potential edges and fills in prereq edges\r\n// import checkPrerequisites from './checkprerequisites.js';\r\n// import getElement from './getelement.js';\r\n\r\nexport default function selectNode(elements, node, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    selectedNodes[node.id] = 1;\r\n    delete selectableNodes[node.id];\r\n\r\n    // Turn its prerequisite potential edges into actual edges\r\n    // Keep grey edges as grey\r\n    if (node.data.conditions.prerequisites !== null) {\r\n        for (const prereq of node.data.conditions.prerequisites) {\r\n            if (potentialEdges.hasOwnProperty('e' + prereq + '-' + node.id)) {\r\n                selectedEdges['e' + prereq + '-' + node.id] = 1;\r\n                delete potentialEdges['e' + prereq + '-' + node.id];\r\n            }\r\n        }\r\n    }\r\n\r\n    // Unlock its future edges\r\n    if (node.data.unlocks !== null) {\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            // Edges from node to unlocks should be unselected\r\n            if (selectedNodes.hasOwnProperty(unlockCourse)) {\r\n                // This course is already selected. Make the edge a selected edge\r\n                selectedEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n            } else {\r\n                // This course is either unselected or selectable\r\n                // In either case, add potential edge\r\n                potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n            }\r\n        }            \r\n    }\r\n\r\n    return;\r\n}\r\n","// HELPER FUNCTION for unselecting nodes\r\n// Given a selected node, unselects it and pushes it onto a queue to be analysed\r\n// ==================ON THE QUEUE==========================\r\n// Unshift node and Manages its prerequisites as follows:\r\n//  - if the prereq node is selected, turn selected edges into potential edges\r\n//  - if otherwise, do nothing\r\n// Determine the status of the current node:\r\n//  - if it meets prerequisites, leave it as is.\r\n//  - if it does not meet prerequisites, make it unselectable (delete from selectable/selected)\r\n// For each unlock:\r\n// - if the current node is not selected, turn edge grey no matter what\r\n// - if the current node is selected, keep edge as it is\r\n// - push the unlock onto queue if it was selectable/selected\r\nimport getElement from './getelement.js';\r\nimport checkPrerequisites from './checkprerequisites.js';\r\n\r\nexport default function unselectNode(elements, node, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    // Unselect this node\r\n    delete selectedNodes[node.id];\r\n    var unselectQueue = [node.id];\r\n    while (unselectQueue.length !== 0) {\r\n        // Unshift and get the node\r\n        const current = getElement(unselectQueue.shift(), elements);\r\n        \r\n        // Analyse its prerequisites\r\n        // If the prereq node is selected, turn selected edge into potential edges\r\n        if (current.data.conditions.prerequisites !== null) {\r\n            for (const prereq of current.data.conditions.prerequisites) {\r\n                if (selectedNodes.hasOwnProperty(prereq)) {\r\n                    if (selectedEdges.hasOwnProperty('e' + prereq + '-' + current.id)) {\r\n                        delete selectedEdges['e' + prereq + '-' + current.id];\r\n                        potentialEdges['e' + prereq + '-' + current.id] = 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Determine the status of the current node\r\n        if (! checkPrerequisites(current, elements, selectedNodes)) {\r\n            // Does not meet prerequisites. Make it unselectable\r\n            if (selectableNodes.hasOwnProperty(current.id)) delete selectableNodes[current.id];\r\n            else if (selectedNodes.hasOwnProperty(current.id)) delete selectedNodes[current.id];\r\n        } else {\r\n            // Meets prerequisites. Make it selectable\r\n            if (selectedNodes.hasOwnProperty(current.id)) delete selectedNodes[current.id];\r\n            selectableNodes[current.id] = 1;\r\n        }\r\n\r\n        // Analyse its unlocks\r\n        if (current.data.unlocks !== null) {\r\n            for (const unlockCourse of current.data.unlocks) {\r\n                if (! selectedNodes.hasOwnProperty(current.id)) {\r\n                    // Make edge grey\r\n                    if (potentialEdges.hasOwnProperty('e' + current.id + '-' + unlockCourse)) delete potentialEdges['e' + current.id + '-' + unlockCourse];\r\n                    else if (selectedEdges.hasOwnProperty('e' + current.id + '-' + unlockCourse)) delete selectedEdges['e' + current.id + '-' + unlockCourse];\r\n                }\r\n\r\n                // Lets push everything no matter what and try it out\r\n                unselectQueue.push(unlockCourse);\r\n                /*if (selectedNodes.hasOwnProperty(unlockCourse) || selectableNodes.hasOwnProperty(unlockCourse)) {\r\n                    unselectQueue.push(unlockCourse);\r\n                }*/\r\n            }\r\n        }\r\n    }\r\n}","// HELPER FUNCTION to determine which previously unselectable nodes\r\n// are now selectable\r\nimport checkPrerequisites from './checkprerequisites.js';\r\n// import getElement from './getelement.js';\r\nimport {isNode} from 'react-flow-renderer';\r\n\r\nexport default function getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    // TODO: Deal with outsider nodes\r\n\r\n    const analyseNodesKeys = [];\r\n    for (const e of elements) {\r\n        if (isNode(e)) {\r\n            analyseNodesKeys.push(e);\r\n        }\r\n    }\r\n\r\n    // Analyse the target of potential edges for potential nodes\r\n    /*var analyseNodes = {};\r\n    const potentialEdgesKeys = Object.keys(potentialEdges);\r\n    for (var edge of potentialEdgesKeys) {\r\n        // Get the target course\r\n        const target = edge.split('-')[1];\r\n\r\n        if ((! selectedNodes.hasOwnProperty(target)) && (! selectableNodes.hasOwnProperty(target))) {\r\n            analyseNodes[edge.split('-')[1]] = 1;\r\n        }\r\n    }*/\r\n\r\n    \r\n    //const analyseNodesKeys = Object.keys(analyseNodes);\r\n    //console.log(\"==========ANALYSE NODES KEYS===========\");\r\n    //console.log(analyseNodesKeys);\r\n    //console.log(\"==============ELEMENTS===============\");\r\n    //console.log(elements);\r\n\r\n    for (const node of analyseNodesKeys) {\r\n        // Determine if the prerequisite has been met\r\n        //const node = getElement(nodeID, elements);\r\n        //console.log(node);\r\n        \r\n        // If the node is already selected, don't bother making it selectable\r\n        if (selectedNodes.hasOwnProperty(node.id)) continue;\r\n\r\n\r\n        if (checkPrerequisites(node, elements, selectedNodes)) {\r\n            //console.log(\"SELECTABLE\");\r\n            //console.log(node.id);\r\n            selectableNodes[node.id] = 1;\r\n        } else {\r\n            if (selectableNodes.hasOwnProperty(node.id)) delete selectableNodes[node.id];\r\n            //console.log(\"DELETE UNSELECTABLE\");\r\n            //console.log(node.id);\r\n            // TODO: Deal with selected nodes cases? (e.g. unselecting a child???)\r\n\r\n        }\r\n    }\r\n}","// HELPER FUNCTION to toggle exclusion courses\r\n// Will hide the current course and its edges, unhide the next course and edges\r\n// in the queue. Finds new edges to show by regex substitution???\r\nimport { getConnectedEdges } from 'react-flow-renderer';\r\nimport getElement from './getelement.js';\r\nimport checkPrerequisites from './checkprerequisites.js';\r\nimport unselectNode from './unselectnode.js';\r\n\r\nexport default function exclusionSwap(node, elements, edges, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups) {\r\n    /*console.log(\"EXCLUSION SWAP\");\r\n    console.log(exclusionGroups);\r\n    console.log(node.id);*/\r\n    const newElements = [...elements];\r\n    for (var group of exclusionGroups) {\r\n        //console.log(\"CHECKING\", group);\r\n        if (group.includes(node.id)) {\r\n            //console.log(\"FOUND THE EXCLUSION GROUP\");\r\n            //console.log(group);\r\n\r\n            // Move this to the back\r\n            const prevCourse = group.shift();\r\n            group.push(prevCourse);\r\n\r\n            // Current course we need to display is now at front of queue\r\n            const curCourse = group[0];\r\n\r\n            //console.log(prevCourse);-\r\n            //console.log(curCourse);\r\n\r\n\r\n            // Toggle the nodes themselves accordingly\r\n            for (var e of elements) {\r\n                if (e.id === prevCourse) {\r\n                    /*console.log(e);\r\n                    console.log(\"HIDING\");\r\n                    console.log(prevCourse);*/\r\n                    e.isHidden = true;\r\n                    //console.log(e);\r\n                } else if (e.id === curCourse) {\r\n                    /*console.log(e);\r\n                    console.log(\"REVEALING\");\r\n                    console.log(curCourse);*/\r\n                    e.isHidden = false;\r\n                    //console.log(e);\r\n                }\r\n            }\r\n\r\n            // Determine state of the nodes (E.g. COMP6441 can be selectable\r\n            // whilst COMP6841 is not)\r\n            var curNode = getElement(curCourse, elements);\r\n            if (checkPrerequisites(curNode, elements, selectedNodes)) {\r\n                // The new node is selectable\r\n                //console.log(\"================== SELECTABLE\", curCourse);\r\n                selectableNodes[curCourse] = 1;\r\n                \r\n                // Determine previous node condition\r\n                if (selectedNodes.hasOwnProperty(prevCourse)) {\r\n                    //console.log(\"PREVIOUS SELECTED\", prevCourse);\r\n                    delete selectedNodes[prevCourse];\r\n                    delete selectableNodes[curCourse];\r\n                    selectedNodes[curCourse] = 1;\r\n                } else if (selectableNodes.hasOwnProperty(prevCourse)) {\r\n                    //console.log(\"PREVIOUS SELECTABLE\", prevCourse);\r\n                    delete selectableNodes[prevCourse];\r\n                }\r\n            } else {\r\n                // The new node is not selectable\r\n                // Unselect the original node\r\n                unselectNode(elements, node, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            }         \r\n\r\n            // Get all the edges of the previous course and hide all of them\r\n            // Then use regex sub to determine the new edges to reveal\r\n            // Transfer over selected, potential and hover edges if they are in newedgeslist\r\n            var edgesList = getConnectedEdges([node], edges);\r\n            var newEdgesList = getConnectedEdges([curNode], edges);\r\n            var edgesIds = [];\r\n            var newEdgesIds = [];\r\n            for (const edge of edgesList) {\r\n                edgesIds.push(edge.id);\r\n            }\r\n            for (const newEdge of newEdgesList) {\r\n                newEdgesIds.push(newEdge.id);\r\n            }        \r\n\r\n            // Stores all the common edges\r\n            var checkedEdges = [];\r\n\r\n            // Go through each edge we need to hide and check what we should do\r\n            // with the edge in hideEdgesList\r\n            for (const edge of edgesList) {\r\n                var hideEdge = getElement(edge.id, elements);\r\n                hideEdge.isHidden = true;\r\n                var newEdgeId = hideEdge.id.replace(prevCourse, curCourse);\r\n                if (getElement(newEdgeId, edges) !== null) {\r\n                    checkedEdges.push(newEdgeId);\r\n                } \r\n\r\n                // If selected, unselect it\r\n                if (selectedEdges.hasOwnProperty(hideEdge.id)) {\r\n                    delete selectedEdges[hideEdge.id];\r\n                    if (newEdgesIds.includes(newEdgeId)) {\r\n                        // This is in the newEdges list. Transfer the edge property\r\n                        selectedEdges[newEdgeId] = 1;\r\n                    }\r\n                }\r\n\r\n                // If potential, unpotential it\r\n                if (potentialEdges.hasOwnProperty(hideEdge.id)) {\r\n                    delete potentialEdges[hideEdge.id];\r\n                    if (newEdgesIds.includes(newEdgeId)) {\r\n                        // This is in the newEdges list. Transfer the edge property\r\n                        potentialEdges[newEdgeId] = 1;\r\n                    }\r\n                }\r\n\r\n                // If hover, unhover it\r\n                if (hoverEdges.hasOwnProperty(hideEdge.id)) {\r\n                    delete hoverEdges[hideEdge.id];\r\n                    if (newEdgesIds.includes(newEdgeId)) {\r\n                        // This is in the newEdges list. Transfer the edge property\r\n                        hoverEdges[newEdgeId] = 1;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            //console.log(\"CHECKED EDGES\", checkedEdges);\r\n            \r\n            for (const edge of edgesIds) {\r\n                const newEdgeId = edge.replace(prevCourse, curCourse);\r\n                if (! checkedEdges.includes(newEdgeId)) {\r\n                    // Old edge which has not been transferred to new edge.\r\n                    // Deal with the TARGET NODE SELECTABILITY right here\r\n                    var target = newEdgeId.split('-')[1];\r\n                    //console.log(\"CHECKING\", newEdgeId);\r\n                    //console.log(\"TARGET IS\", target);\r\n                    // Note that we cannot use newEdge.target as this edge\r\n                    // DOES NOT EXIST ( i think )\r\n\r\n                    // TODO: TEMPORARY FIX. Make sure target is not current course\r\n                    if (target === curCourse) continue;\r\n\r\n                    if (selectableNodes.hasOwnProperty(target)) {\r\n                        //console.log(\"Deleting \" + target);\r\n                        delete selectableNodes[target];\r\n                    }\r\n                }\r\n            }\r\n\r\n            // For each edge, show it IF TARGET AND SOURCE ARE NOT HIDDEN\r\n            // Will also show any additional edges\r\n            // (Example: COMP6441, COMP6841. COMP6841 -> COMP6448 but COMP6441 does not)\r\n            for (const newEdge of newEdgesList) {\r\n                var edge = getElement(newEdge.id, elements);\r\n                const sourceNode = getElement(edge.source, elements);\r\n                const targetNode = getElement(edge.target, elements);\r\n                if ((!sourceNode.isHidden) && (!targetNode.isHidden)) {\r\n                    // Show the edge if both nodes are not hidden\r\n                    edge.isHidden = false;    \r\n                }\r\n\r\n                // Determine if this edge has been checked before\r\n                if (checkedEdges.includes(newEdge.id)) {\r\n                    // It has been checked before\r\n                    // TODO: THIS CAN BREAK if both nodes have same edges\r\n                    // but one has an additional prerequisite??????\r\n                    continue;\r\n                } else {\r\n                    //console.log(newEdge.id + \" NOT BEEN CHECKED BEFORE\")\r\n                    // It has NOT been checked before\r\n                    if (selectedNodes.hasOwnProperty(curCourse)) {\r\n                        //console.log(curCourse + \" was previously selected\");\r\n                        \r\n                        if (sourceNode.id === curCourse) {\r\n                            // Reveal node is selected and source of edge. Make potential edge.\r\n                            potentialEdges[newEdge.id] = 1;\r\n                            // Check if the target node is selectable\r\n                            if (! selectableNodes.hasOwnProperty(edge.target)) {\r\n                                if (checkPrerequisites(targetNode, elements, selectedNodes)) {\r\n                                    //console.log(edge.target + \" DOES MEET PREREQS\");\r\n                                    selectableNodes[targetNode.id] = 1;\r\n                                } else {\r\n                                    //console.log(edge.target + \" DOES NOT MEET PREREQS\");\r\n                                }\r\n                            }\r\n                        } else {\r\n                            // Reveal node is selected and target of edge. Check previous edges/nodes\r\n                            if (curNode.data.conditions.prerequisites !== null) {\r\n                                for (const prereq of curNode.data.conditions.prerequisites) {\r\n                                    if (selectedNodes.hasOwnProperty(prereq)) {\r\n                                        // This node was selected. Make the edge selected\r\n                                        if (potentialEdges.hasOwnProperty('e' + prereq + '-' + curCourse)) delete potentialEdges['e' + prereq + '-' + curCourse];\r\n                                        selectedEdges['e' + prereq + '-' + curCourse] = 1;\r\n                                    } else {\r\n                                        // This node was not selected. Make sure the edge is unselected\r\n                                        if (potentialEdges.hasOwnProperty('e' + prereq + '-' + curCourse)) delete potentialEdges['e' + prereq + '-' + curCourse];\r\n                                        if (selectedEdges.hasOwnProperty('e' + prereq + '-' + curCourse)) delete selectedEdges['e' + prereq + '-' + curCourse];\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        //console.log(curCourse + \" was not previously selected\")\r\n                        // The node was not selected before. Delete any potential edges\r\n                        // Make target node unselectable if prereqs are not met\r\n                        if (potentialEdges.hasOwnProperty(edge.id)) {\r\n                            //console.log(\"DELETING \" + edge.id);\r\n                            delete potentialEdges[edge.id];\r\n                            if (selectableNodes.hasOwnProperty(edge.target)) {\r\n                                //console.log(edge.target + \" WAS SELECTABLE\")\r\n                                if (! checkPrerequisites(targetNode, elements, selectedNodes)) {\r\n                                    //console.log(edge.target + \" DOES NOT MEET PREREQS\");\r\n                                    delete selectableNodes[targetNode.id];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            break;\r\n        }\r\n    }\r\n\r\n    return newElements;\r\n}","// HELPER FUNCTION FOR unselecting nodes\r\n// Determines if any nodes not connected to unselect node needs to be unselected.\r\n// For example, nodes which rely on N units completed\r\nimport checkPrerequisites from './checkprerequisites.js';\r\nimport checkPrequisiteUnits from './checkprerequisites.js';\r\nimport unselectNode from './unselectnode.js';\r\nimport getElement from './getelement.js';\r\n\r\nexport default function unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    console.log(\"UNSELECTUNCONNECTED\");\r\n    const selectedNodesList = Object.keys(selectedNodes);\r\n    for (const selected of selectedNodesList) {\r\n        if (selected === \"SENGAH\") continue;\r\n        console.log(\"CHECKING \" + selected);\r\n\r\n        // Determine if prerequisites are met\r\n        const selectedNode = getElement(selected, elements);\r\n        if (! checkPrerequisites(selectedNode, elements, selectedNodes)) {\r\n            // Prerequisites are not met\r\n            unselectNode(elements, selectedNode, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            continue;\r\n        }\r\n\r\n        // CASE if the node is selected and it has n_course prerequisite \r\n        if (selectedNode.data.conditions.units_required !== null) {\r\n            console.log(\"+++++++++++++++++++\", selectedNode.id);\r\n            // Units required exists\r\n            // Do not count the nodes it \"unlocks\" towards its unit count\r\n            // DO not count nodes with a higher \"units_required\" towards its unit count\r\n            // NOTE: This might backfire if it has an unlock which DOES NOT\r\n            // require it as a prerequisite\r\n            \r\n            var trueSelectedNodes = {...selectedNodes};\r\n\r\n            if (selectedNode.data.unlocks !== null) {\r\n                // Create unlock queue to process \"selected\" unlocks\"\r\n                const selectedUnlockQueue = [];\r\n                for (const unlockCourse of selectedNode.data.unlocks) {\r\n                    if (selectedNodes.hasOwnProperty(unlockCourse)) selectedUnlockQueue.push(unlockCourse);\r\n                }\r\n\r\n                while (selectedUnlockQueue.length !== 0) {\r\n                    const curUnlock = getElement(selectedUnlockQueue.shift(), elements);\r\n                    console.log(\"------------- deleting \" + curUnlock.id);\r\n                    delete trueSelectedNodes[curUnlock.id];\r\n\r\n                    if (curUnlock.data.unlocks !== null) {\r\n                        for (const unlockCourse of curUnlock.data.unlocks) {\r\n                            if (selectedNodes.hasOwnProperty(unlockCourse)) selectedUnlockQueue.push(unlockCourse);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // We now have a list of nodes which will count towards our current node's unit requirements\r\n            // Final check = Check for other selected nodes which have unit requirements\r\n            // Do not count them unless their unit requirements are smaller than current node's.\r\n            const trueSelectedNodesList = Object.keys(trueSelectedNodes);\r\n            for (const selected of trueSelectedNodesList) {\r\n                console.log(\"Checking \", selected);\r\n                const selectedUnitsNode = getElement(selected, elements);\r\n                if (selectedUnitsNode.data.conditions.units_required !== null) {\r\n                    if (selectedUnitsNode.data.conditions.units_required >= selectedNode.data.conditions.units_required) {\r\n                        delete trueSelectedNodes[selected];\r\n                    }\r\n                }\r\n            }\r\n\r\n            console.log(\"TRUE SELECTED LOOKS LIKE\", trueSelectedNodes);\r\n            // Perform prerequisite unit check once more\r\n            if (! checkPrequisiteUnits(selectedNode, elements, trueSelectedNodes)) {\r\n                unselectNode(elements, selectedNode, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            }\r\n        }\r\n    }\r\n\r\n    const selectableNodesList = Object.keys(selectableNodes);\r\n    for (const selectable of selectableNodesList) {\r\n        // Determine if prerequisites are met\r\n        const selectableNode = getElement(selectable, elements);\r\n        if (! checkPrerequisites(selectableNode, elements, selectedNodes)) {\r\n            // Prerequisites are not met\r\n            delete selectableNode[selectable];\r\n        }\r\n    }\r\n}","import React, {useState} from 'react';\r\nimport ReactFlow, {isNode, isEdge} from 'react-flow-renderer';\r\nimport TutorialNode1 from './tutorialnode1.js';\r\nimport TutorialNode2 from './tutorialnode2.js';\r\n\r\nimport hoverPrerequisites from './hoverprerequisites.js';\r\nimport unhoverPrerequisites from './unhoverprerequisites.js';\r\nimport highlightElements from './highlightelements.js';\r\n// import checkPrerequisites from './checkprerequisites.js';\r\n\r\nimport selectNode from './selectnode.js';\r\nimport unselectNode from './unselectnode.js';\r\nimport getSelectable from './getselectable.js';\r\nimport exclusionSwap from './exclusionswap.js';\r\nimport unselectUnconnected from './unselectunconnected.js';\r\n\r\nvar elementsData = [\r\n    {id: \"CODE0000\", type: \"tutorial1\", data: {instructions: \"Circles is an interactive degree planner\", course_level: null, units: 0, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: null, prerequisites: null, corequisites: null, units_required: null, level_for_units_required: null, core_year: null, other: null}, equivalents: null, exclusions: null, unlocks: [\"CODE1111\"]}, position: {x: -150, y: -150}, style: {cursor: 'pointer', display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 8, fontWeight: \"bold\", color: \"black\", background: \"lightgrey\", width: 100, height: 100, borderRadius: 50, border: \"2px solid black\", boxShadow: \"0px 0px 2px 0px grey\"}, textColour: 'black', textSelectedColour: 'black', selectedColour: 'lightgrey', selectableColour: 'black', isHidden: false},\r\n    {id: \"CODE1111\", type: \"tutorial1\", data: {instructions: \"Click on a node to take the course\", course_level: null, units: 6, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: \"CODE0000\", prerequisites: [\"CODE0000\"], corequisites: null, units_required: null, level_for_units_required: null, core_year: null, other: null}, equivalents: null, exclusions: null, unlocks: [\"CODE7777\", \"CODE2222\"]}, position: {x: -75, y: 0}, style: {cursor: 'pointer', display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 8, fontWeight: \"bold\", color: \"#1EB13C\", background: \"white\", width: 80, height: 80, borderRadius: 40, border: \"2px solid #1EB13C\", boxShadow: \"0px 0px 2px 0px grey\"}, textColour: '#1EB13C', textSelectedColour: 'white', selectableColour: '#bce8c5', selectedColour: '#1EB13C', isHidden: false},\r\n    {id: \"CODE2222\", type: \"tutorial1\", data: {instructions: \"Courses light up when you clear all the prerequisites\", course_level: null, units: 6, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: \"CODE1111\", prerequisites: [\"CODE1111\"], corequisites: null, units_required: null, level_for_units_required: null, core_year: null, other: null}, equivalents: null, exclusions: null, unlocks: [\"CODE7777\", \"CODE3333\", \"CODE4444\"]}, position: {x: 50, y: -115}, style: {cursor: 'pointer', display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 8, fontWeight: \"bold\", color: \"#166DBA\", background: \"white\", width: 80, height: 80, borderRadius: 40, border: \"2px solid #166DBA\", boxShadow: \"0px 0px 2px 0px grey\"}, textColour: '#166DBA', textSelectedColour: 'white', selectableColour: '#b9d3ea', selectedColour: '#166DBA', isHidden: false},\r\n\r\n    {id: \"CODE7777\", type: \"tutorial1\", data: {instructions: \"Hover over a node to see its prerequisites\", course_level: null, units: 6, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: 'CODE1111 && CODE2222', prerequisites: ['CODE1111', 'CODE2222'], corequisites: null, units_required: null, level_for_units_required: null, core_year: null, other: null}, equivalents: null, unlocks: null}, position: {x: 110, y: 75}, style: {cursor: 'pointer', display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 8, fontWeight: \"bold\", color: \"#D66328\", background: \"white\", width: 80, height: 80, borderRadius: 40, border: \"2px solid #8A36B4\", boxShadow: \"0px 0px 2px 0px grey\"}, textColour: '#8A36B4', textSelectedColour: 'white', selectableColour: '#dcc3e9', selectedColour: '#8A36B4', isHidden: false},\r\n\r\n    {id: \"CODE3333\", type: \"tutorial2\", data: {instructions: \"Double click to toggle between equivalent courses\", course_level: null, units: 6, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: \"CODE2222\", prerequisites: [\"CODE2222\"], corequisites: null, units_required: null, level_for_units_required: null, core_year: null, other: null}, equivalents: null, exclusions: [\"CODE4444\"], unlocks: null}, position: {x: 225, y: -50}, style: {cursor: 'pointer', display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 8, fontWeight: \"bold\", color: \"#CA1818\", background: \"white\", width: 80, height: 80, borderRadius: 40, border: \"2px solid #CA1818\", boxShadow: \"0px 0px 2px 0px grey\"}, textColour: '#CA1818', textSelectedColour: 'white', selectableColour: '#efbaba', selectedColour: '#CA1818', isHidden: false},\r\n    {id: \"CODE4444\", type: \"tutorial2\", data: {instructions: \"Look out for the black 'swap' icon on nodes!\", course_level: null, units: 6, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: \"CODE2222\", prerequisites: [\"CODE2222\"], corequisites: null, units_required: null, level_for_units_required: null, core_year: null, other: null}, equivalents: null, exclusions: [\"CODE3333\"], unlocks: null}, position: {x: 225, y: -50}, style: {cursor: 'pointer', display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 8, fontWeight: \"bold\", color: \"#CA1818\", background: \"white\", width: 80, height: 80, borderRadius: 40, border: \"2px solid #CA1818\", boxShadow: \"0px 0px 2px 0px grey\"}, textColour: '#CA1818', textSelectedColour: 'white', selectableColour: '#efbaba', selectedColour: '#CA1818', isHidden: false},\r\n    \r\n    {id: \"CODE5555\", type: \"tutorial1\", data: {instructions: \"This course requires 24UOC. It will be selectable once you have enough units\", course_level: null, units: 6, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: null, prerequisites: null, corequisites: null, units_required: 24, level_for_units_required: null, core_year: null, other: null}, equivalents: null, unlocks: null}, position: {x: -150, y: 125}, style: {cursor: 'pointer', display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 8, fontWeight: \"bold\", color: \"#D66328\", background: \"white\", width: 80, height: 80, borderRadius: 40, border: \"2px solid #D66328\", boxShadow: \"0px 0px 2px 0px grey\"}, textColour: '#D66328', textSelectedColour: 'white', selectableColour: '#f3d0bf', selectedColour: '#D66328', isHidden: false},\r\n    \r\n    {id: 'eCODE0000-CODE1111', source: 'CODE0000', target: 'CODE1111', type: 'straight', style: {opacity: '0.2', stroke: 'grey'}, animated: false, isHidden: false},\r\n    {id: 'eCODE1111-CODE2222', source: 'CODE1111', target: 'CODE2222', type: 'straight', style: {opacity: '0.2', stroke: 'grey'}, animated: false, isHidden: false},\r\n    {id: 'eCODE2222-CODE3333', source: 'CODE2222', target: 'CODE3333', type: 'straight', style: {opacity: '0.2', stroke: 'grey'}, animated: false, isHidden: false},\r\n    {id: 'eCODE2222-CODE4444', source: 'CODE2222', target: 'CODE4444', type: 'straight', style: {opacity: '0.2', stroke: 'grey'}, animated: false, isHidden: false},\r\n    {id: 'eCODE1111-CODE7777', source: 'CODE1111', target: 'CODE7777', type: 'straight', style: {opacity: '0.2', stroke: 'grey'}, animated: false, isHidden: false},\r\n    {id: 'eCODE2222-CODE7777', source: 'CODE2222', target: 'CODE7777', type: 'straight', style: {opacity: '0.2', stroke: 'grey'}, animated: false, isHidden: false}\r\n\r\n];\r\n\r\n// var nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {\"CODE0000\": 1};\r\n// var selectedNodes = {\"CODE0000\": 1};\r\nvar selectedEdges = {};\r\nvar selectableNodes = {\"CODE1111\": 1};\r\nvar potentialEdges = {\"eCODE0000-CODE1111\": 1};\r\nvar hoverEdges = {};\r\nvar exclusionGroups = [[\"CODE3333\", \"CODE4444\"]];\r\nvar exclusionNodes = {};\r\n\r\nconst nodeTypes = {\r\n    tutorial1: TutorialNode1,\r\n    tutorial2: TutorialNode2,\r\n};\r\n\r\n\r\n// elementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\n\r\n\r\n\r\nconst InteractiveTutorial = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    // const [hoverNode, setHoverNode] = useState();\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n\r\n    const onLoad = (reactFlowInstance) => {\r\n        // HARD RESET STATE ON LOAD\r\n        selectedNodes = {\"CODE0000\": 1};\r\n        // selectedNodes = {\"CODE0000\": 1};\r\n        selectedEdges = {};\r\n        selectableNodes = {\"CODE1111\": 1};\r\n        potentialEdges = {\"eCODE0000-CODE1111\": 1};\r\n        hoverEdges = {};\r\n        exclusionGroups = [[\"CODE3333\", \"CODE4444\"]];\r\n        exclusionNodes = {};        \r\n        \r\n        for (var e of elements) {\r\n            e.isHidden = false;\r\n        }\r\n        for (const group of exclusionGroups) {\r\n            for (const exclusion of group) {\r\n                exclusionNodes[exclusion] = 1;\r\n            }\r\n        }\r\n        for (var group of exclusionGroups) {\r\n            const last = group.pop();\r\n            for (var course of elements) {\r\n                if (last === course.id) {\r\n                    course.isHidden = true;\r\n                    for (var edge of elements) {\r\n                        if (isNode(edge)) continue;\r\n                        if (edge.source === last || edge.target === last) {\r\n                            edge.isHidden = true;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            group.push(last);\r\n        }\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n        reactFlowInstance.fitView();\r\n    };\r\n\r\n    const selectUnselect = (element) => {\r\n        unhoverPrerequisites(hoverEdges);\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n    \r\n    const toggleExclusion = (element) => {\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onElementClick = (event, element) => {\r\n        if (element.id === \"CODE0000\" || element.id === 'CODE6666') return;\r\n        if (isEdge(element)) return;\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return;\r\n\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 250);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            selectUnselect(element);\r\n        }\r\n    }\r\n\r\n    const onNodeMouseEnter = (event, node) => {\r\n        // setHoverNode(node);\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    return (\r\n        <ReactFlow\r\n            elements={elements}\r\n            style={{width: \"100%\", height: \"75vh\"}}\r\n            onLoad={onLoad}\r\n            nodeTypes={nodeTypes}\r\n            nodesConnectable={false}\r\n            onElementClick={onElementClick}\r\n            paneMoveable={false}\r\n            selectNodesOnDrag={false}\r\n            elementsSelectable={false}\r\n            nodesDraggable={false}\r\n            onNodeMouseEnter={onNodeMouseEnter}\r\n            onNodeMouseLeave={onNodeMouseLeave}\r\n        >\r\n        </ReactFlow>\r\n    );\r\n}\r\n\r\nexport default InteractiveTutorial;","import React from \"react\";\r\nimport { Button, Container, Modal } from 'semantic-ui-react'\r\nimport InteractiveTutorial from './interactivetutorial.js';\r\n\r\nfunction exampleReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'OPEN_MODAL':\r\n      return { open: true, dimmer: action.dimmer }\r\n    case 'CLOSE_MODAL':\r\n      return { open: false }\r\n    default:\r\n      throw new Error()\r\n  }\r\n}\r\n\r\nfunction TutorialModal() {\r\n  const [state, dispatch] = React.useReducer(exampleReducer, {\r\n    open: false,\r\n    dimmer: undefined,\r\n  })\r\n  const { open, dimmer } = state\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        size=\"mini\"\r\n        color=\"black\"\r\n        onClick={() => dispatch({ type: 'OPEN_MODAL', dimmer: 'blurring' })}\r\n      >\r\n        <text>Need Help?</text>  \r\n      </Button>\r\n\r\n      <Modal\r\n        closeIcon\r\n        dimmer={dimmer}\r\n        open={open}\r\n        onClose={() => dispatch({ type: 'CLOSE_MODAL' })}\r\n      >\r\n        <Container>\r\n          <InteractiveTutorial />\r\n        </Container>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TutorialModal\r\n\r\n//DropdownDegrees.clickDone() \r\n\r\n//DropdownDegrees d = new DropdownDegrees(); \r\n//d.clickDone()","import React from 'react';\r\nimport SidebarModal from \"./sidebar-modal.js\";\r\nimport TutorialModal from \"./tutorial-modal.js\";\r\nimport { Icon, Button, Container, Header, Divider, Segment, Message, Label } from 'semantic-ui-react';\r\nimport ScrollTo from \"react-scroll-into-view\";\r\nimport specialisationsJSON from \"../webscraper/specialisations.json\";\r\nimport coursesJSON from \"../webscraper/courses.json\";\r\n\r\nconst REGEX_COURSE_CODE = /[A-Z]{4}\\d{4}/g;\r\n\r\nconst getCoursesInLevel = (rawList) => {\r\n    rawList = rawList.flat().filter(c => c !== \"ANY COURSE\");\r\n    const allCourseIds = Object.keys(coursesJSON);\r\n    const courseList = [];\r\n    rawList.forEach(courseId => {\r\n        if (courseId.match(REGEX_COURSE_CODE)) {\r\n            courseList.push(courseId);\r\n        } else if (courseId.match(/^[A-Z]{4}\\d$/)) {\r\n            const relevantCourses = allCourseIds.filter(c => c.includes(courseId));\r\n            relevantCourses.forEach(c => {\r\n                if (courseList.includes(c)) return;\r\n                courseList.push(c);\r\n            });\r\n        }\r\n    });\r\n\r\n    return courseList;\r\n}\r\n\r\nconst getTotalUnitsTaken = (selectedNodes) => {\r\n    const selectedCourses = Object.keys(selectedNodes).filter(c => c.match(REGEX_COURSE_CODE));\r\n    return selectedCourses.reduce((total, c) => total + (c in coursesJSON ? coursesJSON[c].units : 0), 0);\r\n}\r\n\r\nconst getSelectedCourses = (specialisationCodes, selectedNodes) => {\r\n    // console.log(specialisationCodes);\r\n    return specialisationCodes.map(specId => {\r\n        const levels = Object.keys(specialisationsJSON[specId].structure);\r\n        const coreCourses = [];\r\n\r\n        return levels.filter(levelName => {\r\n            const courseList = specialisationsJSON[specId].structure[levelName].courses;\r\n            if (!courseList) return false;\r\n            if (courseList.length === 1 && courseList.includes(\"ANY COURSE\")) return false;\r\n            return true;\r\n        }).map(levelName => {\r\n            const rawList = specialisationsJSON[specId].structure[levelName].courses;\r\n            const courseList = getCoursesInLevel(rawList);\r\n            const minUnits = specialisationsJSON[specId].structure[levelName].units_required;\r\n            const style = {\r\n                transition: \"0.3s ease\"\r\n            }\r\n            if (levelName.match(/[Cc]ore/g)) {\r\n                // CORE COURSE\r\n                courseList.forEach(c => coreCourses.push(c));\r\n                const unitsTaken = courseList.reduce((total, c) => total + (c in selectedNodes ? coursesJSON[c].units : 0), 0);\r\n                const showUnits = minUnits\r\n                    ? <Label horizontal style={{transition: \"0.3s ease\", alignSelf: \"flex-start\"}} color={unitsTaken >= minUnits ? \"green\" : \"red\"}>{unitsTaken}/{minUnits}</Label>\r\n                    : null;\r\n                return (\r\n                    <Segment key={levelName} color=\"red\">\r\n                        <div style={{display: \"flex\"}}>\r\n                            <Header style={{flexGrow: \"1\"}} as=\"h5\">{specId} - {levelName}</Header>\r\n                            {showUnits}\r\n                        </div>\r\n                        {courseList.map(c => c in selectedNodes ? <Label key={c} size=\"small\" color=\"grey\" style={style}>{c}</Label> : <Label key={c} size=\"small\" style={style}>{c}</Label>)}\r\n                    </Segment>\r\n                )\r\n            } else {\r\n                // Not core course. Render segment with chosen electives only.\r\n                const unitsTaken = courseList.reduce((total, c) => total + (c in selectedNodes && !coreCourses.includes(c) ? coursesJSON[c].units : 0), 0);\r\n                const showUnits = minUnits\r\n                    ? <Label horizontal style={{transition: \"0.3s ease\", alignSelf: \"flex-start\"}} color={unitsTaken >= minUnits ? \"green\" : \"red\"}>{unitsTaken}/{minUnits}</Label>\r\n                    : null;\r\n                return (\r\n                    <Segment key={levelName} style={{minHeight: \"70px\"}}>\r\n                        <div style={{display: \"flex\"}}>\r\n                            <Header style={{flexGrow: \"1\"}} as=\"h5\">{specId} - {levelName}</Header>\r\n                            {showUnits}\r\n                        </div>\r\n                        {courseList.filter(c => (c in selectedNodes && !coreCourses.includes(c))).map(c => <Label key={c} size=\"small\" color=\"grey\" style={style}>{c}</Label>)}\r\n                    </Segment>\r\n                )\r\n            }\r\n        })\r\n    });\r\n}\r\nclass Sidebar extends React.Component {\r\n    render() {\r\n        return (\r\n            <Container style={{paddingLeft: \"10px\", paddingRight: \"20px\"}}>\r\n                <Header as=\"h1\" textAlign=\"center\" style={{marginTop: \"10px\"}}>Circles</Header>\r\n                <Message info>\r\n                    <p>Circles is a <b>visual degree planner</b> for UNSW undergraduate students. Choose your program and degree to begin!</p>\r\n                    <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\"}}>\r\n                        <SidebarModal />\r\n                        <TutorialModal />\r\n                    </div>\r\n                </Message>\r\n                <Divider></Divider>\r\n                <Container>\r\n                    <div style={{display: \"flex\"}}>\r\n                        <Header style={{flexGrow: \"1\", marginTop: \"5px\"}} as=\"h3\">\r\n                            Your selected courses\r\n                        </Header>\r\n                        <Label style={{alignSelf: \"flex-start\"}} color=\"black\" basic>{getTotalUnitsTaken(this.props.selectedNodes)} UOC</Label>\r\n                    </div>\r\n                    {getSelectedCourses(this.props.specialisations, this.props.selectedNodes)}\r\n                </Container>\r\n                <Container textAlign=\"center\">\r\n                    <ScrollTo selector=\"#DegreePlanner\">\r\n                        <Button\r\n                            animated=\"vertical\"\r\n                            color=\"red\"\r\n                            style={{marginTop: \"10px\", marginBottom: \"10px\"}}\r\n                        >\r\n                            <Button.Content visible>Generate degree planner</Button.Content>\r\n                            <Button.Content hidden>\r\n                                <Icon name=\"arrow down\" />\r\n                            </Button.Content>\r\n                        </Button>\r\n                    </ScrollTo>\r\n\r\n                </Container>\r\n            </Container>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Sidebar","import React, { useState } from \"react\";\r\nimport { Button, Dropdown } from \"semantic-ui-react\";\r\nimport { useStoreActions } from \"react-flow-renderer\";\r\nimport getElement from \"./getelement.js\";\r\n\r\nexport default function DropdownSearch(props) {\r\n    const [search, setSearch] = useState(null);\r\n\r\n    const handleChange = (e, prop) => {\r\n        setSearch(prop.value);\r\n    };\r\n\r\n    const { setInitTransform } = useStoreActions((actions) => actions);\r\n    const transformUpdater = (x, y, zoom) => {\r\n        setInitTransform({ x, y, k: zoom });\r\n    };\r\n\r\n    const clickDone = () => {\r\n        if (search === null) return;\r\n        const element = getElement(search, props.searchElements);\r\n\r\n        transformUpdater(\r\n            -(element.position.x) * 2 + (window.innerWidth * 0.75)/2 - 64,\r\n            -(element.position.y) * 2 + (window.innerHeight)/2 - 64,\r\n            2\r\n        );\r\n        \r\n        console.log(element);\r\n\r\n            \r\n        // Show the node if it is hidden\r\n        if (element.isHidden === true) {\r\n            // Determine the current showing node and hide it\r\n            for (const exclusion of element.data.exclusions) {\r\n                for (const course of props.searchElements) {\r\n                    if (course.id === exclusion) {\r\n                        // Check if this exclusion is revealed\r\n                        var exclusionNode = getElement(exclusion, props.searchElements);\r\n                        if (exclusionNode.isHidden === false) {\r\n                            // This is the node we need to toggle\r\n                            props.toggleExclusion(exclusionNode);\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dropdown\r\n                selection\r\n                search\r\n                options={props.searchNodeOptions}\r\n                placeholder=\"Looking for a course?\"\r\n                onChange={handleChange}\r\n                onKeyPress={event => {\r\n                    if (event.key === 'Enter') {\r\n                      clickDone();\r\n                    }\r\n                  }}\r\n                value={search}\r\n            />\r\n            <Button\r\n                onClick={clickDone}\r\n                icon=\"search\"\r\n                color=\"blue\"\r\n                style={{marginLeft: \"5px\"}}\r\n            >\r\n            </Button>\r\n        </>\r\n    );\r\n}\r\n","import React, {useState} from 'react';\r\nimport ReactFlow, { isNode, isEdge, ReactFlowProvider } from 'react-flow-renderer';\r\n\r\nimport CustomNode1 from '../../components/customnode1.js';\r\nimport CustomNode2 from '../../components/customnode2.js';\r\nimport HeaderNode1 from '../../components/headernode1.js';\r\n\r\nimport HoverInfo from '../../components/hoverinfo.js';\r\nimport hoverPrerequisites from '../../components/hoverprerequisites.js';\r\nimport unhoverPrerequisites from '../../components/unhoverprerequisites.js';\r\n\r\nimport { Grid, Segment, Container, Dropdown, Header } from 'semantic-ui-react'\r\nimport Sidebar from \"../../components/sidebar.js\"\r\n// import pkg from 'semantic-ui-react/package.json'\r\n\r\nimport DegreePlanner from \"../../components/degreeplanner.js\"\r\nimport DropdownSearch from \"../../components/dropdownsearch.js\"\r\n\r\n// import positionHelper from '../../components/positionhelper.js';\r\nimport selectNode from '../../components/selectnode.js';\r\nimport unselectNode from '../../components/unselectnode.js';\r\nimport highlightElements from '../../components/highlightelements.js';\r\nimport getSelectable from '../../components/getselectable.js';\r\nimport checkPrerequisites from '../../components/checkprerequisites';\r\nimport exclusionSwap from '../../components/exclusionswap.js';\r\n\r\nimport unselectUnconnected from '../../components/unselectunconnected.js';\r\nimport coursesJSON from \"../../webscraper/courses.json\";\r\nimport dataJSON from \"./data.json\"\r\n\r\nvar specialisations = ['SENGAH'];\r\nvar program = \"3707\";\r\nvar elementsData = dataJSON.slice();\r\n\r\n// This is for dropdown search\r\nvar searchNodeOptions = [];\r\nfor (const course of elementsData) {\r\n    if (isNode(course)) {\r\n        searchNodeOptions.push({\r\n            key: course.id,\r\n            value: course.id,\r\n            text: course.id\r\n        });\r\n    }\r\n}\r\n\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {};\r\nfor (const specialisation of specialisations) selectedNodes[specialisation] = 1;\r\n\r\nvar selectedEdges = {};\r\nvar selectableNodes = {};\r\nvar potentialEdges = {};\r\nvar hoverEdges = {};\r\n\r\n// Load up the chart with initial selectable nodes and edges\r\nfor (const node of nodesData) {\r\n    if (selectedNodes.hasOwnProperty(node.id)) {\r\n        if (node.data.unlocks === null) continue;\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n        }\r\n    } else if (checkPrerequisites(node, elementsData, selectedNodes)) {\r\n        selectableNodes[node.id] = 1;\r\n    }\r\n}\r\n\r\nvar exclusionGroups = require(\"./data_exclusion.json\");\r\nvar exclusionNodes = {};\r\nfor (const group of exclusionGroups) {\r\n    for (const exclusion of group) {\r\n        exclusionNodes[exclusion] = 1;\r\n    }\r\n}\r\n\r\nelementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\nconst nodeTypes = {\r\n    custom1: CustomNode1,\r\n    custom2: CustomNode2,\r\n    header1: HeaderNode1\r\n};\r\n\r\nconst layoutStyle = {overflowX: \"hidden\", overflowY: \"overlay\", width: \"100vw\", height: \"100vh\"};\r\n\r\nconst getMoreCoursesForDropdown = (dataJSON) => {\r\n\r\n    const moreOptions = [];\r\n    const nodesOnFlowchart = dataJSON.map(node => node.id);\r\n    // console.log(\"refresh\", nodesOnFlowchart);\r\n\r\n    for (const code in coursesJSON) {\r\n        if (nodesOnFlowchart.includes(code)) continue;\r\n\r\n        const name = coursesJSON[code].course_name;\r\n        moreOptions.push({\r\n            key: code,\r\n            value: code,\r\n            text: code + \" - \" + name\r\n        });\r\n    }\r\n\r\n    return moreOptions;\r\n}\r\n\r\nconst BESengah = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverText, setHoverText] = useState(false);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    const [layout, setLayout] = useState(layoutStyle);\r\n    const [additionalCourses, setAdditionalCourses] = useState([])\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n\r\n    const onInstanceLoad = (instance) => {\r\n        for (var group of exclusionGroups) {\r\n            const last = group.pop();\r\n\r\n            for (var course of elementsData) {\r\n                if (last === course.id) {\r\n                    course.isHidden = true;\r\n                    // Get all the edges and hide them too\r\n                    for (var edge of elementsData) {\r\n                        if (isNode(edge)) continue;\r\n                        if (edge.source === last || edge.target === last) {\r\n                            edge.isHidden = true;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            group.push(last);\r\n        }\r\n        instance.setTransform({x: 470, y: 350, zoom: 0.38});\r\n    };\r\n\r\n    const selectUnselect = (element) => {\r\n        // NOTE: Might not need this?????\r\n        // EXPLANATION: Reason we dont need it is because we have to leave node\r\n        // anyways to hover another node. But maybe good practise to have just in case\r\n        // Unhover edges which lit up on nodeMouseEnter\r\n        unhoverPrerequisites(hoverEdges);\r\n\r\n        // 1. Select the node and fill in edges.\r\n        // - Deal with unselecting nodes\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            // console.log(\"MAINSELECT\");\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            // console.log(\"UNSELECTING\");\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n\r\n        // console.log(\"==========SelectedNodes==========\");\r\n        // console.log(selectedNodes);\r\n        // console.log(\"==========SelectedEdges==========\");\r\n        // console.log(selectedEdges);\r\n        // console.log(\"==========SelectableNodes==========\");\r\n        // console.log(selectableNodes);\r\n        // console.log(\"==========PotentialEdges==========\");\r\n        // console.log(potentialEdges);\r\n\r\n        // 2. Determine which nodes are now selectable\r\n        // - Determine which previously selectable nodes are now unselectable\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n\r\n        // Render graph accordingly\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const toggleExclusion = (element) => {\r\n        // TODO: ARE there courses which do not \r\n        // For all immediate edges of the element, swap\r\n        // with the exclusion course\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    // ==========ONCLICK==========\r\n    const onElementClick = (event, element) => {\r\n        // console.log(\"ONELEMENTCLICK\");\r\n        if (isEdge(element)) return; // Don't care about edges\r\n        if (specialisations.includes(element.id)) return; // Cannot click on main node\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return; // Cannot select non selectable nodes\r\n\r\n        // Determine double or single click for exclusion nodes\r\n        // This will prevent normal nodes from waiting the double click delay\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 250);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            // Not an exclusion node.\r\n            selectUnselect(element);\r\n        }\r\n    };\r\n    // ===========================\r\n\r\n    // ==========ONHOVER==========\r\n    const onNodeMouseEnter = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        // Display node information in top left\r\n        setHoverText(true);\r\n        setHoverNode(node);\r\n\r\n        // If the node is unselected, highlight prerequisite edges in purple\r\n        //if ((!selectedNodes.hasOwnProperty(node.id)) && (!selectableNodes.hasOwnProperty(node.id))) {\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        //}\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        setHoverText(false);\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    let hoverDisplay;\r\n    if (hoverText) {\r\n        hoverDisplay = <HoverInfo node={hoverNode}/>\r\n    }\r\n\r\n    // ===========================\r\n\r\n    // const onNodeDragStop = (event, node) => {\r\n    //     for (var e of elements) {\r\n    //         if (e.id === node.id) {\r\n    //             e.position.x = node.position.x;\r\n    //             e.position.y = node.position.y;\r\n    //             break;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    const disableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'hidden'});\r\n    }\r\n\r\n    const enableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'overlay'});\r\n    }\r\n\r\n    return (\r\n        <div style={{positon: \"relative\"}}>\r\n            <div style={layout}>\r\n                <Grid columns={2} divided>\r\n                    <Grid.Column width=\"12\">\r\n                        <ReactFlowProvider>\r\n                            <div onMouseEnter={disableBodyScroll} onMouseLeave={enableBodyScroll}>\r\n                                <ReactFlow\r\n                                    elements={elements}\r\n                                    style={{width: '100%', height: '95vh'}}\r\n                                    onLoad={onInstanceLoad}\r\n                                    nodeTypes={nodeTypes}\r\n                                    nodesConnectable={false}\r\n                                    onElementClick={onElementClick}\r\n                                    minZoom={0.38}\r\n                                    //setInitTransform={TransformUpdater({x: 100, y: 100, z: 1})}\r\n                                    nodesDraggable={false}\r\n                                    onNodeMouseEnter={onNodeMouseEnter}\r\n                                    onNodeMouseLeave={onNodeMouseLeave}\r\n                                    selectNodesOnDrag={false}\r\n                                    // onNodeDragStop={onNodeDragStop}\r\n                                    elementsSelectable={false}\r\n                                >\r\n                                    <div style={{position: \"absolute\", zIndex: \"10\", top: \"30px\", right: \"30px\"}}>\r\n                                        <DropdownSearch toggleExclusion={toggleExclusion} searchNodeOptions={searchNodeOptions} searchElements={elements}/>\r\n                                    </div>\r\n                                </ReactFlow>\r\n                            </div>\r\n                            <Container style={{marginBottom: \"50px\"}}>\r\n                                <Segment raised>\r\n                                    {/* <p>Couldn't find a course up there? Add it here:</p> */}\r\n                                    <Header as=\"h5\">Couldn't find a course up there? Add it here:</Header>\r\n                                    <Dropdown\r\n                                        selection\r\n                                        multiple\r\n                                        search\r\n                                        fluid\r\n                                        options={getMoreCoursesForDropdown(dataJSON)}\r\n                                        onChange={(e, data) => setAdditionalCourses(data.value)}\r\n                                        placeholder=\"Addditional courses\"\r\n                                    />\r\n                                </Segment>\r\n                            </Container>\r\n                        </ReactFlowProvider>\r\n                    </Grid.Column>\r\n                    <Grid.Column width=\"4\">\r\n                        <Sidebar specialisations={specialisations} selectedNodes={selectedNodes}/>\r\n                    </Grid.Column>\r\n                </Grid>\r\n                {hoverDisplay}\r\n                {/* <button onClick={positionHelper(elements)}>GENERATE POSITION</button> */}\r\n                <div id=\"DegreePlanner\">\r\n                    <DegreePlanner\r\n                        key={Object.keys(selectedNodes).concat(additionalCourses).join(\"\")}\r\n                        program={program}\r\n                        specialisations={specialisations}\r\n                        selectedCourses={Object.keys(selectedNodes).concat(additionalCourses)}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BESengah;","import React, {useState} from 'react';\r\nimport ReactFlow, {isNode, isEdge} from 'react-flow-renderer';\r\nimport TutorialNode1 from './tutorialnode1.js';\r\nimport TutorialNode2 from './tutorialnode2.js';\r\n\r\nimport hoverPrerequisites from './hoverprerequisites.js';\r\nimport unhoverPrerequisites from './unhoverprerequisites.js';\r\nimport highlightElements from './highlightelements.js';\r\n// import checkPrerequisites from './checkprerequisites.js';\r\n\r\nimport selectNode from './selectnode.js';\r\nimport unselectNode from './unselectnode.js';\r\nimport getSelectable from './getselectable.js';\r\nimport exclusionSwap from './exclusionswap.js';\r\nimport unselectUnconnected from './unselectunconnected.js';\r\n\r\nvar elementsData = [\r\n    {id: \"CODE0000\", type: \"tutorial1\", data: {instructions: \"Circles is an interactive degree planner\", course_level: null, units: 0, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: null, prerequisites: null, corequisites: null, units_required: null, level_for_units_required: null, core_year: null, other: null}, equivalents: null, exclusions: null, unlocks: [\"CODE1111\"]}, position: {x: -280, y: -150}, style: {cursor: 'pointer', display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 12, fontWeight: \"bold\", color: \"black\", background: \"lightgrey\", width: 140, height: 140, borderRadius: 70, border: \"2px solid black\", boxShadow: \"0px 0px 2px 0px grey\"}, textColour: 'black', textSelectedColour: 'black', selectedColour: 'lightgrey', selectableColour: 'black', isHidden: false},\r\n    {id: \"CODE1111\", type: \"tutorial1\", data: {instructions: \"Click on a node to take the course\", course_level: null, units: 6, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: \"CODE0000\", prerequisites: [\"CODE0000\"], corequisites: null, units_required: null, level_for_units_required: null, core_year: null, other: null}, equivalents: null, exclusions: null, unlocks: [\"CODE7777\", \"CODE2222\"]}, position: {x: -120, y: 0}, style: {cursor: 'pointer', display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 8, fontWeight: \"bold\", color: \"#1EB13C\", background: \"white\", width: 100, height: 100, borderRadius: 50, border: \"2px solid #1EB13C\", boxShadow: \"0px 0px 2px 0px grey\"}, textColour: '#1EB13C', textSelectedColour: 'white', selectableColour: '#bce8c5', selectedColour: '#1EB13C', isHidden: false},\r\n    {id: \"CODE2222\", type: \"tutorial1\", data: {instructions: \"Courses light up when you clear all the prerequisites\", course_level: null, units: 6, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: \"CODE1111\", prerequisites: [\"CODE1111\"], corequisites: null, units_required: null, level_for_units_required: null, core_year: null, other: null}, equivalents: null, exclusions: null, unlocks: [\"CODE7777\", \"CODE3333\", \"CODE4444\"]}, position: {x: 60, y: -115}, style: {cursor: 'pointer', display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 7.5, fontWeight: \"bold\", color: \"#166DBA\", background: \"white\", width: 100, height: 100, borderRadius: 50, border: \"2px solid #166DBA\", boxShadow: \"0px 0px 2px 0px grey\"}, textColour: '#166DBA', textSelectedColour: 'white', selectableColour: '#b9d3ea', selectedColour: '#166DBA', isHidden: false},\r\n\r\n    {id: \"CODE7777\", type: \"tutorial1\", data: {instructions: \"Hover over a node to see its prerequisites\", course_level: null, units: 6, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: 'CODE1111 && CODE2222', prerequisites: ['CODE1111', 'CODE2222'], corequisites: null, units_required: null, level_for_units_required: null, core_year: null, other: null}, equivalents: null, unlocks: null}, position: {x: 110, y: 75}, style: {cursor: 'pointer', display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 8, fontWeight: \"bold\", color: \"#D66328\", background: \"white\", width: 100, height: 100, borderRadius: 50, border: \"2px solid #8A36B4\", boxShadow: \"0px 0px 2px 0px grey\"}, textColour: '#8A36B4', textSelectedColour: 'white', selectableColour: '#dcc3e9', selectedColour: '#8A36B4', isHidden: false},\r\n\r\n    {id: \"CODE3333\", type: \"tutorial2\", data: {instructions: \"Double click to toggle between equivalent courses\", course_level: null, units: 6, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: \"CODE2222\", prerequisites: [\"CODE2222\"], corequisites: null, units_required: null, level_for_units_required: null, core_year: null, other: null}, equivalents: null, exclusions: [\"CODE4444\"], unlocks: null}, position: {x: 250, y: -50}, style: {cursor: 'pointer', display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 7.5, fontWeight: \"bold\", color: \"#CA1818\", background: \"white\", width: 100, height: 100, borderRadius: 50, border: \"2px solid #CA1818\", boxShadow: \"0px 0px 2px 0px grey\"}, textColour: '#CA1818', textSelectedColour: 'white', selectableColour: '#efbaba', selectedColour: '#CA1818', isHidden: false},\r\n    {id: \"CODE4444\", type: \"tutorial2\", data: {instructions: \"Look out for the black 'swap' icon on nodes!\", course_level: null, units: 6, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: \"CODE2222\", prerequisites: [\"CODE2222\"], corequisites: null, units_required: null, level_for_units_required: null, core_year: null, other: null}, equivalents: null, exclusions: [\"CODE3333\"], unlocks: null}, position: {x: 250, y: -50}, style: {cursor: 'pointer', display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 7.5, fontWeight: \"bold\", color: \"#CA1818\", background: \"white\", width: 100, height: 100, borderRadius: 50, border: \"2px solid #CA1818\", boxShadow: \"0px 0px 2px 0px grey\"}, textColour: '#CA1818', textSelectedColour: 'white', selectableColour: '#efbaba', selectedColour: '#CA1818', isHidden: false},\r\n    \r\n    {id: \"CODE5555\", type: \"tutorial1\", data: {instructions: \"This course requires 24UOC.\", course_level: null, units: 6, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: null, prerequisites: null, corequisites: null, units_required: 24, level_for_units_required: null, core_year: null, other: null}, equivalents: null, unlocks: null}, position: {x: -200, y: 115}, style: {cursor: 'pointer', display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 8, fontWeight: \"bold\", color: \"#D66328\", background: \"white\", width: 100, height: 100, borderRadius: 50, border: \"2px solid #D66328\", boxShadow: \"0px 0px 2px 0px grey\"}, textColour: '#D66328', textSelectedColour: 'white', selectableColour: '#f3d0bf', selectedColour: '#D66328', isHidden: false},\r\n    \r\n    {id: 'eCODE0000-CODE1111', source: 'CODE0000', target: 'CODE1111', type: 'straight', style: {opacity: '0.2', stroke: 'grey'}, animated: false, isHidden: false},\r\n    {id: 'eCODE1111-CODE2222', source: 'CODE1111', target: 'CODE2222', type: 'straight', style: {opacity: '0.2', stroke: 'grey'}, animated: false, isHidden: false},\r\n    {id: 'eCODE2222-CODE3333', source: 'CODE2222', target: 'CODE3333', type: 'straight', style: {opacity: '0.2', stroke: 'grey'}, animated: false, isHidden: false},\r\n    {id: 'eCODE2222-CODE4444', source: 'CODE2222', target: 'CODE4444', type: 'straight', style: {opacity: '0.2', stroke: 'grey'}, animated: false, isHidden: false},\r\n    {id: 'eCODE1111-CODE7777', source: 'CODE1111', target: 'CODE7777', type: 'straight', style: {opacity: '0.2', stroke: 'grey'}, animated: false, isHidden: false},\r\n    {id: 'eCODE2222-CODE7777', source: 'CODE2222', target: 'CODE7777', type: 'straight', style: {opacity: '0.2', stroke: 'grey'}, animated: false, isHidden: false}\r\n\r\n];\r\n\r\n// var nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {\"CODE0000\": 1};\r\n// var selectedNodes = {\"CODE0000\": 1};\r\nvar selectedEdges = {};\r\nvar selectableNodes = {\"CODE1111\": 1};\r\nvar potentialEdges = {\"eCODE0000-CODE1111\": 1};\r\nvar hoverEdges = {};\r\nvar exclusionGroups = [[\"CODE3333\", \"CODE4444\"]];\r\nvar exclusionNodes = {};\r\n\r\nconst nodeTypes = {\r\n    tutorial1: TutorialNode1,\r\n    tutorial2: TutorialNode2,\r\n};\r\n\r\nconst InteractiveTutorialMain = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    // const [hoverNode, setHoverNode] = useState();\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n\r\n    const onLoad = (reactFlowInstance) => {\r\n        // HARD RESET STATE ON LOAD\r\n        selectedNodes = {\"CODE0000\": 1};\r\n        // selectedNodes = {\"CODE0000\": 1};\r\n        selectedEdges = {};\r\n        selectableNodes = {\"CODE1111\": 1};\r\n        potentialEdges = {\"eCODE0000-CODE1111\": 1};\r\n        hoverEdges = {};\r\n        exclusionGroups = [[\"CODE3333\", \"CODE4444\"]];\r\n        exclusionNodes = {};        \r\n        \r\n        for (var e of elements) {\r\n            e.isHidden = false;\r\n        }\r\n        for (const group of exclusionGroups) {\r\n            for (const exclusion of group) {\r\n                exclusionNodes[exclusion] = 1;\r\n            }\r\n        }\r\n        for (var group of exclusionGroups) {\r\n            const last = group.pop();\r\n            for (var course of elements) {\r\n                if (last === course.id) {\r\n                    course.isHidden = true;\r\n                    for (var edge of elements) {\r\n                        if (isNode(edge)) continue;\r\n                        if (edge.source === last || edge.target === last) {\r\n                            edge.isHidden = true;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            group.push(last);\r\n        }\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n        reactFlowInstance.fitView();\r\n    };\r\n\r\n    const selectUnselect = (element) => {\r\n        unhoverPrerequisites(hoverEdges);\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n    \r\n    const toggleExclusion = (element) => {\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onElementClick = (event, element) => {\r\n        if (element.id === \"CODE0000\") return;\r\n        if (isEdge(element)) return;\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return;\r\n\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 250);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            selectUnselect(element);\r\n        }\r\n    }\r\n\r\n    const onNodeMouseEnter = (event, node) => {\r\n        // setHoverNode(node);\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    return (\r\n        <ReactFlow\r\n            elements={elements}\r\n            style={{width: \"100%\", height: \"75vh\"}}\r\n            onLoad={onLoad}\r\n            nodeTypes={nodeTypes}\r\n            nodesConnectable={false}\r\n            onElementClick={onElementClick}\r\n            paneMoveable={false}\r\n            selectNodesOnDrag={false}\r\n            elementsSelectable={false}\r\n            nodesDraggable={false}\r\n            onNodeMouseEnter={onNodeMouseEnter}\r\n            onNodeMouseLeave={onNodeMouseLeave}\r\n        >\r\n        </ReactFlow>\r\n    );\r\n}\r\n\r\nexport default InteractiveTutorialMain;","import React from 'react';\r\n\r\n\r\nimport DropdownDegrees from '../../components/dropdownDegrees.js'\r\nimport InteractiveTutorialMain from '../../components/interactivetutorialmain.js';\r\nimport { Message, Button, Container, Header } from 'semantic-ui-react';\r\nimport ScrollTo from \"react-scroll-into-view\";\r\n\r\nconst containerStyle = {\r\n    height: \"100vh\",\r\n    display: \"flex\",\r\n    justifyContent: \"space-around\",\r\n    alignItems: \"center\",\r\n    flexDirection: \"column\"\r\n    // border: \"1px solid black\"\r\n}\r\n\r\nconst getButton = (selector) => {\r\n    return (\r\n        <ScrollTo selector={selector} style={{marginTop: \"auto\", marginBottom: \"3%\"}}>\r\n            <Button\r\n                circular\r\n                color=\"blue\"\r\n                icon=\"arrow down\"\r\n            />\r\n        </ScrollTo>\r\n    );\r\n}\r\n\r\nconst Homepage = () => {\r\n    return (\r\n        <div>\r\n            <div id=\"landingPage\">\r\n                <Container style={containerStyle}>\r\n                    <Header as=\"h1\" style={{transition: \"2s ease\", paddingTop: \"20%\", fontSize: \"96px\"}} textAlign=\"center\">\r\n                        Circles\r\n                        <Header.Subheader style={{transition: \"2s ease\", fontSize: \"18px\"}}>The visual degree planner for UNSW undergraduate students</Header.Subheader>\r\n                    </Header>\r\n                    {getButton(\"#tutorial\")}\r\n                </Container >\r\n            </div>\r\n            <div id=\"tutorial\">\r\n                <Container fluid style={containerStyle}>\r\n                    <Header as=\"h2\" textAlign=\"center\" style={{paddingTop: \"3%\", fontSize: \"36px\"}}>Tutorial</Header>\r\n                    <InteractiveTutorialMain />\r\n                    <Header as=\"h4\" textAlign=\"center\">After choosing your courses, a degree plan will be automatically generated for you.</Header>\r\n                    {getButton(\"#chooseDegree\")}\r\n                </Container>\r\n            </div>\r\n            <div id=\"chooseDegree\">\r\n                <Container style={{...containerStyle, justifyContent: \"center\"}}>\r\n                    <Header as=\"h2\" textAlign=\"center\" style={{fontSize: \"36px\", marginTop: \"5vh\"}}>Choose your program and degree to begin</Header>\r\n                    <div>\r\n                        <Container style={{padding: \"10px\"}}>\r\n                            <Message warning>\r\n                                The UNSW handbook is currently undergoing updates for 2021. Although we try our best, some data may be incorrect or outdated, so some nodes on our flowchart may not be selectable. Please refer to the <a href=\"https://www.handbook.unsw.edu.au\" target=\"_blank\" rel=\"noopener noreferrer\">handbook</a> for the latest update.\r\n                            </Message>\r\n                        </Container>\r\n                        <DropdownDegrees />\r\n                    </div>\r\n                </Container>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Homepage;","import React, {useState} from 'react';\r\nimport ReactFlow, { isNode, isEdge, ReactFlowProvider } from 'react-flow-renderer';\r\n\r\nimport CustomNode1 from '../../components/customnode1.js';\r\nimport CustomNode2 from '../../components/customnode2.js';\r\nimport HeaderNode1 from '../../components/headernode1.js';\r\n\r\nimport HoverInfo from '../../components/hoverinfo.js';\r\nimport hoverPrerequisites from '../../components/hoverprerequisites.js';\r\nimport unhoverPrerequisites from '../../components/unhoverprerequisites.js';\r\n\r\nimport { Grid, Segment, Container, Dropdown, Header } from 'semantic-ui-react'\r\nimport Sidebar from \"../../components/sidebar.js\"\r\n// import pkg from 'semantic-ui-react/package.json'\r\n\r\nimport DegreePlanner from \"../../components/degreeplanner.js\"\r\nimport DropdownSearch from \"../../components/dropdownsearch.js\"\r\n\r\n// import positionHelper from '../../components/positionhelper.js';\r\nimport selectNode from '../../components/selectnode.js';\r\nimport unselectNode from '../../components/unselectnode.js';\r\nimport highlightElements from '../../components/highlightelements.js';\r\nimport getSelectable from '../../components/getselectable.js';\r\nimport checkPrerequisites from '../../components/checkprerequisites';\r\nimport exclusionSwap from '../../components/exclusionswap.js';\r\n\r\nimport unselectUnconnected from '../../components/unselectunconnected.js';\r\nimport coursesJSON from \"../../webscraper/courses.json\";\r\nimport dataJSON from \"./data.json\"\r\n\r\nconst specialisations = ['COMPA1'];\r\nvar program = \"3778\";\r\nvar elementsData = dataJSON.slice();\r\n\r\n// This is for dropdown search\r\nvar searchNodeOptions = [];\r\nfor (const course of elementsData) {\r\n    if (isNode(course)) {\r\n        searchNodeOptions.push({\r\n            key: course.id,\r\n            value: course.id,\r\n            text: course.id\r\n        });\r\n    }\r\n}\r\n\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {};\r\nfor (const specialisation of specialisations) selectedNodes[specialisation] = 1;\r\n\r\nvar selectedEdges = {};\r\nvar selectableNodes = {};\r\nvar potentialEdges = {};\r\nvar hoverEdges = {};\r\n\r\n// Load up the chart with initial selectable nodes and edges\r\nfor (const node of nodesData) {\r\n    if (selectedNodes.hasOwnProperty(node.id)) {\r\n        if (node.data.unlocks === null) continue;\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n        }\r\n    } else if (checkPrerequisites(node, elementsData, selectedNodes)) {\r\n        selectableNodes[node.id] = 1;\r\n    }\r\n}\r\n\r\nvar exclusionGroups = require(\"./data_exclusion.json\");\r\nvar exclusionNodes = {};\r\nfor (const group of exclusionGroups) {\r\n    for (const exclusion of group) {\r\n        exclusionNodes[exclusion] = 1;\r\n    }\r\n}\r\n\r\nelementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\nconst nodeTypes = {\r\n    custom1: CustomNode1,\r\n    custom2: CustomNode2,\r\n    header1: HeaderNode1\r\n};\r\n\r\nconst layoutStyle = {overflowX: \"hidden\", overflowY: \"overlay\", width: \"100vw\", height: \"100vh\"};\r\n\r\nconst getMoreCoursesForDropdown = (dataJSON) => {\r\n\r\n    const moreOptions = [];\r\n    const nodesOnFlowchart = dataJSON.map(node => node.id);\r\n    // console.log(\"refresh\", nodesOnFlowchart);\r\n\r\n    for (const code in coursesJSON) {\r\n        if (nodesOnFlowchart.includes(code)) continue;\r\n\r\n        const name = coursesJSON[code].course_name;\r\n        moreOptions.push({\r\n            key: code,\r\n            value: code,\r\n            text: code + \" - \" + name\r\n        });\r\n    }\r\n\r\n    return moreOptions;\r\n}\r\n\r\nconst ComputerScienceCOMPA1 = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverText, setHoverText] = useState(false);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    const [layout, setLayout] = useState(layoutStyle);\r\n    const [additionalCourses, setAdditionalCourses] = useState([])\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n\r\n    const onInstanceLoad = (instance) => {\r\n        for (var group of exclusionGroups) {\r\n            const last = group.pop();\r\n    \r\n            for (var course of elementsData) {\r\n                if (last === course.id) {\r\n                    course.isHidden = true;\r\n                    // console.log(\"Hiding \" + course.id);\r\n                    // Get all the edges and hide them too\r\n                    for (var edge of elementsData) {\r\n                        if (isNode(edge)) continue;\r\n                        if (edge.source === last || edge.target === last) {\r\n                            // console.log(\"hiding \" + edge.id);\r\n                            edge.isHidden = true;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            group.push(last);\r\n        }\r\n        instance.setTransform({x: 470, y: 350, zoom: 0.38});\r\n    };\r\n\r\n    const selectUnselect = (element) => {\r\n        // NOTE: Might not need this?????\r\n        // EXPLANATION: Reason we dont need it is because we have to leave node\r\n        // anyways to hover another node. But maybe good practise to have just in case\r\n        // Unhover edges which lit up on nodeMouseEnter\r\n        unhoverPrerequisites(hoverEdges);\r\n\r\n        // 1. Select the node and fill in edges.\r\n        // - Deal with unselecting nodes\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"MAINSELECT\");\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"UNSELECTING\");\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n\r\n        console.log(\"==========SelectedNodes==========\");\r\n        console.log(selectedNodes);\r\n        console.log(\"==========SelectedEdges==========\");\r\n        console.log(selectedEdges);\r\n        console.log(\"==========SelectableNodes==========\");\r\n        console.log(selectableNodes);\r\n        console.log(\"==========PotentialEdges==========\");\r\n        console.log(potentialEdges);\r\n\r\n        // 2. Determine which nodes are now selectable\r\n        // - Determine which previously selectable nodes are now unselectable\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n\r\n        // Render graph accordingly\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const toggleExclusion = (element) => {\r\n        // TODO: ARE there courses which do not \r\n        // For all immediate edges of the element, swap\r\n        // with the exclusion course\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    // ==========ONCLICK==========\r\n    const onElementClick = (event, element) => {\r\n        // console.log(\"ONELEMENTCLICK\");\r\n        if (isEdge(element)) return; // Don't care about edges\r\n        if (specialisations.includes(element.id)) return; // Cannot click on main node\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return; // Cannot select non selectable nodes\r\n\r\n        // Determine double or single click for exclusion nodes\r\n        // This will prevent normal nodes from waiting the double click delay\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 250);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            // Not an exclusion node.\r\n            selectUnselect(element);\r\n        }\r\n    };\r\n    // ===========================\r\n\r\n    // ==========ONHOVER==========\r\n    const onNodeMouseEnter = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        // Display node information in top left\r\n        setHoverText(true);\r\n        setHoverNode(node);\r\n\r\n        // If the node is unselected, highlight prerequisite edges in purple\r\n        //if ((!selectedNodes.hasOwnProperty(node.id)) && (!selectableNodes.hasOwnProperty(node.id))) {\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        //}\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        setHoverText(false);\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    let hoverDisplay;\r\n    if (hoverText) {\r\n        hoverDisplay = <HoverInfo node={hoverNode}/>\r\n    }\r\n    // ===========================\r\n\r\n    // const onNodeDragStop = (event, node) => {\r\n    //     for (var e of elements) {\r\n    //         if (e.id === node.id) {\r\n    //             e.position.x = node.position.x;\r\n    //             e.position.y = node.position.y;\r\n    //             break;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    const disableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'hidden'});\r\n    }\r\n\r\n    const enableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'overlay'});\r\n    }\r\n\r\n    return (\r\n        <div style={{positon: \"relative\"}}>\r\n            <div style={layout}>\r\n                <Grid columns={2} divided>\r\n                    <Grid.Column width=\"12\">\r\n                        <ReactFlowProvider>\r\n                            <div onMouseEnter={disableBodyScroll} onMouseLeave={enableBodyScroll}>\r\n                                <ReactFlow\r\n                                    elements={elements}\r\n                                    style={{width: '100%', height: '95vh'}}\r\n                                    onLoad={onInstanceLoad}\r\n                                    nodeTypes={nodeTypes}\r\n                                    nodesConnectable={false}\r\n                                    onElementClick={onElementClick}\r\n                                    minZoom={0.38}\r\n                                    //setInitTransform={TransformUpdater({x: 100, y: 100, z: 1})}\r\n                                    nodesDraggable={false}\r\n                                    onNodeMouseEnter={onNodeMouseEnter}\r\n                                    onNodeMouseLeave={onNodeMouseLeave}\r\n                                    selectNodesOnDrag={false}\r\n                                    // onNodeDragStop={onNodeDragStop}\r\n                                    elementsSelectable={false}\r\n                                >\r\n                                    <div style={{position: \"absolute\", zIndex: \"10\", top: \"30px\", right: \"30px\"}}>\r\n                                        <DropdownSearch toggleExclusion={toggleExclusion} searchNodeOptions={searchNodeOptions} searchElements={elements}/>\r\n                                    </div>\r\n                                </ReactFlow>\r\n                            </div>\r\n                            <Container style={{marginBottom: \"50px\"}}>\r\n                                <Segment raised>\r\n                                    {/* <p>Couldn't find a course up there? Add it here:</p> */}\r\n                                    <Header as=\"h5\">Couldn't find a course up there? Add it here:</Header>\r\n                                    <Dropdown\r\n                                        selection\r\n                                        multiple\r\n                                        search\r\n                                        fluid\r\n                                        options={getMoreCoursesForDropdown(dataJSON)}\r\n                                        onChange={(e, data) => setAdditionalCourses(data.value)}\r\n                                        placeholder=\"Addditional courses\"\r\n                                    />\r\n                                </Segment>\r\n                            </Container>\r\n                        </ReactFlowProvider>\r\n                    </Grid.Column>\r\n                    <Grid.Column width=\"4\">\r\n                        <Sidebar specialisations={specialisations} selectedNodes={selectedNodes}/>\r\n                    </Grid.Column>\r\n                </Grid>\r\n                {hoverDisplay}\r\n                {/* <button onClick={positionHelper(elements)}>GENERATE POSITION</button> */}\r\n                <div id=\"DegreePlanner\">\r\n                    <DegreePlanner\r\n                        key={Object.keys(selectedNodes).concat(additionalCourses).join(\"\")}\r\n                        program={program}\r\n                        specialisations={specialisations}\r\n                        selectedCourses={Object.keys(selectedNodes).concat(additionalCourses)}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ComputerScienceCOMPA1;","import React, {useState} from 'react';\r\nimport ReactFlow, { isNode, isEdge, ReactFlowProvider } from 'react-flow-renderer';\r\n\r\nimport CustomNode1 from '../../components/customnode1.js';\r\nimport CustomNode2 from '../../components/customnode2.js';\r\nimport HeaderNode1 from '../../components/headernode1.js';\r\n\r\nimport HoverInfo from '../../components/hoverinfo.js';\r\nimport hoverPrerequisites from '../../components/hoverprerequisites.js';\r\nimport unhoverPrerequisites from '../../components/unhoverprerequisites.js';\r\n\r\nimport { Grid, Segment, Container, Dropdown, Header } from 'semantic-ui-react'\r\nimport Sidebar from \"../../components/sidebar.js\"\r\n// import pkg from 'semantic-ui-react/package.json'\r\n\r\nimport DegreePlanner from \"../../components/degreeplanner.js\"\r\nimport DropdownSearch from \"../../components/dropdownsearch.js\"\r\n\r\n// import positionHelper from '../../components/positionhelper.js';\r\nimport selectNode from '../../components/selectnode.js';\r\nimport unselectNode from '../../components/unselectnode.js';\r\nimport highlightElements from '../../components/highlightelements.js';\r\nimport getSelectable from '../../components/getselectable.js';\r\nimport checkPrerequisites from '../../components/checkprerequisites';\r\nimport exclusionSwap from '../../components/exclusionswap.js';\r\n\r\nimport unselectUnconnected from '../../components/unselectunconnected.js';\r\nimport coursesJSON from \"../../webscraper/courses.json\";\r\nimport dataJSON from \"./data.json\"\r\n\r\nconst specialisations = ['COMPA1', 'ACCTA2'];\r\nvar program = \"3778\";\r\nvar elementsData = dataJSON.slice();\r\n\r\n// This is for dropdown search\r\nvar searchNodeOptions = [];\r\nfor (const course of elementsData) {\r\n    if (isNode(course)) {\r\n        searchNodeOptions.push({\r\n            key: course.id,\r\n            value: course.id,\r\n            text: course.id\r\n        });\r\n    }\r\n}\r\n\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {};\r\nfor (const specialisation of specialisations) selectedNodes[specialisation] = 1;\r\n\r\nvar selectedEdges = {};\r\nvar selectableNodes = {};\r\nvar potentialEdges = {};\r\nvar hoverEdges = {};\r\n\r\n// Load up the chart with initial selectable nodes and edges\r\nfor (const node of nodesData) {\r\n    if (selectedNodes.hasOwnProperty(node.id)) {\r\n        if (node.data.unlocks === null) continue;\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n        }\r\n    } else if (checkPrerequisites(node, elementsData, selectedNodes)) {\r\n        selectableNodes[node.id] = 1;\r\n    }\r\n}\r\n\r\nvar exclusionGroups = require(\"./data_exclusion.json\");\r\nvar exclusionNodes = {};\r\nfor (const group of exclusionGroups) {\r\n    for (const exclusion of group) {\r\n        exclusionNodes[exclusion] = 1;\r\n    }\r\n}\r\n\r\nelementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\nconst nodeTypes = {\r\n    custom1: CustomNode1,\r\n    custom2: CustomNode2,\r\n    header1: HeaderNode1\r\n};\r\n\r\nconst layoutStyle = {overflowX: \"hidden\", overflowY: \"overlay\", width: \"100vw\", height: \"100vh\"};\r\n\r\nconst getMoreCoursesForDropdown = (dataJSON) => {\r\n\r\n    const moreOptions = [];\r\n    const nodesOnFlowchart = dataJSON.map(node => node.id);\r\n    // console.log(\"refresh\", nodesOnFlowchart);\r\n\r\n    for (const code in coursesJSON) {\r\n        if (nodesOnFlowchart.includes(code)) continue;\r\n\r\n        const name = coursesJSON[code].course_name;\r\n        moreOptions.push({\r\n            key: code,\r\n            value: code,\r\n            text: code + \" - \" + name\r\n        });\r\n    }\r\n\r\n    return moreOptions;\r\n}\r\n\r\nconst ComputerScienceCOMPA1ACCTA2 = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverText, setHoverText] = useState(false);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    const [layout, setLayout] = useState(layoutStyle);\r\n    const [additionalCourses, setAdditionalCourses] = useState([])\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n\r\n    const onInstanceLoad = (instance) => {\r\n        for (var group of exclusionGroups) {\r\n            const last = group.pop();\r\n    \r\n            for (var course of elementsData) {\r\n                if (last === course.id) {\r\n                    course.isHidden = true;\r\n                    // console.log(\"Hiding \" + course.id);\r\n                    // Get all the edges and hide them too\r\n                    for (var edge of elementsData) {\r\n                        if (isNode(edge)) continue;\r\n                        if (edge.source === last || edge.target === last) {\r\n                            // console.log(\"hiding \" + edge.id);\r\n                            edge.isHidden = true;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            group.push(last);\r\n        }\r\n        instance.setTransform({x: 470, y: 350, zoom: 0.38});\r\n    };\r\n\r\n    const selectUnselect = (element) => {\r\n        // NOTE: Might not need this?????\r\n        // EXPLANATION: Reason we dont need it is because we have to leave node\r\n        // anyways to hover another node. But maybe good practise to have just in case\r\n        // Unhover edges which lit up on nodeMouseEnter\r\n        unhoverPrerequisites(hoverEdges);\r\n\r\n        // 1. Select the node and fill in edges.\r\n        // - Deal with unselecting nodes\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"MAINSELECT\");\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"UNSELECTING\");\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n\r\n        console.log(\"==========SelectedNodes==========\");\r\n        console.log(selectedNodes);\r\n        console.log(\"==========SelectedEdges==========\");\r\n        console.log(selectedEdges);\r\n        console.log(\"==========SelectableNodes==========\");\r\n        console.log(selectableNodes);\r\n        console.log(\"==========PotentialEdges==========\");\r\n        console.log(potentialEdges);\r\n\r\n        // 2. Determine which nodes are now selectable\r\n        // - Determine which previously selectable nodes are now unselectable\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n\r\n        // Render graph accordingly\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const toggleExclusion = (element) => {\r\n        // TODO: ARE there courses which do not \r\n        // For all immediate edges of the element, swap\r\n        // with the exclusion course\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    // ==========ONCLICK==========\r\n    const onElementClick = (event, element) => {\r\n        // console.log(\"ONELEMENTCLICK\");\r\n        if (isEdge(element)) return; // Don't care about edges\r\n        if (specialisations.includes(element.id)) return; // Cannot click on main node\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return; // Cannot select non selectable nodes\r\n\r\n        // Determine double or single click for exclusion nodes\r\n        // This will prevent normal nodes from waiting the double click delay\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 250);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            // Not an exclusion node.\r\n            selectUnselect(element);\r\n        }\r\n    };\r\n    // ===========================\r\n\r\n    // ==========ONHOVER==========\r\n    const onNodeMouseEnter = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        // Display node information in top left\r\n        setHoverText(true);\r\n        setHoverNode(node);\r\n\r\n        // If the node is unselected, highlight prerequisite edges in purple\r\n        //if ((!selectedNodes.hasOwnProperty(node.id)) && (!selectableNodes.hasOwnProperty(node.id))) {\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        //}\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        setHoverText(false);\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    let hoverDisplay;\r\n    if (hoverText) {\r\n        hoverDisplay = <HoverInfo node={hoverNode}/>\r\n    }\r\n    // ===========================\r\n\r\n    // const onNodeDragStop = (event, node) => {\r\n    //     for (var e of elements) {\r\n    //         if (e.id === node.id) {\r\n    //             e.position.x = node.position.x;\r\n    //             e.position.y = node.position.y;\r\n    //             break;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    const disableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'hidden'});\r\n    }\r\n\r\n    const enableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'overlay'});\r\n    }\r\n\r\n    return (\r\n        <div style={{positon: \"relative\"}}>\r\n            <div style={layout}>\r\n                <Grid columns={2} divided>\r\n                    <Grid.Column width=\"12\">\r\n                        <ReactFlowProvider>\r\n                            <div onMouseEnter={disableBodyScroll} onMouseLeave={enableBodyScroll}>\r\n                                <ReactFlow\r\n                                    elements={elements}\r\n                                    style={{width: '100%', height: '95vh'}}\r\n                                    onLoad={onInstanceLoad}\r\n                                    nodeTypes={nodeTypes}\r\n                                    nodesConnectable={false}\r\n                                    onElementClick={onElementClick}\r\n                                    minZoom={0.38}\r\n                                    //setInitTransform={TransformUpdater({x: 100, y: 100, z: 1})}\r\n                                    nodesDraggable={false}\r\n                                    onNodeMouseEnter={onNodeMouseEnter}\r\n                                    onNodeMouseLeave={onNodeMouseLeave}\r\n                                    selectNodesOnDrag={false}\r\n                                    // onNodeDragStop={onNodeDragStop}\r\n                                    elementsSelectable={false}\r\n                                >\r\n                                    <div style={{position: \"absolute\", zIndex: \"10\", top: \"30px\", right: \"30px\"}}>\r\n                                        <DropdownSearch toggleExclusion={toggleExclusion} searchNodeOptions={searchNodeOptions} searchElements={elements}/>\r\n                                    </div>\r\n                                </ReactFlow>\r\n                            </div>\r\n                            <Container style={{marginBottom: \"50px\"}}>\r\n                                <Segment raised>\r\n                                    {/* <p>Couldn't find a course up there? Add it here:</p> */}\r\n                                    <Header as=\"h5\">Couldn't find a course up there? Add it here:</Header>\r\n                                    <Dropdown\r\n                                        selection\r\n                                        multiple\r\n                                        search\r\n                                        fluid\r\n                                        options={getMoreCoursesForDropdown(dataJSON)}\r\n                                        onChange={(e, data) => setAdditionalCourses(data.value)}\r\n                                        placeholder=\"Addditional courses\"\r\n                                    />\r\n                                </Segment>\r\n                            </Container>\r\n                        </ReactFlowProvider>\r\n                    </Grid.Column>\r\n                    <Grid.Column width=\"4\">\r\n                        <Sidebar specialisations={specialisations} selectedNodes={selectedNodes}/>\r\n                    </Grid.Column>\r\n                </Grid>\r\n                {hoverDisplay}\r\n                {/* <button onClick={positionHelper(elements)}>GENERATE POSITION</button> */}\r\n                <div id=\"DegreePlanner\">\r\n                    <DegreePlanner\r\n                        key={Object.keys(selectedNodes).concat(additionalCourses).join(\"\")}\r\n                        program={program}\r\n                        specialisations={specialisations}\r\n                        selectedCourses={Object.keys(selectedNodes).concat(additionalCourses)}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ComputerScienceCOMPA1ACCTA2;","import React, {useState} from 'react';\r\nimport ReactFlow, { isNode, isEdge, ReactFlowProvider } from 'react-flow-renderer';\r\n\r\nimport CustomNode1 from '../../components/customnode1.js';\r\nimport CustomNode2 from '../../components/customnode2.js';\r\nimport HeaderNode1 from '../../components/headernode1.js';\r\n\r\nimport HoverInfo from '../../components/hoverinfo.js';\r\nimport hoverPrerequisites from '../../components/hoverprerequisites.js';\r\nimport unhoverPrerequisites from '../../components/unhoverprerequisites.js';\r\n\r\nimport { Grid, Segment, Container, Dropdown, Header } from 'semantic-ui-react'\r\nimport Sidebar from \"../../components/sidebar.js\"\r\n// import pkg from 'semantic-ui-react/package.json'\r\n\r\nimport DegreePlanner from \"../../components/degreeplanner.js\"\r\nimport DropdownSearch from \"../../components/dropdownsearch.js\"\r\n\r\n// import positionHelper from '../../components/positionhelper.js';\r\nimport selectNode from '../../components/selectnode.js';\r\nimport unselectNode from '../../components/unselectnode.js';\r\nimport highlightElements from '../../components/highlightelements.js';\r\nimport getSelectable from '../../components/getselectable.js';\r\nimport checkPrerequisites from '../../components/checkprerequisites';\r\nimport exclusionSwap from '../../components/exclusionswap.js';\r\n\r\nimport unselectUnconnected from '../../components/unselectunconnected.js';\r\nimport coursesJSON from \"../../webscraper/courses.json\";\r\nimport dataJSON from \"./data.json\"\r\n\r\nconst specialisations = ['COMPA1', 'FINSA2'];\r\nvar program = \"3778\";\r\nvar elementsData = dataJSON.slice();\r\n\r\n// This is for dropdown search\r\nvar searchNodeOptions = [];\r\nfor (const course of elementsData) {\r\n    if (isNode(course)) {\r\n        searchNodeOptions.push({\r\n            key: course.id,\r\n            value: course.id,\r\n            text: course.id\r\n        });\r\n    }\r\n}\r\n\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {};\r\nfor (const specialisation of specialisations) selectedNodes[specialisation] = 1;\r\n\r\nvar selectedEdges = {};\r\nvar selectableNodes = {};\r\nvar potentialEdges = {};\r\nvar hoverEdges = {};\r\n\r\n// Load up the chart with initial selectable nodes and edges\r\nfor (const node of nodesData) {\r\n    if (selectedNodes.hasOwnProperty(node.id)) {\r\n        if (node.data.unlocks === null) continue;\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n        }\r\n    } else if (checkPrerequisites(node, elementsData, selectedNodes)) {\r\n        selectableNodes[node.id] = 1;\r\n    }\r\n}\r\n\r\nvar exclusionGroups = require(\"./data_exclusion.json\");\r\nvar exclusionNodes = {};\r\nfor (const group of exclusionGroups) {\r\n    for (const exclusion of group) {\r\n        exclusionNodes[exclusion] = 1;\r\n    }\r\n}\r\n\r\nelementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\nconst nodeTypes = {\r\n    custom1: CustomNode1,\r\n    custom2: CustomNode2,\r\n    header1: HeaderNode1\r\n};\r\n\r\nconst layoutStyle = {overflowX: \"hidden\", overflowY: \"overlay\", width: \"100vw\", height: \"100vh\"};\r\n\r\nconst getMoreCoursesForDropdown = (dataJSON) => {\r\n\r\n    const moreOptions = [];\r\n    const nodesOnFlowchart = dataJSON.map(node => node.id);\r\n    // console.log(\"refresh\", nodesOnFlowchart);\r\n\r\n    for (const code in coursesJSON) {\r\n        if (nodesOnFlowchart.includes(code)) continue;\r\n\r\n        const name = coursesJSON[code].course_name;\r\n        moreOptions.push({\r\n            key: code,\r\n            value: code,\r\n            text: code + \" - \" + name\r\n        });\r\n    }\r\n\r\n    return moreOptions;\r\n}\r\n\r\nconst ComputerScienceCOMPA1FINSA2 = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverText, setHoverText] = useState(false);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    const [layout, setLayout] = useState(layoutStyle);\r\n    const [additionalCourses, setAdditionalCourses] = useState([])\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n\r\n    const onInstanceLoad = (instance) => {\r\n        for (var group of exclusionGroups) {\r\n            const last = group.pop();\r\n    \r\n            for (var course of elementsData) {\r\n                if (last === course.id) {\r\n                    course.isHidden = true;\r\n                    // console.log(\"Hiding \" + course.id);\r\n                    // Get all the edges and hide them too\r\n                    for (var edge of elementsData) {\r\n                        if (isNode(edge)) continue;\r\n                        if (edge.source === last || edge.target === last) {\r\n                            // console.log(\"hiding \" + edge.id);\r\n                            edge.isHidden = true;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            group.push(last);\r\n        }\r\n        instance.setTransform({x: 470, y: 350, zoom: 0.38});\r\n    };\r\n\r\n    const selectUnselect = (element) => {\r\n        // NOTE: Might not need this?????\r\n        // EXPLANATION: Reason we dont need it is because we have to leave node\r\n        // anyways to hover another node. But maybe good practise to have just in case\r\n        // Unhover edges which lit up on nodeMouseEnter\r\n        unhoverPrerequisites(hoverEdges);\r\n\r\n        // 1. Select the node and fill in edges.\r\n        // - Deal with unselecting nodes\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"MAINSELECT\");\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"UNSELECTING\");\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n\r\n        console.log(\"==========SelectedNodes==========\");\r\n        console.log(selectedNodes);\r\n        console.log(\"==========SelectedEdges==========\");\r\n        console.log(selectedEdges);\r\n        console.log(\"==========SelectableNodes==========\");\r\n        console.log(selectableNodes);\r\n        console.log(\"==========PotentialEdges==========\");\r\n        console.log(potentialEdges);\r\n\r\n        // 2. Determine which nodes are now selectable\r\n        // - Determine which previously selectable nodes are now unselectable\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n\r\n        // Render graph accordingly\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const toggleExclusion = (element) => {\r\n        // TODO: ARE there courses which do not \r\n        // For all immediate edges of the element, swap\r\n        // with the exclusion course\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    // ==========ONCLICK==========\r\n    const onElementClick = (event, element) => {\r\n        // console.log(\"ONELEMENTCLICK\");\r\n        if (isEdge(element)) return; // Don't care about edges\r\n        if (specialisations.includes(element.id)) return; // Cannot click on main node\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return; // Cannot select non selectable nodes\r\n\r\n        // Determine double or single click for exclusion nodes\r\n        // This will prevent normal nodes from waiting the double click delay\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 250);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            // Not an exclusion node.\r\n            selectUnselect(element);\r\n        }\r\n    };\r\n    // ===========================\r\n\r\n    // ==========ONHOVER==========\r\n    const onNodeMouseEnter = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        // Display node information in top left\r\n        setHoverText(true);\r\n        setHoverNode(node);\r\n\r\n        // If the node is unselected, highlight prerequisite edges in purple\r\n        //if ((!selectedNodes.hasOwnProperty(node.id)) && (!selectableNodes.hasOwnProperty(node.id))) {\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        //}\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        setHoverText(false);\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    let hoverDisplay;\r\n    if (hoverText) {\r\n        hoverDisplay = <HoverInfo node={hoverNode}/>\r\n    }\r\n    // ===========================\r\n\r\n    // const onNodeDragStop = (event, node) => {\r\n    //     for (var e of elements) {\r\n    //         if (e.id === node.id) {\r\n    //             e.position.x = node.position.x;\r\n    //             e.position.y = node.position.y;\r\n    //             break;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    const disableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'hidden'});\r\n    }\r\n\r\n    const enableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'overlay'});\r\n    }\r\n\r\n    return (\r\n        <div style={{positon: \"relative\"}}>\r\n            <div style={layout}>\r\n                <Grid columns={2} divided>\r\n                    <Grid.Column width=\"12\">\r\n                        <ReactFlowProvider>\r\n                            <div onMouseEnter={disableBodyScroll} onMouseLeave={enableBodyScroll}>\r\n                                <ReactFlow\r\n                                    elements={elements}\r\n                                    style={{width: '100%', height: '95vh'}}\r\n                                    onLoad={onInstanceLoad}\r\n                                    nodeTypes={nodeTypes}\r\n                                    nodesConnectable={false}\r\n                                    onElementClick={onElementClick}\r\n                                    minZoom={0.38}\r\n                                    //setInitTransform={TransformUpdater({x: 100, y: 100, z: 1})}\r\n                                    nodesDraggable={false}\r\n                                    onNodeMouseEnter={onNodeMouseEnter}\r\n                                    onNodeMouseLeave={onNodeMouseLeave}\r\n                                    selectNodesOnDrag={false}\r\n                                    // onNodeDragStop={onNodeDragStop}\r\n                                    elementsSelectable={false}\r\n                                >\r\n                                    <div style={{position: \"absolute\", zIndex: \"10\", top: \"30px\", right: \"30px\"}}>\r\n                                        <DropdownSearch toggleExclusion={toggleExclusion} searchNodeOptions={searchNodeOptions} searchElements={elements}/>\r\n                                    </div>\r\n                                </ReactFlow>\r\n                            </div>\r\n                            <Container style={{marginBottom: \"50px\"}}>\r\n                                <Segment raised>\r\n                                    {/* <p>Couldn't find a course up there? Add it here:</p> */}\r\n                                    <Header as=\"h5\">Couldn't find a course up there? Add it here:</Header>\r\n                                    <Dropdown\r\n                                        selection\r\n                                        multiple\r\n                                        search\r\n                                        fluid\r\n                                        options={getMoreCoursesForDropdown(dataJSON)}\r\n                                        onChange={(e, data) => setAdditionalCourses(data.value)}\r\n                                        placeholder=\"Addditional courses\"\r\n                                    />\r\n                                </Segment>\r\n                            </Container>\r\n                        </ReactFlowProvider>\r\n                    </Grid.Column>\r\n                    <Grid.Column width=\"4\">\r\n                        <Sidebar specialisations={specialisations} selectedNodes={selectedNodes}/>\r\n                    </Grid.Column>\r\n                </Grid>\r\n                {hoverDisplay}\r\n                {/* <button onClick={positionHelper(elements)}>GENERATE POSITION</button> */}\r\n                <div id=\"DegreePlanner\">\r\n                    <DegreePlanner\r\n                        key={Object.keys(selectedNodes).concat(additionalCourses).join(\"\")}\r\n                        program={program}\r\n                        specialisations={specialisations}\r\n                        selectedCourses={Object.keys(selectedNodes).concat(additionalCourses)}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ComputerScienceCOMPA1FINSA2;","import {isNode} from 'react-flow-renderer';\r\n\r\n// HELPER FUNCTION FOR POSITIONING\r\n// Prints out positions of all nodes\r\nexport default function positionHelper(elements) {\r\n    var positioning_data = [];\r\n    for (const e of elements) {\r\n        if (isNode(e)) {\r\n            positioning_data.push({\r\n                id: e.id,\r\n                position: {x: e.position.x, y: e.position.y},\r\n            });\r\n        }\r\n    }\r\n    // Write data to position output file. Note we have to do this ourselves as we\r\n    // are making a server write to a local file.\r\n    console.log('[');\r\n    for (const e of positioning_data) {\r\n        console.log('{\"id\": \"' + e.id + '\", \"position\": {\"x\": ' + e.position.x + ', \"y\": ' + e.position.y + '}},');\r\n    }\r\n    console.log(']');\r\n}","import React, {useState} from 'react';\r\nimport ReactFlow, { isNode, isEdge, ReactFlowProvider } from 'react-flow-renderer';\r\n\r\nimport CustomNode1 from '../../components/customnode1.js';\r\nimport CustomNode2 from '../../components/customnode2.js';\r\nimport HeaderNode1 from '../../components/headernode1.js';\r\n\r\nimport HoverInfo from '../../components/hoverinfo.js';\r\nimport hoverPrerequisites from '../../components/hoverprerequisites.js';\r\nimport unhoverPrerequisites from '../../components/unhoverprerequisites.js';\r\n\r\nimport { Grid, Segment, Container, Dropdown, Header } from 'semantic-ui-react'\r\nimport Sidebar from \"../../components/sidebar.js\"\r\n// import pkg from 'semantic-ui-react/package.json'\r\n\r\nimport DegreePlanner from \"../../components/degreeplanner.js\"\r\nimport DropdownSearch from \"../../components/dropdownsearch.js\"\r\n\r\nimport positionHelper from '../../components/positionhelper.js';\r\nimport selectNode from '../../components/selectnode.js';\r\nimport unselectNode from '../../components/unselectnode.js';\r\nimport highlightElements from '../../components/highlightelements.js';\r\nimport getSelectable from '../../components/getselectable.js';\r\nimport checkPrerequisites from '../../components/checkprerequisites';\r\nimport exclusionSwap from '../../components/exclusionswap.js';\r\n\r\nimport unselectUnconnected from '../../components/unselectunconnected.js';\r\nimport coursesJSON from \"../../webscraper/courses.json\";\r\nimport dataJSON from \"./data.json\"\r\n\r\n\r\nconst specialisations = ['COMPA1', 'MARKA2'];\r\nvar program = \"3778\";\r\nvar elementsData = dataJSON.slice();\r\n\r\n// This is for dropdown search\r\nvar searchNodeOptions = [];\r\nfor (const course of elementsData) {\r\n    if (isNode(course)) {\r\n        searchNodeOptions.push({\r\n            key: course.id,\r\n            value: course.id,\r\n            text: course.id\r\n        });\r\n    }\r\n}\r\n\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {\r\n    'COMPA1': 1,\r\n    'MARKA2': 1\r\n}\r\nvar selectedEdges = {};\r\nvar selectableNodes = {};\r\nvar potentialEdges = {};\r\nvar hoverEdges = {};\r\n\r\n// Load up the chart with initial selectable nodes and edges\r\nfor (const node of nodesData) {\r\n    if (selectedNodes.hasOwnProperty(node.id)) {\r\n        if (node.data.unlocks === null) continue;\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n        }\r\n    } else if (checkPrerequisites(node, elementsData, selectedNodes)) {\r\n        selectableNodes[node.id] = 1;\r\n    }\r\n}\r\n\r\nvar exclusionGroups = require(\"./data_exclusion.json\");\r\nvar exclusionNodes = {};\r\nfor (const group of exclusionGroups) {\r\n    for (const exclusion of group) {\r\n        exclusionNodes[exclusion] = 1;\r\n    }\r\n}\r\n\r\nelementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\nconst nodeTypes = {\r\n    custom1: CustomNode1,\r\n    custom2: CustomNode2,\r\n    header1: HeaderNode1\r\n};\r\n\r\nconst layoutStyle = {overflowX: \"hidden\", overflowY: \"overlay\", width: \"100vw\", height: \"100vh\"};\r\n\r\nconst getMoreCoursesForDropdown = (dataJSON) => {\r\n\r\n    const moreOptions = [];\r\n    const nodesOnFlowchart = dataJSON.map(node => node.id);\r\n    // console.log(\"refresh\", nodesOnFlowchart);\r\n\r\n    for (const code in coursesJSON) {\r\n        if (nodesOnFlowchart.includes(code)) continue;\r\n\r\n        const name = coursesJSON[code].course_name;\r\n        moreOptions.push({\r\n            key: code,\r\n            value: code,\r\n            text: code + \" - \" + name\r\n        });\r\n    }\r\n\r\n    return moreOptions;\r\n}\r\n\r\nconst ComputerScienceCOMPA1MARKA2 = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverText, setHoverText] = useState(false);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    const [layout, setLayout] = useState(layoutStyle);\r\n    const [additionalCourses, setAdditionalCourses] = useState([])\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n\r\n    const onInstanceLoad = (instance) => {\r\n        for (var group of exclusionGroups) {\r\n            const last = group.pop();\r\n    \r\n            for (var course of elementsData) {\r\n                if (last === course.id) {\r\n                    course.isHidden = true;\r\n                    // console.log(\"Hiding \" + course.id);\r\n                    // Get all the edges and hide them too\r\n                    for (var edge of elementsData) {\r\n                        if (isNode(edge)) continue;\r\n                        if (edge.source === last || edge.target === last) {\r\n                            // console.log(\"hiding \" + edge.id);\r\n                            edge.isHidden = true;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            group.push(last);\r\n        }\r\n        instance.setTransform({x: 470, y: 350, zoom: 0.38});\r\n    };\r\n\r\n    const selectUnselect = (element) => {\r\n        // NOTE: Might not need this?????\r\n        // EXPLANATION: Reason we dont need it is because we have to leave node\r\n        // anyways to hover another node. But maybe good practise to have just in case\r\n        // Unhover edges which lit up on nodeMouseEnter\r\n        unhoverPrerequisites(hoverEdges);\r\n\r\n        // 1. Select the node and fill in edges.\r\n        // - Deal with unselecting nodes\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"MAINSELECT\");\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"UNSELECTING\");\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n\r\n        console.log(\"==========SelectedNodes==========\");\r\n        console.log(selectedNodes);\r\n        console.log(\"==========SelectedEdges==========\");\r\n        console.log(selectedEdges);\r\n        console.log(\"==========SelectableNodes==========\");\r\n        console.log(selectableNodes);\r\n        console.log(\"==========PotentialEdges==========\");\r\n        console.log(potentialEdges);\r\n\r\n        // 2. Determine which nodes are now selectable\r\n        // - Determine which previously selectable nodes are now unselectable\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n\r\n        // Render graph accordingly\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const toggleExclusion = (element) => {\r\n        // TODO: ARE there courses which do not \r\n        // For all immediate edges of the element, swap\r\n        // with the exclusion course\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    // ==========ONCLICK==========\r\n    const onElementClick = (event, element) => {\r\n        // console.log(\"ONELEMENTCLICK\");\r\n        if (isEdge(element)) return; // Don't care about edges\r\n        if (element.id === 'COMPA1' || element.id === 'MARKA2') return; // Cannot click on main node\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return; // Cannot select non selectable nodes\r\n\r\n        // Determine double or single click for exclusion nodes\r\n        // This will prevent normal nodes from waiting the double click delay\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 250);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            // Not an exclusion node.\r\n            selectUnselect(element);\r\n        }\r\n    };\r\n    // ===========================\r\n\r\n    // ==========ONHOVER==========\r\n    const onNodeMouseEnter = (event, node) => {\r\n        if (node.id === 'COMPA1' || node.id === 'MARKA2') return;\r\n        // Display node information in top left\r\n        setHoverText(true);\r\n        setHoverNode(node);\r\n\r\n        // If the node is unselected, highlight prerequisite edges in purple\r\n        //if ((!selectedNodes.hasOwnProperty(node.id)) && (!selectableNodes.hasOwnProperty(node.id))) {\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        //}\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        if (node.id === 'COMPA1' || node.id === 'MARKA2') return;\r\n        setHoverText(false);\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    let hoverDisplay;\r\n    if (hoverText) {\r\n        hoverDisplay = <HoverInfo node={hoverNode}/>\r\n    }\r\n\r\n    // ===========================\r\n\r\n    const onNodeDragStop = (event, node) => {\r\n        for (var e of elements) {\r\n            if (e.id === node.id) {\r\n                e.position.x = node.position.x;\r\n                e.position.y = node.position.y;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const disableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'hidden'});\r\n    }\r\n\r\n    const enableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'overlay'});\r\n    }\r\n\r\n    return (\r\n        <div style={{positon: \"relative\"}}>\r\n            <div style={layout}>\r\n                <Grid columns={2} divided>\r\n                    <Grid.Column width=\"12\">\r\n                        <ReactFlowProvider>\r\n                            <div onMouseEnter={disableBodyScroll} onMouseLeave={enableBodyScroll}>\r\n                                <ReactFlow\r\n                                    elements={elements}\r\n                                    style={{width: '100%', height: '95vh'}}\r\n                                    onLoad={onInstanceLoad}\r\n                                    nodeTypes={nodeTypes}\r\n                                    nodesConnectable={false}\r\n                                    onElementClick={onElementClick}\r\n                                    minZoom={0.38}\r\n                                    //setInitTransform={TransformUpdater({x: 100, y: 100, z: 1})}\r\n                                    nodesDraggable={false}\r\n                                    onNodeMouseEnter={onNodeMouseEnter}\r\n                                    onNodeMouseLeave={onNodeMouseLeave}\r\n                                    selectNodesOnDrag={false}\r\n                                    onNodeDragStop={onNodeDragStop}\r\n                                    elementsSelectable={false}\r\n                                >\r\n                                    <div style={{position: \"absolute\", zIndex: \"10\", top: \"30px\", right: \"30px\"}}>\r\n                                        <DropdownSearch toggleExclusion={toggleExclusion} searchNodeOptions={searchNodeOptions} searchElements={elements}/>\r\n                                    </div>\r\n                                </ReactFlow>\r\n                            </div>\r\n                            <Container style={{marginBottom: \"50px\"}}>\r\n                                <Segment raised>\r\n                                    {/* <p>Couldn't find a course up there? Add it here:</p> */}\r\n                                    <Header as=\"h5\">Couldn't find a course up there? Add it here:</Header>\r\n                                    <Dropdown\r\n                                        selection\r\n                                        multiple\r\n                                        search\r\n                                        fluid\r\n                                        options={getMoreCoursesForDropdown(dataJSON)}\r\n                                        onChange={(e, data) => setAdditionalCourses(data.value)}\r\n                                        placeholder=\"Addditional courses\"\r\n                                    />\r\n                                </Segment>\r\n                            </Container>\r\n                        </ReactFlowProvider>\r\n                    </Grid.Column>\r\n                    <Grid.Column width=\"4\">\r\n                        <Sidebar specialisations={specialisations} selectedNodes={selectedNodes}/>\r\n                    </Grid.Column>\r\n                </Grid>\r\n                {hoverDisplay}\r\n                <button onClick={positionHelper(elements)}>GENERATE POSITION</button>\r\n                <div id=\"DegreePlanner\">\r\n                    <DegreePlanner\r\n                        key={Object.keys(selectedNodes).concat(additionalCourses).join(\"\")}\r\n                        program={program}\r\n                        specialisations={specialisations}\r\n                        selectedCourses={Object.keys(selectedNodes).concat(additionalCourses)}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ComputerScienceCOMPA1MARKA2;","import React, {useState} from 'react';\r\nimport ReactFlow, { isNode, isEdge, ReactFlowProvider } from 'react-flow-renderer';\r\n\r\nimport CustomNode1 from '../../components/customnode1.js';\r\nimport CustomNode2 from '../../components/customnode2.js';\r\nimport HeaderNode1 from '../../components/headernode1.js';\r\n\r\nimport HoverInfo from '../../components/hoverinfo.js';\r\nimport hoverPrerequisites from '../../components/hoverprerequisites.js';\r\nimport unhoverPrerequisites from '../../components/unhoverprerequisites.js';\r\n\r\nimport { Grid, Segment, Container, Dropdown, Header } from 'semantic-ui-react'\r\nimport Sidebar from \"../../components/sidebar.js\"\r\n// import pkg from 'semantic-ui-react/package.json'\r\n\r\nimport DegreePlanner from \"../../components/degreeplanner.js\"\r\nimport DropdownSearch from \"../../components/dropdownsearch.js\"\r\n\r\n// import positionHelper from '../../components/positionhelper.js';\r\nimport selectNode from '../../components/selectnode.js';\r\nimport unselectNode from '../../components/unselectnode.js';\r\nimport highlightElements from '../../components/highlightelements.js';\r\nimport getSelectable from '../../components/getselectable.js';\r\nimport checkPrerequisites from '../../components/checkprerequisites';\r\nimport exclusionSwap from '../../components/exclusionswap.js';\r\n\r\nimport unselectUnconnected from '../../components/unselectunconnected.js';\r\nimport coursesJSON from \"../../webscraper/courses.json\";\r\nimport dataJSON from \"./data.json\"\r\n\r\nconst specialisations = ['COMPA1', 'INFSA2'];\r\nvar program = \"3778\";\r\nvar elementsData = dataJSON.slice();\r\n// This is for dropdown search\r\nvar searchNodeOptions = [];\r\nfor (const course of elementsData) {\r\n    if (isNode(course)) {\r\n        searchNodeOptions.push({\r\n            key: course.id,\r\n            value: course.id,\r\n            text: course.id\r\n        });\r\n    }\r\n}\r\n\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {};\r\nfor (const specialisation of specialisations) selectedNodes[specialisation] = 1;\r\nvar selectedEdges = {};\r\nvar selectableNodes = {};\r\nvar potentialEdges = {};\r\nvar hoverEdges = {};\r\n\r\n// Load up the chart with initial selectable nodes and edges\r\nfor (const node of nodesData) {\r\n    if (selectedNodes.hasOwnProperty(node.id)) {\r\n        if (node.data.unlocks === null) continue;\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n        }\r\n    } else if (checkPrerequisites(node, elementsData, selectedNodes)) {\r\n        selectableNodes[node.id] = 1;\r\n    }\r\n}\r\n\r\nvar exclusionGroups = require(\"./data_exclusion.json\");\r\nvar exclusionNodes = {};\r\nfor (const group of exclusionGroups) {\r\n    for (const exclusion of group) {\r\n        exclusionNodes[exclusion] = 1;\r\n    }\r\n}\r\n\r\nelementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\nconst nodeTypes = {\r\n    custom1: CustomNode1,\r\n    custom2: CustomNode2,\r\n    header1: HeaderNode1\r\n};\r\n\r\nconst layoutStyle = {overflowX: \"hidden\", overflowY: \"overlay\", width: \"100vw\", height: \"100vh\"};\r\n\r\nconst getMoreCoursesForDropdown = (dataJSON) => {\r\n\r\n    const moreOptions = [];\r\n    const nodesOnFlowchart = dataJSON.map(node => node.id);\r\n    // console.log(\"refresh\", nodesOnFlowchart);\r\n\r\n    for (const code in coursesJSON) {\r\n        if (nodesOnFlowchart.includes(code)) continue;\r\n\r\n        const name = coursesJSON[code].course_name;\r\n        moreOptions.push({\r\n            key: code,\r\n            value: code,\r\n            text: code + \" - \" + name\r\n        });\r\n    }\r\n\r\n    return moreOptions;\r\n}\r\n\r\nconst ComputerScienceCOMPA1INFSA2 = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverText, setHoverText] = useState(false);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    const [layout, setLayout] = useState(layoutStyle);\r\n    const [additionalCourses, setAdditionalCourses] = useState([])\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n\r\n    const onInstanceLoad = (instance) => {\r\n        for (var group of exclusionGroups) {\r\n            const last = group.pop();\r\n    \r\n            for (var course of elementsData) {\r\n                if (last === course.id) {\r\n                    course.isHidden = true;\r\n                    // console.log(\"Hiding \" + course.id);\r\n                    // Get all the edges and hide them too\r\n                    for (var edge of elementsData) {\r\n                        if (isNode(edge)) continue;\r\n                        if (edge.source === last || edge.target === last) {\r\n                            // console.log(\"hiding \" + edge.id);\r\n                            edge.isHidden = true;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            group.push(last);\r\n        }\r\n        instance.setTransform({x: 470, y: 350, zoom: 0.38});\r\n    };\r\n\r\n    const selectUnselect = (element) => {\r\n        // NOTE: Might not need this?????\r\n        // EXPLANATION: Reason we dont need it is because we have to leave node\r\n        // anyways to hover another node. But maybe good practise to have just in case\r\n        // Unhover edges which lit up on nodeMouseEnter\r\n        unhoverPrerequisites(hoverEdges);\r\n\r\n        // 1. Select the node and fill in edges.\r\n        // - Deal with unselecting nodes\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"MAINSELECT\");\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"UNSELECTING\");\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n\r\n        console.log(\"==========SelectedNodes==========\");\r\n        console.log(selectedNodes);\r\n        console.log(\"==========SelectedEdges==========\");\r\n        console.log(selectedEdges);\r\n        console.log(\"==========SelectableNodes==========\");\r\n        console.log(selectableNodes);\r\n        console.log(\"==========PotentialEdges==========\");\r\n        console.log(potentialEdges);\r\n\r\n        // 2. Determine which nodes are now selectable\r\n        // - Determine which previously selectable nodes are now unselectable\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n\r\n        // Render graph accordingly\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const toggleExclusion = (element) => {\r\n        // TODO: ARE there courses which do not \r\n        // For all immediate edges of the element, swap\r\n        // with the exclusion course\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    // ==========ONCLICK==========\r\n    const onElementClick = (event, element) => {\r\n        // console.log(\"ONELEMENTCLICK\");\r\n        if (isEdge(element)) return; // Don't care about edges\r\n        if (specialisations.includes(element.id)) return; // Cannot click on main node\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return; // Cannot select non selectable nodes\r\n\r\n        // Determine double or single click for exclusion nodes\r\n        // This will prevent normal nodes from waiting the double click delay\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 250);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            // Not an exclusion node.\r\n            selectUnselect(element);\r\n        }\r\n    };\r\n    // ===========================\r\n\r\n    // ==========ONHOVER==========\r\n    const onNodeMouseEnter = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        // Display node information in top left\r\n        setHoverText(true);\r\n        setHoverNode(node);\r\n\r\n        // If the node is unselected, highlight prerequisite edges in purple\r\n        //if ((!selectedNodes.hasOwnProperty(node.id)) && (!selectableNodes.hasOwnProperty(node.id))) {\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        //}\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        setHoverText(false);\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    let hoverDisplay;\r\n    if (hoverText) {\r\n        hoverDisplay = <HoverInfo node={hoverNode}/>\r\n    }\r\n\r\n    // ===========================\r\n\r\n    // const onNodeDragStop = (event, node) => {\r\n    //     for (var e of elements) {\r\n    //         if (e.id === node.id) {\r\n    //             e.position.x = node.position.x;\r\n    //             e.position.y = node.position.y;\r\n    //             break;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    const disableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'hidden'});\r\n    }\r\n\r\n    const enableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'overlay'});\r\n    }\r\n\r\n    return (\r\n        <div style={{positon: \"relative\"}}>\r\n            <div style={layout}>\r\n                <Grid columns={2} divided>\r\n                    <Grid.Column width=\"12\">\r\n                        <ReactFlowProvider>\r\n                            <div onMouseEnter={disableBodyScroll} onMouseLeave={enableBodyScroll}>\r\n                                <ReactFlow\r\n                                    elements={elements}\r\n                                    style={{width: '100%', height: '95vh'}}\r\n                                    onLoad={onInstanceLoad}\r\n                                    nodeTypes={nodeTypes}\r\n                                    nodesConnectable={false}\r\n                                    onElementClick={onElementClick}\r\n                                    minZoom={0.38}\r\n                                    //setInitTransform={TransformUpdater({x: 100, y: 100, z: 1})}\r\n                                    nodesDraggable={false}\r\n                                    onNodeMouseEnter={onNodeMouseEnter}\r\n                                    onNodeMouseLeave={onNodeMouseLeave}\r\n                                    selectNodesOnDrag={false}\r\n                                    // onNodeDragStop={onNodeDragStop}\r\n                                    elementsSelectable={false}\r\n                                >\r\n                                    <div style={{position: \"absolute\", zIndex: \"10\", top: \"30px\", right: \"30px\"}}>\r\n                                        <DropdownSearch toggleExclusion={toggleExclusion} searchNodeOptions={searchNodeOptions} searchElements={elements}/>\r\n                                    </div>\r\n                                </ReactFlow>\r\n                            </div>\r\n                            <Container style={{marginBottom: \"50px\"}}>\r\n                                <Segment raised>\r\n                                    {/* <p>Couldn't find a course up there? Add it here:</p> */}\r\n                                    <Header as=\"h5\">Couldn't find a course up there? Add it here:</Header>\r\n                                    <Dropdown\r\n                                        selection\r\n                                        multiple\r\n                                        search\r\n                                        fluid\r\n                                        options={getMoreCoursesForDropdown(dataJSON)}\r\n                                        onChange={(e, data) => setAdditionalCourses(data.value)}\r\n                                        placeholder=\"Addditional courses\"\r\n                                    />\r\n                                </Segment>\r\n                            </Container>\r\n                        </ReactFlowProvider>\r\n                    </Grid.Column>\r\n                    <Grid.Column width=\"4\">\r\n                        <Sidebar specialisations={specialisations} selectedNodes={selectedNodes}/>\r\n                    </Grid.Column>\r\n                </Grid>\r\n                {hoverDisplay}\r\n                {/* <button onClick={positionHelper(elements)}>GENERATE POSITION</button> */}\r\n                <div id=\"DegreePlanner\">\r\n                    <DegreePlanner\r\n                        key={Object.keys(selectedNodes).concat(additionalCourses).join(\"\")}\r\n                        program={program}\r\n                        specialisations={specialisations}\r\n                        selectedCourses={Object.keys(selectedNodes).concat(additionalCourses)}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ComputerScienceCOMPA1INFSA2;","import React, {useState} from 'react';\r\nimport ReactFlow, { isNode, isEdge, ReactFlowProvider } from 'react-flow-renderer';\r\n\r\nimport CustomNode1 from '../../components/customnode1.js';\r\nimport CustomNode2 from '../../components/customnode2.js';\r\nimport HeaderNode1 from '../../components/headernode1.js';\r\n\r\nimport HoverInfo from '../../components/hoverinfo.js';\r\nimport hoverPrerequisites from '../../components/hoverprerequisites.js';\r\nimport unhoverPrerequisites from '../../components/unhoverprerequisites.js';\r\n\r\nimport { Grid, Segment, Container, Dropdown, Header } from 'semantic-ui-react'\r\nimport Sidebar from \"../../components/sidebar.js\"\r\n// import pkg from 'semantic-ui-react/package.json'\r\n\r\nimport DegreePlanner from \"../../components/degreeplanner.js\"\r\nimport DropdownSearch from \"../../components/dropdownsearch.js\"\r\n\r\n// import positionHelper from '../../components/positionhelper.js';\r\nimport selectNode from '../../components/selectnode.js';\r\nimport unselectNode from '../../components/unselectnode.js';\r\nimport highlightElements from '../../components/highlightelements.js';\r\nimport getSelectable from '../../components/getselectable.js';\r\nimport checkPrerequisites from '../../components/checkprerequisites';\r\nimport exclusionSwap from '../../components/exclusionswap.js';\r\n\r\nimport unselectUnconnected from '../../components/unselectunconnected.js';\r\nimport coursesJSON from \"../../webscraper/courses.json\";\r\nimport dataJSON from \"./data.json\"\r\n\r\n\r\nconst specialisations = ['COMPA1', 'PSYCM2'];\r\nvar program = \"3778\";\r\nvar elementsData = dataJSON.slice();\r\n\r\n// This is for dropdown search\r\nvar searchNodeOptions = [];\r\nfor (const course of elementsData) {\r\n    if (isNode(course)) {\r\n        searchNodeOptions.push({\r\n            key: course.id,\r\n            value: course.id,\r\n            text: course.id\r\n        });\r\n    }\r\n}\r\n\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {};\r\nfor (const specialisation of specialisations) selectedNodes[specialisation] = 1;\r\n\r\nvar selectedEdges = {};\r\nvar selectableNodes = {};\r\nvar potentialEdges = {};\r\nvar hoverEdges = {};\r\n\r\n// Load up the chart with initial selectable nodes and edges\r\nfor (const node of nodesData) {\r\n    if (selectedNodes.hasOwnProperty(node.id)) {\r\n        if (node.data.unlocks === null) continue;\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n        }\r\n    } else if (checkPrerequisites(node, elementsData, selectedNodes)) {\r\n        selectableNodes[node.id] = 1;\r\n    }\r\n}\r\n\r\nvar exclusionGroups = require(\"./data_exclusion.json\");\r\nvar exclusionNodes = {};\r\nfor (const group of exclusionGroups) {\r\n    for (const exclusion of group) {\r\n        exclusionNodes[exclusion] = 1;\r\n    }\r\n}\r\n\r\nelementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\nconst nodeTypes = {\r\n    custom1: CustomNode1,\r\n    custom2: CustomNode2,\r\n    header1: HeaderNode1\r\n};\r\n\r\nconst layoutStyle = {overflowX: \"hidden\", overflowY: \"overlay\", width: \"100vw\", height: \"100vh\"};\r\n\r\nconst getMoreCoursesForDropdown = (dataJSON) => {\r\n\r\n    const moreOptions = [];\r\n    const nodesOnFlowchart = dataJSON.map(node => node.id);\r\n    // console.log(\"refresh\", nodesOnFlowchart);\r\n\r\n    for (const code in coursesJSON) {\r\n        if (nodesOnFlowchart.includes(code)) continue;\r\n\r\n        const name = coursesJSON[code].course_name;\r\n        moreOptions.push({\r\n            key: code,\r\n            value: code,\r\n            text: code + \" - \" + name\r\n        });\r\n    }\r\n\r\n    return moreOptions;\r\n}\r\n\r\nconst ComputerScienceCOMPA1PSYCM2 = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverText, setHoverText] = useState(false);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    const [layout, setLayout] = useState(layoutStyle);\r\n    const [additionalCourses, setAdditionalCourses] = useState([])\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n\r\n    const onInstanceLoad = (instance) => {\r\n        for (var group of exclusionGroups) {\r\n            const last = group.pop();\r\n    \r\n            for (var course of elementsData) {\r\n                if (last === course.id) {\r\n                    course.isHidden = true;\r\n                    // console.log(\"Hiding \" + course.id);\r\n                    // Get all the edges and hide them too\r\n                    for (var edge of elementsData) {\r\n                        if (isNode(edge)) continue;\r\n                        if (edge.source === last || edge.target === last) {\r\n                            // console.log(\"hiding \" + edge.id);\r\n                            edge.isHidden = true;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            group.push(last);\r\n        }\r\n        instance.setTransform({x: 470, y: 350, zoom: 0.38});\r\n    };\r\n\r\n    const selectUnselect = (element) => {\r\n        // NOTE: Might not need this?????\r\n        // EXPLANATION: Reason we dont need it is because we have to leave node\r\n        // anyways to hover another node. But maybe good practise to have just in case\r\n        // Unhover edges which lit up on nodeMouseEnter\r\n        unhoverPrerequisites(hoverEdges);\r\n\r\n        // 1. Select the node and fill in edges.\r\n        // - Deal with unselecting nodes\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"MAINSELECT\");\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"UNSELECTING\");\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n\r\n        console.log(\"==========SelectedNodes==========\");\r\n        console.log(selectedNodes);\r\n        console.log(\"==========SelectedEdges==========\");\r\n        console.log(selectedEdges);\r\n        console.log(\"==========SelectableNodes==========\");\r\n        console.log(selectableNodes);\r\n        console.log(\"==========PotentialEdges==========\");\r\n        console.log(potentialEdges);\r\n\r\n        // 2. Determine which nodes are now selectable\r\n        // - Determine which previously selectable nodes are now unselectable\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n\r\n        // Render graph accordingly\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const toggleExclusion = (element) => {\r\n        // TODO: ARE there courses which do not \r\n        // For all immediate edges of the element, swap\r\n        // with the exclusion course\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    // ==========ONCLICK==========\r\n    const onElementClick = (event, element) => {\r\n        // console.log(\"ONELEMENTCLICK\");\r\n        if (isEdge(element)) return; // Don't care about edges\r\n        if (specialisations.includes(element.id)) return; // Cannot click on main node\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return; // Cannot select non selectable nodes\r\n\r\n        // Determine double or single click for exclusion nodes\r\n        // This will prevent normal nodes from waiting the double click delay\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 250);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            // Not an exclusion node.\r\n            selectUnselect(element);\r\n        }\r\n    };\r\n    // ===========================\r\n\r\n    // ==========ONHOVER==========\r\n    const onNodeMouseEnter = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        // Display node information in top left\r\n        setHoverText(true);\r\n        setHoverNode(node);\r\n\r\n        // If the node is unselected, highlight prerequisite edges in purple\r\n        //if ((!selectedNodes.hasOwnProperty(node.id)) && (!selectableNodes.hasOwnProperty(node.id))) {\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        //}\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        setHoverText(false);\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    let hoverDisplay;\r\n    if (hoverText) {\r\n        hoverDisplay = <HoverInfo node={hoverNode}/>\r\n    }\r\n\r\n    // ===========================\r\n\r\n    // const onNodeDragStop = (event, node) => {\r\n    //     for (var e of elements) {\r\n    //         if (e.id === node.id) {\r\n    //             e.position.x = node.position.x;\r\n    //             e.position.y = node.position.y;\r\n    //             break;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    const disableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'hidden'});\r\n    }\r\n\r\n    const enableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'overlay'});\r\n    }\r\n\r\n    return (\r\n        <div style={{positon: \"relative\"}}>\r\n            <div style={layout}>\r\n                <Grid columns={2} divided>\r\n                    <Grid.Column width=\"12\">\r\n                        <ReactFlowProvider>\r\n                            <div onMouseEnter={disableBodyScroll} onMouseLeave={enableBodyScroll}>\r\n                                <ReactFlow\r\n                                    elements={elements}\r\n                                    style={{width: '100%', height: '95vh'}}\r\n                                    onLoad={onInstanceLoad}\r\n                                    nodeTypes={nodeTypes}\r\n                                    nodesConnectable={false}\r\n                                    onElementClick={onElementClick}\r\n                                    minZoom={0.38}\r\n                                    //setInitTransform={TransformUpdater({x: 100, y: 100, z: 1})}\r\n                                    nodesDraggable={false}\r\n                                    onNodeMouseEnter={onNodeMouseEnter}\r\n                                    onNodeMouseLeave={onNodeMouseLeave}\r\n                                    selectNodesOnDrag={false}\r\n                                    // onNodeDragStop={onNodeDragStop}\r\n                                    elementsSelectable={false}\r\n                                >\r\n                                    <div style={{position: \"absolute\", zIndex: \"10\", top: \"30px\", right: \"30px\"}}>\r\n                                      <DropdownSearch toggleExclusion={toggleExclusion} searchNodeOptions={searchNodeOptions} searchElements={elements}/>\r\n                                    </div>\r\n                                </ReactFlow>\r\n                            </div>\r\n                            <Container style={{marginBottom: \"50px\"}}>\r\n                                <Segment raised>\r\n                                    {/* <p>Couldn't find a course up there? Add it here:</p> */}\r\n                                    <Header as=\"h5\">Couldn't find a course up there? Add it here:</Header>\r\n                                    <Dropdown\r\n                                        selection\r\n                                        multiple\r\n                                        search\r\n                                        fluid\r\n                                        options={getMoreCoursesForDropdown(dataJSON)}\r\n                                        onChange={(e, data) => setAdditionalCourses(data.value)}\r\n                                        placeholder=\"Addditional courses\"\r\n                                    />\r\n                                </Segment>\r\n                            </Container>\r\n                        </ReactFlowProvider>\r\n                    </Grid.Column>\r\n                    <Grid.Column width=\"4\">\r\n                        <Sidebar specialisations={specialisations} selectedNodes={selectedNodes}/>\r\n                    </Grid.Column>\r\n                </Grid>\r\n                {hoverDisplay}\r\n                {/* <button onClick={positionHelper(elements)}>GENERATE POSITION</button> */}\r\n                <div id=\"DegreePlanner\">\r\n                    <DegreePlanner\r\n                        key={Object.keys(selectedNodes).concat(additionalCourses).join(\"\")}\r\n                        program={program}\r\n                        specialisations={specialisations}\r\n                        selectedCourses={Object.keys(selectedNodes).concat(additionalCourses)}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ComputerScienceCOMPA1PSYCM2;","import React, {useState} from 'react';\r\n// import ReactFlow, {Background, Controls, getConnectedEdges, isNode, isEdge, useStoreState, useStoreActions, ReactFlowProvider, EdgeText} from 'react-flow-renderer';\r\nimport ReactFlow, { isNode, isEdge, ReactFlowProvider } from 'react-flow-renderer';\r\n\r\nimport CustomNode1 from '../../components/customnode1.js';\r\nimport CustomNode2 from '../../components/customnode2.js';\r\nimport HeaderNode1 from '../../components/headernode1.js';\r\n\r\nimport HoverInfo from '../../components/hoverinfo.js';\r\nimport hoverPrerequisites from '../../components/hoverprerequisites.js';\r\nimport unhoverPrerequisites from '../../components/unhoverprerequisites.js';\r\n\r\nimport { Grid, Container } from 'semantic-ui-react'\r\nimport Sidebar from \"../../components/sidebar.js\"\r\n// import pkg from 'semantic-ui-react/package.json'\r\n\r\nimport DegreePlanner from \"../../components/degreeplanner.js\"\r\nimport DropdownSearch from \"../../components/dropdownsearch.js\"\r\n\r\n// import positionHelper from '../../components/positionhelper.js';\r\nimport selectNode from '../../components/selectnode.js';\r\nimport unselectNode from '../../components/unselectnode.js';\r\nimport highlightElements from '../../components/highlightelements.js';\r\nimport getSelectable from '../../components/getselectable.js';\r\nimport checkPrerequisites from '../../components/checkprerequisites';\r\nimport exclusionSwap from '../../components/exclusionswap.js';\r\n// import getElement from '../../components/getelement.js';\r\nimport unselectUnconnected from '../../components/unselectunconnected.js';\r\n// import coursesJSON from \"../../webscraper/courses.json\";\r\nimport dataJSON from \"./data.json\"\r\n\r\n// import SearchPan from '../../components/searchpan.js';\r\n\r\n// import GetPan from '../../components/getpan.js';\r\n\r\nvar elementsData = dataJSON.slice()\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {\r\n    'SENGAH': 1,\r\n}\r\nvar selectedEdges = {};\r\nvar selectableNodes = {};\r\nvar potentialEdges = {};\r\nvar hoverEdges = {};\r\n\r\n// Load up the chart with initial selectable nodes and edges\r\nfor (const node of nodesData) {\r\n    if (selectedNodes.hasOwnProperty(node.id)) {\r\n        if (node.data.unlocks === null) continue;\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n        }\r\n    } else if (checkPrerequisites(node, elementsData, selectedNodes)) {\r\n        selectableNodes[node.id] = 1;\r\n    }\r\n}\r\n\r\nvar exclusionGroups = require(\"./data_exclusion.json\");\r\nvar exclusionNodes = {};\r\nfor (const group of exclusionGroups) {\r\n    for (const exclusion of group) {\r\n        exclusionNodes[exclusion] = 1;\r\n    }\r\n}\r\n\r\nelementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\nconst nodeTypes = {\r\n    custom1: CustomNode1,\r\n    custom2: CustomNode2,\r\n    header1: HeaderNode1\r\n};\r\n\r\nconst layoutStyle = {overflowX: \"hidden\", overflowY: \"overlay\", width: \"100vw\", height: \"100vh\"};\r\n\r\nconst Teaching = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverText, setHoverText] = useState(false);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    const [layout, setLayout] = useState(layoutStyle);\r\n    //const reactFlowInstance = useRef(null);\r\n    const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n\r\n    const onInstanceLoad = (instance) => {\r\n        for (var group of exclusionGroups) {\r\n            const last = group.pop();\r\n    \r\n            for (var course of elementsData) {\r\n                if (last === course.id) {\r\n                    course.isHidden = true;\r\n                    // console.log(\"Hiding \" + course.id);\r\n                    // Get all the edges and hide them too\r\n                    for (var edge of elementsData) {\r\n                        if (isNode(edge)) continue;\r\n                        if (edge.source === last || edge.target === last) {\r\n                            // console.log(\"hiding \" + edge.id);\r\n                            edge.isHidden = true;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            group.push(last);\r\n        }\r\n        setReactFlowInstance(instance);\r\n        instance.setTransform({x: 470, y: 350, zoom: 0.38});\r\n    };\r\n\r\n    const getCanvasSize = () => {\r\n        const size1 = reactFlowInstance.project({x: window.innerWidth * 0.75, y: window.innerHeight});\r\n        const size2 = reactFlowInstance.project({x: 0, y: 0});\r\n        return [(size1.x - size2.x) * 0.38, (size1.y - size2.y) * 0.38];\r\n    }\r\n\r\n\r\n    let dropSearch = null;\r\n    if (reactFlowInstance !== null) {\r\n        dropSearch = <DropdownSearch canvasSize={getCanvasSize()}/>\r\n    }\r\n\r\n    const selectUnselect = (element) => {\r\n        // NOTE: Might not need this?????\r\n        // EXPLANATION: Reason we dont need it is because we have to leave node\r\n        // anyways to hover another node. But maybe good practise to have just in case\r\n        // Unhover edges which lit up on nodeMouseEnter\r\n        unhoverPrerequisites(hoverEdges);\r\n\r\n        // 1. Select the node and fill in edges.\r\n        // - Deal with unselecting nodes\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            // console.log(\"MAINSELECT\");\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            // console.log(\"UNSELECTING\");\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n\r\n        // console.log(\"==========SelectedNodes==========\");\r\n        // console.log(selectedNodes);\r\n        // console.log(\"==========SelectedEdges==========\");\r\n        // console.log(selectedEdges);\r\n        // console.log(\"==========SelectableNodes==========\");\r\n        // console.log(selectableNodes);\r\n        // console.log(\"==========PotentialEdges==========\");\r\n        // console.log(potentialEdges);\r\n\r\n        // 2. Determine which nodes are now selectable\r\n        // - Determine which previously selectable nodes are now unselectable\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n\r\n        // Render graph accordingly\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const toggleExclusion = (element) => {\r\n        // TODO: ARE there courses which do not \r\n        // For all immediate edges of the element, swap\r\n        // with the exclusion course\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    // ==========ONCLICK==========\r\n    const onElementClick = (event, element) => {\r\n        // console.log(\"ONELEMENTCLICK\");\r\n        if (isEdge(element)) return; // Don't care about edges\r\n        if (element.id === 'SENGAH') return; // Cannot click on main node\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return; // Cannot select non selectable nodes\r\n\r\n        // Determine double or single click for exclusion nodes\r\n        // This will prevent normal nodes from waiting the double click delay\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 200);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            // Not an exclusion node.\r\n            selectUnselect(element);\r\n        }\r\n    };\r\n    // ===========================\r\n\r\n    // ==========ONHOVER==========\r\n    const onNodeMouseEnter = (event, node) => {\r\n        if (node.id === 'SENGAH') return;\r\n        // Display node information in top left\r\n        setHoverText(true);\r\n        setHoverNode(node);\r\n\r\n        // If the node is unselected, highlight prerequisite edges in purple\r\n        //if ((!selectedNodes.hasOwnProperty(node.id)) && (!selectableNodes.hasOwnProperty(node.id))) {\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        //}\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        if (node.id === 'SENGAH') return;\r\n        setHoverText(false);\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    let hoverDisplay;\r\n    if (hoverText) {\r\n        hoverDisplay = <HoverInfo node={hoverNode}/>\r\n    }\r\n\r\n    // ===========================\r\n\r\n    const onNodeDragStop = (event, node) => {\r\n        for (var e of elements) {\r\n            if (e.id === node.id) {\r\n                e.position.x = node.position.x;\r\n                e.position.y = node.position.y;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const disableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'hidden'});\r\n    }\r\n\r\n    const enableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'overlay'});\r\n    }\r\n\r\n    return (\r\n        <div style={{positon: \"relative\"}}>\r\n            <div style={layout}>\r\n                <Grid columns={2} divided>\r\n                    <Grid.Column width=\"12\">\r\n                        <ReactFlowProvider onMouseEnter={disableBodyScroll} onMouseLeave={enableBodyScroll}>\r\n                            <ReactFlow\r\n                                elements={elements}\r\n                                style={{width: '100%', height: '100vh'}}\r\n                                onLoad={onInstanceLoad}\r\n                                nodeTypes={nodeTypes}\r\n                                nodesConnectable={false}\r\n                                onElementClick={onElementClick}\r\n                                minZoom={0.38}\r\n                                //setInitTransform={TransformUpdater({x: 100, y: 100, z: 1})}\r\n                                //nodesDraggable={false}\r\n                                onNodeMouseEnter={onNodeMouseEnter}\r\n                                onNodeMouseLeave={onNodeMouseLeave}\r\n                                selectNodesOnDrag={false}\r\n                                onNodeDragStop={onNodeDragStop}\r\n                                elementsSelectable={false}\r\n                            >\r\n                                <div style={{position: \"absolute\", zIndex: \"10\", top: \"30px\", right: \"30px\"}}>\r\n                                    {dropSearch}\r\n                                </div>\r\n                            </ReactFlow>\r\n                        </ReactFlowProvider>\r\n                    </Grid.Column>\r\n                    <Grid.Column width=\"4\">\r\n                        <Sidebar selectedNodes={selectedNodes}/>\r\n                    </Grid.Column>\r\n                </Grid>\r\n                {hoverDisplay}\r\n                {/* <button onClick={positionHelper(elements)}>GENERATE POSITION</button> */}\r\n                <div id=\"DegreePlanner\">\r\n                    <DegreePlanner id=\"DegreePlanner\" key={Object.keys(selectedNodes).join(\"\")}selectedCourses={Object.keys(selectedNodes)} />\r\n                </div>\r\n                <Container style={{textAlign: \"center\", height: \"auto\", padding: \"20px\"}}>\r\n                    <p>Made by SRKO, 2020</p>\r\n                    <a href=\"https://github.com/Circles360/Circles360.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>\r\n                </Container>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Teaching;","import React, {Component} from 'react';\r\nimport { Route, HashRouter } from 'react-router-dom';\r\n\r\nimport BESengah from './maps/EngineeringHonoursSoftware/map.js';\r\nimport Homepage from \"./maps/Homepage/map.js\";\r\nimport ComputerScienceCOMPA1 from './maps/ComputerScienceCOMPA1/map.js';\r\nimport ComputerScienceCOMPA1ACCTA2 from './maps/ComputerScienceCOMPA1ACCTA2/map.js';\r\nimport ComputerScienceCOMPA1FINSA2 from './maps/ComputerScienceCOMPA1FINSA2/map.js';\r\nimport ComputerScienceCOMPA1MARKA2 from './maps/ComputerScienceCOMPA1MARKA2/map.js';\r\nimport ComputerScienceCOMPA1INFSA2 from './maps/ComputerScienceCOMPA1INFSA2/map.js';\r\nimport ComputerScienceCOMPA1PSYCM2 from './maps/ComputerScienceCOMPA1PSYCM2/map.js';\r\n\r\nimport Teaching from './maps/EngineeringHonoursSoftware/teaching.js';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <HashRouter basename='/'>\r\n        <div>\r\n          <Route exact path=\"/3707/SENGAH\" component={BESengah} />\r\n          <Route exact path=\"/3778/COMPA1/\" component={ComputerScienceCOMPA1} />\r\n          <Route exact path=\"/3778/COMPA1/ACCTA2\" component={ComputerScienceCOMPA1ACCTA2} />\r\n          <Route exact path=\"/3778/COMPA1/FINSA2\" component={ComputerScienceCOMPA1FINSA2} />\r\n          <Route exact path=\"/3778/COMPA1/MARKA2\" component={ComputerScienceCOMPA1MARKA2} />\r\n          <Route exact path=\"/3778/COMPA1/INFSA2\" component={ComputerScienceCOMPA1INFSA2} />\r\n          <Route exact path=\"/3778/COMPA1/PSYCM2\" component={ComputerScienceCOMPA1PSYCM2} />\r\n          <Route exact path=\"/James\" component={Teaching}/>\r\n          <Route exact path=\"/\" component={Homepage} />\r\n        </div>\r\n      </HashRouter>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType !== null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/refresh.5c376b6e.svg\";"],"sourceRoot":""}