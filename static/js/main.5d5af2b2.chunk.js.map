{"version":3,"sources":["components/customnode1.js","components/customnode2.js","components/headernode1.js","components/hoverinfo.js","components/getelement.js","components/unhoverprerequisites.js","components/dropdownDegrees.js","components/sidebar.js","components/degreeplanner-task.jsx","components/degreeplanner-column.jsx","components/degreeplanner.js","components/highlightelements.js","maps/EngineeringHonoursSoftware/map.js","components/selectnode.js","components/unselectnode.js","components/getselectable.js","components/exclusionswap.js","components/hoverprerequisites.js","components/teaching.js","App.js","serviceWorker.js","index.js","components/checkprerequisites.js"],"names":["style","zIndex","pointerEvents","opacity","top","memo","data","type","position","course_code","id","bottom","degree_name","HoverInfo","props","console","log","node","getElement","elementsData","e","unhoverPrerequisites","hoverEdges","edge","courseOptions","programOptions","code","programsJSON","degrees_involved","majors","length","honours","push","name","replacement","spec","specialisationsJSON","getMajors","minors","getMinors","DropdownDegrees","state","majorOptions","minorOptions","disabledPrimary","disabledSecondary","valProgram","valPrimary","valSecondary","phPrimary","phSecondary","chooseProgram","program","value","setState","choosePrimary","chooseSecondary","minor","clickDone","Dropdown","selection","search","onChange","this","options","enabled","placeholder","disabled","Button","onClick","marginTop","Component","example","key","flag","text","Sidebar","Container","paddingLeft","paddingRight","Grid","divided","stretched","Row","Header","as","textAlign","marginBottom","fluid","multiple","selector","animated","color","Content","visible","hidden","Icon","Task","draggableId","task","index","provided","draggableProps","dragHandleProps","ref","innerRef","Label","content","React","Column","column","title","droppableId","droppableProps","tasks","map","initialData","columns","taskIds","years","columnOrder","DegreePlanner","onDragEnd","result","Segment","columnId","taskId","highlightElements","elements","selectedNodes","selectedEdges","selectableNodes","potentialEdges","isEdge","hasOwnProperty","stroke","strokeWidth","background","backgroundColour","filter","textColour","require","nodesData","isNode","edgesData","unlocks","unlockCourse","checkPrerequisites","exclusionGroups","exclusionNodes","group","exclusion","onLoad","reactFlowInstance","fitView","last","pop","course","isHidden","source","target","nodeTypes","custom1","CustomNode1","custom2","CustomNode2","header1","HeaderNode1","BESengah","hoverDisplay","useState","setElements","hoverText","setHoverText","hoverNode","setHoverNode","clickCount","singleClickTimer","selectUnselect","element","conditions","prerequisites","prereq","selectNode","unselectQueue","current","shift","unselectNode","analyseNodes","Object","keys","split","nodeID","getSelectable","toggleExclusion","edges","newElements","includes","prevCourse","curCourse","edgesList","getConnectedEdges","newEdgesList","hideEdge","newEdge","replace","sourceNode","targetNode","exclusionSwap","width","height","nodesConnectable","onElementClick","event","setTimeout","clearTimeout","minZoom","nodesDraggable","onNodeMouseEnter","prereqQueue","hoverPrerequisites","onNodeMouseLeave","selectNodesOnDrag","onNodeContextMenu","whyDidYouRender","initialElements","x","y","label","Teaching","els","nodeColor","n","concat","toString","Math","random","window","innerWidth","innerHeight","App","basename","to","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","prereqs_executable","condition","eval"],"mappings":"6/kVAKMA,EAAQ,CAACC,QAAS,KAAMC,cAAe,OAAQC,QAAS,EAAGC,IAAK,OACvDC,kBAAK,YAAe,IAAZC,EAAW,EAAXA,KACrB,OACE,oCACE,kBAAC,IAAD,CAAQC,KAAK,SAASC,SAAS,MAAMR,MAAOA,IAC5C,6BACM,4BAAKM,EAAKG,cAEhB,kBAAC,IAAD,CAAQF,KAAK,SAASC,SAAS,SAASR,MAAOA,QCRtCK,kBAAK,YAAe,IAAZC,EAAW,EAAXA,KACrB,OACE,oCACE,kBAAC,IAAD,CAAQC,KAAK,SAASC,SAAS,MAAMR,MAAO,CAACC,QAAS,KAAMC,cAAe,OAAQC,QAAS,EAAGC,IAAK,SACpG,6BACI,2BAAIE,EAAKI,KAEb,kBAAC,IAAD,CAAQH,KAAK,SAASC,SAAS,SAASR,MAAO,CAACC,QAAS,KAAMC,cAAe,OAAQC,QAAS,EAAGQ,OAAQ,aCRjGN,kBAAK,YAAe,IAAZC,EAAW,EAAXA,KACrB,OACE,oCACE,kBAAC,IAAD,CAAQC,KAAK,SAASC,SAAS,MAAMR,MAAO,CAACG,QAAS,EAAGC,IAAK,SAC9D,6BACM,2BAAIE,EAAKM,cAEf,kBAAC,IAAD,CAAQL,KAAK,SAASC,SAAS,SAASR,MAAO,CAACG,QAAS,EAAGQ,OAAQ,a,OCP3D,SAASE,EAAUC,GAE9B,OADAC,QAAQC,IAAIF,GAER,yBAAKJ,GAAG,YACJ,yBAAKA,GAAG,UACHI,EAAMG,KAAKP,KCR5B,IAUeQ,EAVI,SAACR,EAAIS,GACpBJ,QAAQC,IAAI,kBAAoBN,GADK,oBAEvBS,GAFuB,IAErC,2BAA4B,CAAC,IAApBC,EAAmB,QACxB,GAAIA,EAAEV,KAAOA,EACT,OAAOU,GAJsB,8BAOrC,OAAO,MCNI,SAASC,EAAqBC,GACzC,IAAK,IAAIC,KAAQD,SACNA,EAAWC,G,sCCMpBC,EAAgB,GAChBC,EAAiB,GAIvB,IAAK,IAAMC,KAFXX,QAAQC,IAAIW,GAEOA,EAC2C,IAAtDA,EAAaD,GAAME,iBAAiBC,OAAOC,QAAuE,IAAvDH,EAAaD,GAAME,iBAAiBG,QAAQD,SAE3GL,EAAeO,KAAK,CAChB,IAAON,EACP,MAASA,EACT,KAAQA,EAAO,MAAQC,EAAaD,GAAMO,OAG9CT,EAAcE,GAAQC,EAAaD,GAAME,kBAG7C,IAAK,IAAMF,KAAQF,EACf,IAAK,IAAMjB,KAAQiB,EAAcE,GAAO,CAEpC,IAFoC,EAE9BQ,EAAc,GAFgB,cAGjBV,EAAcE,GAAMnB,IAHH,IAGpC,2BAA8C,CAAC,IAApC4B,EAAmC,QACpCA,KAAQC,GACdF,EAAYF,KAAK,CACb,IAAOG,EACP,MAASA,EACT,KAAQA,EAAO,MAAQC,EAAoBD,GAAMF,QARrB,gCAWpCT,EAAcE,GAAMnB,GAAQ2B,EAOpC,IAAMG,EAAY,SAACX,GACf,OAAMA,KAAQF,EAKVA,EAAcE,GAAMK,QAAQD,OAAe,CA5CnC,EA4C6CN,EAAcE,GAAMK,SACzEP,EAAcE,GAAMY,OAAOR,OAAe,CA9CnC,EA8C4CN,EAAcE,GAAMG,QACpE,CAhDI,EAgDKL,EAAcE,GAAMG,SANhCd,QAAQC,IAAI,2BAA4BU,GACjC,KAQTa,EAAY,SAACb,GACf,OAAMA,KAAQF,EAKPA,EAAcE,GAAMY,QAJvBvB,QAAQC,IAAI,2BAA4BU,GACjC,KA4GAc,E,4MArGXC,MAAQ,CACJhB,eAAgBA,EAChBiB,aAAc,GACdC,aAAc,GAEdC,iBAAiB,EACjBC,mBAAmB,EAEnBC,WAAY,KACZC,WAAY,KACZC,aAAc,KAEdC,UAAW,SACXC,YAAa,O,EAGjBC,cAAgB,SAAC/B,EAAGgC,GAAa,IAAD,EACLf,EAAUe,EAAQC,OADb,mBACrB9C,EADqB,KACfsB,EADe,KAE5Bd,QAAQC,IAAIoC,EAAQC,OACpB,EAAKC,SAAS,CACVR,WAAYM,EAAQC,MAEpBN,WAAY,KACZH,iBAAiB,EACjBF,aAAcb,EACdoB,UAAW,eAEXD,aAAc,KACdH,mBAAmB,EACnBF,aAAc,GACdO,YAAa,QAzFT,IA4FJ3C,EAAkB,EAAK+C,SAAS,CAACL,UAAW,kBA9FzC,IA+FE1C,EAAiB,EAAK+C,SAAS,CAACL,UAAW,iBAEhD,EAAKK,SAAS,CACVL,UAAW,eACXC,YAAa,eACbP,aAAcJ,EAAUa,EAAQC,OAChCR,mBAAmB,K,EAK/BU,cAAgB,SAACnC,EAAGe,GAChB,EAAKmB,SAAS,CACVP,WAAYZ,EAAKkB,S,EAIzBG,gBAAkB,SAACpC,EAAGqC,GAClB,EAAKH,SAAS,CACVN,aAAcS,EAAMJ,S,EAI5BK,UAAY,WACR3C,QAAQC,IAAI,iBAEZD,QAAQC,IAAI,EAAKyB,MAAMK,WAAY,EAAKL,MAAMM,WAAY,EAAKN,MAAMO,e,uDAIrE,OAAO,oCACH,kBAACW,EAAA,EAAD,CACIC,WAAS,EACTC,QAAM,EACNC,SAAUC,KAAKZ,cACfa,QAAUD,KAAKtB,MAAMhB,eACrBwC,SAAO,EACPC,YAAa,mBACd,IACH,kBAACP,EAAA,EAAD,CACIC,WAAS,EACTC,QAAM,EACNC,SAAUC,KAAKR,cACfS,QAAUD,KAAKtB,MAAMC,aACrByB,SAAWJ,KAAKtB,MAAMG,gBACtBS,MAAQU,KAAKtB,MAAMM,WACnBmB,YAAcH,KAAKtB,MAAMQ,YAC1B,IACH,kBAACU,EAAA,EAAD,CACIC,WAAS,EACTC,QAAM,EACNC,SAAUC,KAAKP,gBACfQ,QAAUD,KAAKtB,MAAME,aACrBwB,SAAWJ,KAAKtB,MAAMI,kBACtBQ,MAAQU,KAAKtB,MAAMO,aACnBkB,YAAcH,KAAKtB,MAAMS,cAE7B,6BACI,kBAACkB,EAAA,EAAD,CACIC,QAASN,KAAKL,UACd1D,MAAO,CAACsE,UAAW,SAFvB,gC,GA7FcC,a,qDC7DxBC,EAAU,CACZ,CAAEC,IAAK,KAAMpB,MAAO,KAAMqB,KAAM,KAAMC,KAAM,eAC5C,CAAEF,IAAK,KAAMpB,MAAO,KAAMqB,KAAM,KAAMC,KAAM,iBAC5C,CAAEF,IAAK,KAAMpB,MAAO,KAAMqB,KAAM,KAAMC,KAAM,WAC5C,CAAEF,IAAK,KAAMpB,MAAO,KAAMqB,KAAM,KAAMC,KAAM,WAC5C,CAAEF,IAAK,KAAMpB,MAAO,KAAMqB,KAAM,KAAMC,KAAM,kBAC5C,CAAEF,IAAK,KAAMpB,MAAO,KAAMqB,KAAM,KAAMC,KAAM,WAC5C,CAAEF,IAAK,KAAMpB,MAAO,KAAMqB,KAAM,KAAMC,KAAM,UAC5C,CAAEF,IAAK,KAAMpB,MAAO,KAAMqB,KAAM,KAAMC,KAAM,YAC5C,CAAEF,IAAK,KAAMpB,MAAO,KAAMqB,KAAM,KAAMC,KAAM,WAC5C,CAAEF,IAAK,KAAMpB,MAAO,KAAMqB,KAAM,KAAMC,KAAM,aAC5C,CAAEF,IAAK,KAAMpB,MAAO,KAAMqB,KAAM,KAAMC,KAAM,WAC5C,CAAEF,IAAK,KAAMpB,MAAO,KAAMqB,KAAM,KAAMC,KAAM,SAC5C,CAAEF,IAAK,KAAMpB,MAAO,KAAMqB,KAAM,KAAMC,KAAM,aAC5C,CAAEF,IAAK,KAAMpB,MAAO,KAAMqB,KAAM,KAAMC,KAAM,WAC5C,CAAEF,IAAK,KAAMpB,MAAO,KAAMqB,KAAM,KAAMC,KAAM,cAC5C,CAAEF,IAAK,KAAMpB,MAAO,KAAMqB,KAAM,KAAMC,KAAM,WAC5C,CAAEF,IAAK,KAAMpB,MAAO,KAAMqB,KAAM,KAAMC,KAAM,WAC5C,CAAEF,IAAK,KAAMpB,MAAO,KAAMqB,KAAM,KAAMC,KAAM,cAC5C,CAAEF,IAAK,KAAMpB,MAAO,KAAMqB,KAAM,KAAMC,KAAM,YAC5C,CAAEF,IAAK,KAAMpB,MAAO,KAAMqB,KAAM,KAAMC,KAAM,WAC5C,CAAEF,IAAK,KAAMpB,MAAO,KAAMqB,KAAM,KAAMC,KAAM,WAC5C,CAAEF,IAAK,KAAMpB,MAAO,KAAMqB,KAAM,KAAMC,KAAM,UAC5C,CAAEF,IAAK,KAAMpB,MAAO,KAAMqB,KAAM,KAAMC,KAAM,UAwEjCC,EArEC,SAAC9D,GACb,OACI,kBAAC+D,EAAA,EAAD,CAAW7E,MAAO,CAAC8E,YAAa,OAAQC,aAAc,SAElD,kBAACC,EAAA,EAAD,CAAMC,QAAQ,aAAaC,WAAS,GAChC,kBAACF,EAAA,EAAKG,IAAN,KACI,kBAACN,EAAA,EAAD,KACI,kBAACO,EAAA,EAAD,CAAQC,GAAG,KAAKC,UAAU,SAAStF,MAAO,CAACsE,UAAW,QAAtD,sBACA,kBAAC,EAAD,QAIR,kBAACU,EAAA,EAAKG,IAAN,KACI,kBAACN,EAAA,EAAD,KACI,kBAACO,EAAA,EAAD,CAAQC,GAAG,KAAKC,UAAU,UAA1B,uBACA,kBAACF,EAAA,EAAD,CAAQC,GAAG,KAAKrF,MAAO,CAACuF,aAAc,IAAtC,wBACA,kBAAC5B,EAAA,EAAD,CACI6B,OAAK,EACL5B,WAAS,EACTC,QAAM,EACN4B,UAAQ,EACRzB,QAASQ,EACTN,YAAY,mBAGhB,kBAACkB,EAAA,EAAD,CAAQC,GAAG,KAAKrF,MAAO,CAACuF,aAAc,IAAtC,wBACA,kBAAC5B,EAAA,EAAD,CACI6B,OAAK,EACL5B,WAAS,EACTC,QAAM,EACN4B,UAAQ,EACRzB,QAASQ,EACTN,YAAY,mBAGhB,kBAACkB,EAAA,EAAD,CAAQC,GAAG,KAAKrF,MAAO,CAACuF,aAAc,IAAtC,wBACA,kBAAC5B,EAAA,EAAD,CACI6B,OAAK,EACL5B,WAAS,EACTC,QAAM,EACN4B,UAAQ,EACRzB,QAASQ,EACTN,YAAY,qBAKxB,kBAACW,EAAA,EAAD,CAAWS,UAAU,UACjB,kBAAC,IAAD,CAAUI,SAAS,kBAEf,kBAACtB,EAAA,EAAD,CACIuB,SAAS,WACTC,MAAM,OAEN,kBAACxB,EAAA,EAAOyB,QAAR,CAAgBC,SAAO,GAAvB,2BACA,kBAAC1B,EAAA,EAAOyB,QAAR,CAAgBE,QAAM,GAClB,kBAACC,EAAA,EAAD,CAAM/D,KAAK,sB,yBClFtBgE,E,uKACN,IAAD,OACN,OACI,kBAACpB,EAAA,EAAD,KACI,kBAAC,IAAD,CAAWqB,YAAanC,KAAKjD,MAAMqF,KAAKzF,GAAI0F,MAAOrC,KAAKjD,MAAMsF,QACzD,SAAAC,GAAQ,OACL,6BACI,yCACQA,EAASC,eACTD,EAASE,gBAFjB,CAGIC,IAAKH,EAASI,WAEd,kBAACC,EAAA,EAAD,KACK,EAAK5F,MAAMqF,KAAKQ,UAGxBN,EAASnC,qB,GAhBJ0C,IAAMrC,WCEnBsC,E,uKACN,IAAD,OACN,OACI,kBAAChC,EAAA,EAAD,KACI,kBAACO,EAAA,EAAD,CAAQC,GAAG,MACNtB,KAAKjD,MAAMgG,OAAOC,OAEvB,kBAAC,IAAD,CAAWC,YAAajD,KAAKjD,MAAMgG,OAAOpG,KACrC,SAAA2F,GAAQ,OACL,uCAEIG,IAAKH,EAASI,UACVJ,EAASY,gBAEZ,EAAKnG,MAAMoG,MAAMC,KAAI,SAAChB,EAAMC,GAAP,OAAiB,kBAAC,EAAD,CAAM3B,IAAK0B,EAAKzF,GAAIyF,KAAMA,EAAMC,MAAOA,OAC7EC,EAASnC,qB,GAfF0C,IAAMrC,WCEpC6C,EAAc,CAChBF,MAAO,CACH,SAAY,CAACxG,GAAI,WAAYiG,QAAS,YACtC,SAAY,CAACjG,GAAI,WAAYiG,QAAS,YACtC,SAAY,CAACjG,GAAI,WAAYiG,QAAS,YACtC,SAAY,CAACjG,GAAI,WAAYiG,QAAS,YACtC,SAAY,CAACjG,GAAI,WAAYiG,QAAS,aAG1CU,QAAS,CACL,cAAe,CACX3G,GAAI,KACJqG,MAAO,cACPO,QAAS,CAAC,WAAY,WAAY,WAAY,WAAY,aAE9D,SAAU,CACN5G,GAAI,KACJqG,MAAO,SACPO,QAAS,CAAC,WAAY,WAAY,WAAY,WAAY,aAE9D,SAAU,CACN5G,GAAI,KACJqG,MAAO,SACPO,QAAS,CAAC,WAAY,WAAY,WAAY,WAAY,aAE9D,SAAU,CACN5G,GAAI,KACJqG,MAAO,SACPO,QAAS,CAAC,WAAY,WAAY,WAAY,WAAY,cAIlEC,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAEvBC,YAAa,CAAC,cAAe,SAAU,SAAU,WAmDtCC,E,4MA/CXhF,MAAQ2E,E,EAERM,UAAY,SAAAC,GACR5G,QAAQC,IAAI,kB,uDAGN,IAAD,OACL,OACI,kBAAC4G,EAAA,EAAD,KACI,kBAAC/C,EAAA,EAAD,KACI,kBAACO,EAAA,EAAD,CAAQC,GAAG,KAAKC,UAAU,SAAStF,MAAO,CAACsE,UAAW,SAAtD,oBACA,oJACA,4BACI,yDACA,wEACA,4EACA,gFAGJ,qGAEA,2BAAG,+HAEFP,KAAKtB,MAAM8E,MAAMJ,KAAI,SAAAI,GAAK,OACvB,kBAAC,IAAD,CAAiBG,UAAW,EAAKA,WAC7B,kBAAC1C,EAAA,EAAD,CAAMqC,QAAS,GACV,EAAK5E,MAAM+E,YAAYL,KAAI,SAAAU,GACxB,IAAMf,EAAS,EAAKrE,MAAM4E,QAAQQ,GAC5BX,EAAQJ,EAAOQ,QAAQH,KAAI,SAAAW,GAAM,OAAI,EAAKrF,MAAMyE,MAAMY,MAE5D,OACI,kBAAC9C,EAAA,EAAK6B,OAAN,KACI,kBAACe,EAAA,EAAD,KACI,kBAAC,EAAD,CAAQnD,IAAKqC,EAAOpG,GAAIoG,OAAQA,EAAQI,MAAOA,oB,GAlCnEN,IAAMrC,W,yBC1CnB,SAASwD,GAAkBC,EAAUC,EAAeC,EAAeC,EAAiBC,EAAgB9G,GAgD/G,OA/CoB0G,EAASb,KAAI,SAAC/F,GAE9B,GAAIiH,YAAOjH,GACP,OAAI8G,EAAcI,eAAelH,EAAEV,IAC3BY,EAAWgH,eAAelH,EAAEV,IAAY,6BAAIU,GAAX,IAAcpB,MAAM,6BAAKoB,EAAEpB,OAAR,IAAeuI,OAAQ,MAAOC,YAAa,EAAGrI,QAAS,IAAIwF,UAAU,IACxH,6BAAWvE,GAAX,IAAcpB,MAAM,6BAAKoB,EAAEpB,OAAR,IAAeuI,OAAQ,MAAOC,YAAa,EAAGrI,QAAS,IAAIwF,UAAU,IACtFyC,EAAeE,eAAelH,EAAEV,IACnCY,EAAWgH,eAAelH,EAAEV,IAAY,6BAAIU,GAAX,IAAcpB,MAAM,6BAAKoB,EAAEpB,OAAR,IAAeuI,OAAQ,OAAQC,YAAa,IAAKrI,QAAS,IAAIwF,UAAU,IAC3H,6BAAWvE,GAAX,IAAcpB,MAAM,6BAAKoB,EAAEpB,OAAR,IAAeuI,OAAQ,OAAQC,YAAa,EAAGrI,QAAS,KAAMwF,UAAU,IACzFrE,EAAWgH,eAAelH,EAAEV,IAC5B,6BAAIU,GAAX,IAAcpB,MAAM,6BAAKoB,EAAEpB,OAAR,IAAeuI,OAAQ,SAAUC,YAAa,IAAKrI,QAAS,IAAIwF,UAAU,IAEtF,6BAAIvE,GAAX,IAAcpB,MAAM,6BAAKoB,EAAEpB,OAAR,IAAeuI,OAAQ,OAAQC,YAAa,EAAGrI,QAAS,KAAMwF,UAAU,IAKnG,GAAIsC,EAAcK,eAAelH,EAAEV,IAAK,CACpC,GAA2B,UAAvBU,EAAEpB,MAAMyI,WAAwB,CAEhC,IAAMC,EAAmBtH,EAAEpB,MAAM4F,MACjC,OAAO,6BAAIxE,GAAX,IAAcpB,MAAM,6BAAKoB,EAAEpB,OAAR,IAAe4F,MAAO,QAAS6C,WAAYC,EAAkBC,OAAQ,oBAGxF,OAAO,6BAAIvH,GAAX,IAAcpB,MAAM,6BAAKoB,EAAEpB,OAAR,IAAe2I,OAAQ,oBAE3C,GAAIR,EAAgBG,eAAelH,EAAEV,IAAK,CAC7C,GAA2B,UAAvBU,EAAEpB,MAAMyI,WAER,OAAO,gBAAIrH,GAGX,IAAMwH,EAAaxH,EAAEpB,MAAMyI,WAC3B,OAAO,6BAAIrH,GAAX,IAAcpB,MAAM,6BAAKoB,EAAEpB,OAAR,IAAe4F,MAAOgD,EAAYH,WAAY,QAASE,OAAQ,oBAGtF,GAA2B,UAAvBvH,EAAEpB,MAAMyI,WAAwB,CAEhC,IAAMC,EAAmBtH,EAAEpB,MAAM4F,MACjC,OAAO,6BAAIxE,GAAX,IAAcpB,MAAM,6BAAKoB,EAAEpB,OAAR,IAAe4F,MAAO,QAAS6C,WAAYC,EAAkBC,OAAQ,uBAGxF,OAAO,6BAAIvH,GAAX,IAAcpB,MAAM,6BAAKoB,EAAEpB,OAAR,IAAe2I,OAAQ,0B,cCnB1D,I,GAAIxH,GAAe0H,EAAQ,KACvBC,GAAY3H,GAAawH,QAAO,SAAAvH,GAAC,OAAI2H,YAAO3H,MAC5C4H,GAAY7H,GAAawH,QAAO,SAAAvH,GAAC,OAAIiH,YAAOjH,MAC5C6G,GAAgB,CAChB,OAAU,GAEVC,GAAgB,GAChBC,GAAkB,GAClBC,GAAiB,GACjB9G,GAAa,G,eAGEwH,I,IAAnB,8BAA8B,CAAC,IAApB7H,GAAmB,SAC1B,GAAIgH,GAAcK,eAAerH,GAAKP,IAAK,CACvC,GAA0B,OAAtBO,GAAKX,KAAK2I,QAAkB,SADO,sBAEZhI,GAAKX,KAAK2I,SAFE,IAEvC,8BAA8C,CAAC,IAApCC,GAAmC,SAC1Cd,GAAe,IAAMnH,GAAKP,GAAK,IAAMwI,IAAgB,GAHlB,wCAKhCC,aAAmBlI,GAAM6H,MAChCX,GAAgBlH,GAAKP,IAAM,I,kCAInC,I,GAAI0I,GAAkBP,EAAQ,KAC1BQ,GAAiB,G,eACDD,I,IAApB,8BAAqC,CAAC,IAAD,GAA1BE,GAA0B,wBACTA,IADS,IACjC,8BAA+B,CAAC,IAArBC,GAAoB,SAC3BF,GAAeE,IAAa,GAFC,oC,kCAerCpI,GAAe4G,GAAkB5G,GAAc8G,GAAeC,GAAeC,GAAiBC,GAAgB9G,IAG9G,IAAMkI,GAAS,SAACC,GACZA,EAAkBC,UADgB,oBAEhBN,IAFgB,IAElC,2BAAmC,CAAC,IAAD,EAA1BE,EAA0B,QACzBK,EAAOL,EAAMM,MADY,cAGZzI,IAHY,IAG/B,2BAAiC,CAAC,IAAzB0I,EAAwB,QAC7B,GAAIF,IAASE,EAAOnJ,GAAI,CACpBmJ,EAAOC,UAAW,EADE,oBAIH3I,IAJG,IAIpB,2BAA+B,CAAC,IAAvBI,EAAsB,QACvBwH,YAAOxH,KACPA,EAAKwI,SAAWJ,GAAQpI,EAAKyI,SAAWL,IACxC5I,QAAQC,IAAI,UAAYO,EAAKb,IAC7Ba,EAAKuI,UAAW,KARJ,gCAWpB,QAfuB,gCAkB/BR,EAAMtH,KAAK2H,IApBmB,kCAwBhCM,GAAY,CACdC,QAASC,EACTC,QAASC,EACTC,QAASC,GAGPC,GAAW,WAAO,IA2GhBC,EA3Ge,EACaC,mBAASvJ,IADtB,mBACZ6G,EADY,KACF2C,EADE,OAEeD,oBAAS,GAFxB,mBAEZE,EAFY,KAEDC,EAFC,OAGeH,qBAHf,mBAGZI,EAHY,KAGDC,EAHC,OAImBL,oBAAS,GAJ5B,mBAKfM,GALe,UAKF,GACbC,EAAmB,GAEjBC,EAAiB,SAACC,GAKpB9J,EAAqBC,IAIjB6G,GAAgBG,eAAe6C,EAAQzK,ICjHpC,SAAoBsH,EAAU/G,EAAMgH,EAAeC,EAAeC,EAAiBC,GAM9F,GALAH,EAAchH,EAAKP,IAAM,SAClByH,EAAgBlH,EAAKP,IAIe,OAAvCO,EAAKX,KAAK8K,WAAWC,cAAwB,CAAC,IAAD,gBACxBpK,EAAKX,KAAK8K,WAAWC,eADG,IAC7C,2BAAyD,CAAC,IAA/CC,EAA8C,QACjDlD,EAAeE,eAAe,IAAMgD,EAAS,IAAMrK,EAAKP,MACxDwH,EAAc,IAAMoD,EAAS,IAAMrK,EAAKP,IAAM,SACvC0H,EAAe,IAAMkD,EAAS,IAAMrK,EAAKP,MAJX,iCAUjD,GAA0B,OAAtBO,EAAKX,KAAK2I,QAAkB,CAAC,IAAD,gBACDhI,EAAKX,KAAK2I,SADT,IAC5B,2BAA8C,CAAC,IAApCC,EAAmC,QAEtCjB,EAAcK,eAAeY,GAE7BhB,EAAc,IAAMjH,EAAKP,GAAK,IAAMwI,GAAgB,EAIpDd,EAAe,IAAMnH,EAAKP,GAAK,IAAMwI,GAAgB,GATjC,kCDkGxBqC,CAAWvD,EAAUmD,EAASlD,GAAeC,GAAeC,GAAiBC,IACtEH,GAAcK,eAAe6C,EAAQzK,KExGzC,SAAsBsH,EAAU/G,EAAMgH,EAAeC,EAAeC,EAAiBC,UAEzFH,EAAchH,EAAKP,IAE1B,IADA,IAAI8K,EAAgB,CAACvK,EAAKP,IACM,IAAzB8K,EAAc1J,QAAc,CAE/B,IAAM2J,EAAUvK,EAAWsK,EAAcE,QAAS1D,GAIlD,GAA8C,OAA1CyD,EAAQnL,KAAK8K,WAAWC,cAAwB,CAAC,IAAD,gBAC3BI,EAAQnL,KAAK8K,WAAWC,eADG,IAChD,2BAA4D,CAAC,IAAlDC,EAAiD,QACpDrD,EAAcK,eAAegD,IACzBpD,EAAcI,eAAe,IAAMgD,EAAS,IAAMG,EAAQ/K,aACnDwH,EAAc,IAAMoD,EAAS,IAAMG,EAAQ/K,IAClD0H,EAAe,IAAMkD,EAAS,IAAMG,EAAQ/K,IAAM,IALd,iCAuBpD,GAXMyI,aAAmBsC,EAASxD,IAM1BA,EAAcK,eAAemD,EAAQ/K,YAAYuH,EAAcwD,EAAQ/K,IAC3EyH,EAAgBsD,EAAQ/K,IAAM,GAL1ByH,EAAgBG,eAAemD,EAAQ/K,WAAYyH,EAAgBsD,EAAQ/K,IACtEuH,EAAcK,eAAemD,EAAQ/K,YAAYuH,EAAcwD,EAAQ/K,IAQvD,OAAzB+K,EAAQnL,KAAK2I,QAAkB,CAAC,IAAD,gBACJwC,EAAQnL,KAAK2I,SADT,IAC/B,2BAAiD,CAAC,IAAvCC,EAAsC,QACvCjB,EAAcK,eAAemD,EAAQ/K,MAEnC0H,EAAeE,eAAe,IAAMmD,EAAQ/K,GAAK,IAAMwI,UAAsBd,EAAe,IAAMqD,EAAQ/K,GAAK,IAAMwI,GAChHhB,EAAcI,eAAe,IAAMmD,EAAQ/K,GAAK,IAAMwI,WAAsBhB,EAAc,IAAMuD,EAAQ/K,GAAK,IAAMwI,KAG5HjB,EAAcK,eAAeY,IAAiBf,EAAgBG,eAAeY,KAC7EsC,EAAcxJ,KAAKkH,IATI,mCFwE/ByC,CAAa3D,EAAUmD,EAASlD,GAAeC,GAAeC,GAAiBC,IGpH5E,SAAuBJ,EAAUC,EAAeC,EAAeC,EAAiBC,GAM3F,IAFA,IAAIwD,EAAe,GAEnB,MAD2BC,OAAOC,KAAK1D,GACvC,eAAqC,CAAhC,IAAI7G,EAAI,KAEHyI,EAASzI,EAAKwK,MAAM,KAAK,GAExB9D,EAAcK,eAAe0B,IAAe7B,EAAgBG,eAAe0B,KAC9E4B,EAAarK,EAAKwK,MAAM,KAAK,IAAM,GAU3C,IANA,IAMA,MANyBF,OAAOC,KAAKF,GAMrC,eAAuC,CAAlC,IAAMI,EAAM,KAGP/K,EAAOC,EAAW8K,EAAQhE,GAG5BmB,aAAmBlI,EAAMgH,GACzBE,EAAgB6D,GAAU,EAEtB7D,EAAgBG,eAAe0D,WAAgB7D,EAAgB6D,IH2FvEC,CAAcjE,EAAUC,GAAeC,EAAeC,GAAiBC,IAavEuC,EAAY5C,GAAkBC,EAAUC,GAAeC,GAAeC,GAAiBC,GAAgB9G,MAGrG4K,EAAkB,SAACf,GAIrBR,EI5IO,SAAuB1J,EAAM+G,EAAUmE,EAAOlE,EAAeC,EAAeC,EAAiBC,EAAgB9G,EAAY8H,GACpIrI,QAAQC,IAAI,kBACZD,QAAQC,IAAIoI,GACZrI,QAAQC,IAAIC,EAAKP,IACjB,IAJqJ,EAI/I0L,EAAW,aAAOpE,GAJ6H,cAKnIoB,GALmI,IAKrJ,2BAAmC,CAAC,IAA3BE,EAA0B,QAE/B,GADAvI,QAAQC,IAAI,WAAYsI,GACpBA,EAAM+C,SAASpL,EAAKP,IAAK,CACzBK,QAAQC,IAAI,6BACZD,QAAQC,IAAIsI,GAGZ,IAAMgD,EAAahD,EAAMoC,QACzBpC,EAAMtH,KAAKsK,GAGX,IAAMC,EAAYjD,EAAM,GAExBvI,QAAQC,IAAIsL,GACZvL,QAAQC,IAAIuL,GAZa,oBAgBXvE,GAhBW,IAgBzB,2BAAwB,CAAC,IAAhB5G,EAAe,QAChBA,EAAEV,KAAO4L,GACTvL,QAAQC,IAAII,GACZL,QAAQC,IAAI,UACZD,QAAQC,IAAIsL,GACZlL,EAAE0I,UAAW,EACb/I,QAAQC,IAAII,IACLA,EAAEV,KAAO6L,IAChBxL,QAAQC,IAAII,GACZL,QAAQC,IAAI,aACZD,QAAQC,IAAIuL,GACZnL,EAAE0I,UAAW,EACb/I,QAAQC,IAAII,KA5BK,gCAgCrB6G,EAAcK,eAAegE,YACtBrE,EAAcqE,GACrBrE,EAAcsE,GAAa,GAE3BpE,EAAgBG,eAAegE,YACxBnE,EAAgBmE,GACvBnE,EAAgBoE,GAAa,GAMjC,IA5CyB,EA4CrBC,EAAYC,YAAkB,CAACxL,GAAOkL,GACtCO,EAAe,GA7CM,cA8CFF,GA9CE,IA8CzB,2BAAkC,CAAC,IAAD,EAAvBG,EAAuB,sBACXP,GADW,IAC9B,2BAAgC,CAAC,IAAtB7K,EAAqB,QAC5B,GAAIoL,EAASjM,KAAOa,EAAKb,GAAI,CACzBa,EAAKuI,UAAW,EAChB/I,QAAQC,IAAI,SAAUO,EAAKb,IAG3B,IAAIkM,EAAUD,EAASjM,GAAGmM,QAAQP,EAAYC,GAC9CxL,QAAQC,IAAI,UAAW4L,GAGnB1E,EAAcI,eAAeqE,EAASjM,aAC/BwH,EAAcyE,EAASjM,IAC9BwH,EAAc0E,GAAW,GAGzBxE,EAAeE,eAAeqE,EAASjM,aAChC0H,EAAeuE,EAASjM,IAC/B0H,EAAewE,GAAW,GAG1BtL,EAAWgH,eAAeqE,EAASjM,aAC5BY,EAAWqL,EAASjM,IAC3BY,EAAWsL,GAAW,GAG1BF,EAAa1K,KAAK4K,GAClB,QA3BsB,kCA9CT,gCA+EzB,cAAsBF,EAAtB,eAAoC,CAA/B,IAA+B,EAAzBE,EAAO,KAAkB,cACbR,GADa,IAChC,2BAAgC,CAAC,IAAtB7K,EAAqB,QAC5B,GAAIqL,IAAYrL,EAAKb,GAAI,CACrBK,QAAQC,IAAI4L,GACZ,IAAME,EAAa5L,EAAWK,EAAKwI,OAAQ/B,GACrC+E,EAAa7L,EAAWK,EAAKyI,OAAQhC,GACrC8E,EAAWhD,UAAeiD,EAAWjD,WACvCvI,EAAKuI,UAAW,GAEpB,QATwB,iCAapC,QAnG6I,gCAuGrJ,OAAOsC,EJqCSY,CAAc7B,EAASnD,EAAUgB,GAAWf,GAAeC,GAAeC,GAAiBC,GAAgB9G,GAAY8H,KACnIuB,EAAY5C,GAAkBC,EAAUC,GAAeC,GAAeC,GAAiBC,GAAgB9G,MA8DvGsJ,IACAH,EAAe,kBAAC5J,EAAD,CAAWI,KAAM6J,KAQpC,OACI,oCACI,kBAAC9F,EAAA,EAAD,CAAMqC,QAAS,EAAGpC,SAAO,GACrB,kBAACD,EAAA,EAAK6B,OAAN,CAAaoG,MAAM,MACf,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIjF,SAAUA,EACVhI,MAAO,CAACiN,MAAO,OAAQC,OAAQ,QAC/B1D,OAAQA,GACRS,UAAWA,GACXkD,kBAAkB,EAClBC,eA7ED,SAACC,EAAOlC,GAC3BpK,QAAQC,IAAI,kBACRqH,YAAO8C,IACQ,WAAfA,EAAQzK,KACLyH,GAAgBG,eAAe6C,EAAQzK,KAAWuH,GAAcK,eAAe6C,EAAQzK,OAK1F2I,GAAef,eAAe6C,EAAQzK,IAEnB,MADnBsK,EAEIC,EAAmBqC,YAAW,WAC1BtC,EAAa,EACbE,EAAeC,KAChB,KACmB,IAAfH,IACPuC,aAAatC,GACbD,EAAa,EACbkB,EAAgBf,IAIpBD,EAAeC,KAuDCqC,QAAS,GAETC,gBAAgB,EAChBC,iBA3CC,SAACL,EAAOpM,GAE7B4J,GAAa,GACbE,EAAa9J,GK5LN,SAA4BA,EAAM+G,EAAUC,EAAeC,EAAeC,EAAiBC,EAAgB9G,GACtH,GAA2C,OAAvCL,EAAKX,KAAK8K,WAAWC,cAAzB,CADkI,oBAG7GpK,EAAKX,KAAK8K,WAAWC,eAHwF,IAGlI,2BAAyD,CAAC,IAA/CC,EAA8C,QACjDpD,EAAcI,eAAe,IAAMgD,EAAS,IAAMrK,EAAKP,MACvDY,EAAW,IAAMgK,EAAS,IAAMrK,EAAKP,IAAM,IAL+E,gCAWlI,IADA,IAAIiN,EAAc,CAAC1M,EAAKP,IACM,IAAvBiN,EAAY7L,QAAc,CAC7B,IAAM2J,EAAUvK,EAAWyM,EAAYjC,QAAS1D,GAEhD,GAAgB,OAAZyD,GAE0C,OAA1CA,EAAQnL,KAAK8K,WAAWC,cAA5B,CAL6B,oBAORI,EAAQnL,KAAK8K,WAAWC,eAPhB,IAO7B,2BAA4D,CAAC,IAAlDC,EAAiD,QACnDpD,EAAcI,eAAe,IAAMgD,EAAS,IAAMG,EAAQ/K,MAC3DY,EAAW,IAAMgK,EAAS,IAAMG,EAAQ/K,IAAM,GAM5CuH,EAAcK,eAAegD,IAAcnD,EAAgBG,eAAegD,IAC5EqC,EAAY3L,KAAKsJ,IAhBI,oCLqL7BsC,CAAmB3M,EAAM+G,EAAUC,GAAeC,GAAeC,GAAiBC,EAAgB9G,IAElGqJ,EAAY5C,GAAkBC,EAAUC,GAAeC,GAAeC,GAAiBC,GAAgB9G,MAmCnFuM,iBAhCC,SAACR,EAAOpM,GAC7B4J,GAAa,GACbxJ,EAAqBC,IACrBqJ,EAAY5C,GAAkBC,EAAUC,GAAeC,GAAeC,GAAiBC,GAAgB9G,MA8BnFwM,mBAAmB,EACnBC,kBAtBE,SAACV,EAAOpM,GAC9BF,QAAQC,IAAI,cACZD,QAAQC,IAAIqM,MAuBK5C,IAIT,kBAACzF,EAAA,EAAK6B,OAAN,CAAaoG,MAAM,KACf,kBAAC,EAAD,QAKR,yBAAKvM,GAAG,iBACJ,kBAAC,EAAD,SAKhB8J,GAASwD,iBAAkB,EAEZxD,UM9PXyD,GAAkB,CAClB,CAACvN,GAAI,IAAKV,MAAO,CAACG,QAAS,GAAIK,SAAU,CAAC0N,EAAG,EAAGC,EAAG,GAAI7N,KAAM,CAAC8N,MAAO,WAAY7N,KAAM,WACvF,CAACG,GAAI,IAAKV,MAAO,CAACG,QAAS,GAAIK,SAAU,CAAC0N,EAAG,EAAGC,EAAG,KAAM7N,KAAM,CAAC8N,MAAO,SAAU7N,KAAM,WACvF,CAACG,GAAI,IAAKV,MAAO,CAACG,QAAS,GAAIK,SAAU,CAAC0N,EAAG,EAAGC,GAAI,KAAM7N,KAAM,CAAC8N,MAAO,SAAU7N,KAAM,WAExF,CAACG,GAAI,OAAQqJ,OAAQ,IAAKC,OAAQ,IAAKzJ,KAAM,OAAQoF,UAAU,IAG7D6D,GAAS,SAACC,GACZA,EAAkBC,WA0DP2E,GAvDE,WAAO,IAAD,EACa3D,mBAASuD,IADtB,mBACZjG,EADY,KACF2C,EADE,OAEmBD,oBAAS,GAF5B,6BA4BnB,OACI,kBAAC,WAAD,KACI,kBAAC,IAAD,CACI1C,SAAUA,EACVwB,OAAQA,GACRxJ,MAAO,CAACiN,MAAO,OAAQC,OAAQ,QAC/BE,eArBI,SAACC,EAAOlC,GACpBpK,QAAQC,IAAI,MACZ2J,GAAY,SAAC2D,GAAD,OACRA,EAAInH,KAAI,SAAC/F,GACL,OAAIA,EAAEV,KAAOyK,EAAQzK,IACjBK,QAAQC,IAAImK,GACZpK,QAAQC,IAAII,EAAEpB,MAAMG,SACbiB,GAEJA,SAaPqM,gBAAgB,GAEhB,kBAAC,IAAD,MACA,kBAAC,IAAD,CACIc,UAAa,SAAAC,GACT,MAAqB,YAAjBA,EAAElO,KAAK8N,MAA4B,MAChC,UAGf,kBAAC,IAAD,OAEJ,6BACI,4BAAQ7N,KAAK,SAAS8D,QA3ClB,WACZsG,GAAY,SAAAvJ,GAAC,OAAIA,EAAEqN,OAAO,CACtB/N,IAAKU,EAAEU,OAAO,GAAG4M,WACjBpO,KAAM,CAAC8N,MAAO,WAAahN,EAAEU,QAC7BtB,SAAU,CAAC0N,EAAGS,KAAKC,SAAWC,OAAOC,WAAYX,EAAGQ,KAAKC,SAAWC,OAAOE,oBAuCvE,4BC9BDC,G,uKAjBX,OACE,kBAAC,IAAD,CAAYC,SAAS,KACnB,6BACE,4BACE,4BAAI,kBAAC,IAAD,CAAMC,GAAG,KAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,wBAAT,0BAGN,6BACA,kBAAC,IAAD,CAAOC,KAAK,uBAAuBC,UAAW5E,KAC9C,kBAAC,IAAD,CAAO2E,KAAK,YAAYC,UAAWf,W,GAZ3B9J,aCDE8K,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtP,QAAQsP,MAAMA,EAAMC,a,u7/EErIb,SAASnH,mBAAmBlI,KAAMgH,eAC7C,GAA2C,OAAvChH,KAAKX,KAAK8K,WAAWC,cAAwB,OAAO,EACxD,GAAgD,OAA5CpK,KAAKX,KAAK8K,WAAWmF,mBAA6B,OAAO,EAQ7DxP,QAAQC,IAAIC,KAAKP,IACjB,IAAI8P,UAAYvP,KAAKX,KAAK8K,WAAWmF,mBAOrC,OANAC,UAAYA,UAAU3D,QAAQ,sBAAsB,SAAS2C,GACzD,OAAIvH,cAAcK,eAAekH,GAAe,EACpC,KAGhBzO,QAAQC,IAAIwP,aACRC,KAAKD,WAtBb,wF","file":"static/js/main.5d5af2b2.chunk.js","sourcesContent":["// For normal nodes\r\nimport React, { memo } from 'react';\r\n\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nconst style = {zIndex: -9999, pointerEvents: 'none', opacity: 0, top: '50%'};\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={style} />\r\n      <div>\r\n            <h3>{data.course_code}</h3>\r\n      </div>\r\n      <Handle type=\"source\" position=\"bottom\" style={style} />\r\n    </>\r\n  );\r\n});\r\n","// For grouping nodes\r\nimport React, { memo } from 'react';\r\n\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={{zIndex: -9999, pointerEvents: 'none', opacity: 0, top: '50%'}} />\r\n      <div>\r\n          <b>{data.id}</b>\r\n      </div>\r\n      <Handle type=\"source\" position=\"bottom\" style={{zIndex: -9999, pointerEvents: 'none', opacity: 0, bottom: '50%'}} />\r\n    </>\r\n  );\r\n});\r\n","import React, { memo } from 'react';\r\n\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={{opacity: 0, top: '50%'}} />\r\n      <div>\r\n            <b>{data.degree_name}</b>\r\n      </div>\r\n      <Handle type=\"source\" position=\"bottom\" style={{opacity: 0, bottom: '50%'}} />\r\n    </>\r\n  );\r\n});\r\n","// Displays hover text in top left corner which contains info about the course\r\nimport React from 'react';\r\nimport '../styles/hover.css';\r\n\r\nexport default function HoverInfo(props) {\r\n    console.log(props);\r\n    return (\r\n        <div id=\"hoverbox\">\r\n            <div id=\"header\">\r\n                {props.node.id}\r\n            </div>\r\n        </div>\r\n    );\r\n}","// Given an id, returns the element\r\nconst getElement = (id, elementsData) => {\r\n    console.log(\"GET ELEMENT OF \" + id);\r\n    for (var e of elementsData) {\r\n        if (e.id === id) {\r\n            return e;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport default getElement;","// HELPER FUNCTION to delete prerequisite edges\r\n// Usually used after unhovering or onclick\r\nexport default function unhoverPrerequisites(hoverEdges) {\r\n    for (var edge in hoverEdges) {\r\n        delete hoverEdges[edge];\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Button, Dropdown } from 'semantic-ui-react'\r\n\r\nimport programsJSON from \"../webscraper/programs.json\"\r\nimport specialisationsJSON from \"../webscraper/specialisations.json\"\r\n\r\nconst MAJORS = 1;\r\nconst MINORS = 2;\r\nconst HONOURS = 3;\r\n\r\nconst courseOptions = {}\r\nconst programOptions = []\r\n\r\nconsole.log(programsJSON)\r\n\r\nfor (const code in programsJSON) {\r\n    if (programsJSON[code].degrees_involved.majors.length === 0 && programsJSON[code].degrees_involved.honours.length === 0) continue;\r\n\r\n    programOptions.push({\r\n        \"key\": code,\r\n        \"value\": code,\r\n        \"text\": code + \" - \" + programsJSON[code].name\r\n    })\r\n\r\n    courseOptions[code] = programsJSON[code].degrees_involved\r\n}\r\n\r\nfor (const code in courseOptions) {\r\n    for (const type in courseOptions[code]) {\r\n\r\n        const replacement = [];\r\n        for (const spec of courseOptions[code][type]) {\r\n            if (!(spec in specialisationsJSON)) continue;\r\n            replacement.push({\r\n                \"key\": spec,\r\n                \"value\": spec,\r\n                \"text\": spec + \" - \" + specialisationsJSON[spec].name\r\n            })\r\n        }\r\n        courseOptions[code][type] = replacement;\r\n    }\r\n}\r\n\r\n// returns MAJORS if Majors but no Minors\r\n// returns MINORS if Majors and Minors exist\r\n// returns HONOURS if Honours exist\r\nconst getMajors = (code) => {\r\n    if (!(code in courseOptions)) {\r\n        console.log(\"code not found in majors\", code);\r\n        return [];\r\n    }\r\n\r\n    if (courseOptions[code].honours.length) return [HONOURS, courseOptions[code].honours];\r\n    if (courseOptions[code].minors.length) return [MINORS, courseOptions[code].majors];\r\n    return [MAJORS, courseOptions[code].majors];\r\n}\r\n\r\nconst getMinors = (code) => {\r\n    if (!(code in courseOptions)) {\r\n        console.log(\"code not found in minors\", code);\r\n        return [];\r\n    }\r\n\r\n    return courseOptions[code].minors;\r\n}\r\n\r\nclass DropdownDegrees extends Component {\r\n    state = {\r\n        programOptions: programOptions,\r\n        majorOptions: [],\r\n        minorOptions: [],\r\n\r\n        disabledPrimary: true,\r\n        disabledSecondary: true,\r\n\r\n        valProgram: null,\r\n        valPrimary: null,\r\n        valSecondary: null,\r\n\r\n        phPrimary: \"Select\",\r\n        phSecondary: \"N/A\"\r\n    }\r\n\r\n    chooseProgram = (e, program) => {\r\n        const [type, majors] = getMajors(program.value)\r\n        console.log(program.value)\r\n        this.setState({\r\n            valProgram: program.value,\r\n\r\n            valPrimary: null,\r\n            disabledPrimary: false,\r\n            majorOptions: majors,\r\n            phPrimary: \"Select Major\",\r\n\r\n            valSecondary: null,\r\n            disabledSecondary: true,\r\n            minorOptions: [],\r\n            phSecondary: \"N/A\"\r\n        })\r\n\r\n        if (type === HONOURS) this.setState({phPrimary: \"Select Honour\"})\r\n        else if (type === MAJORS) this.setState({phPrimary: \"Select Major\"})\r\n        else {\r\n            this.setState({\r\n                phPrimary: \"Select Major\",\r\n                phSecondary: \"Select Minor\",\r\n                minorOptions: getMinors(program.value),\r\n                disabledSecondary: false,\r\n            });\r\n        }\r\n    }\r\n\r\n    choosePrimary = (e, spec) => {\r\n        this.setState({\r\n            valPrimary: spec.value\r\n        })\r\n    }\r\n\r\n    chooseSecondary = (e, minor) => {\r\n        this.setState({\r\n            valSecondary: minor.value\r\n        })\r\n    }\r\n\r\n    clickDone = () => {\r\n        console.log('Running click')\r\n        // console.log(this.state)\r\n        console.log(this.state.valProgram, this.state.valPrimary, this.state.valSecondary)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <Dropdown\r\n                selection\r\n                search\r\n                onChange={this.chooseProgram}\r\n                options= {this.state.programOptions}\r\n                enabled\r\n                placeholder= 'Select Program'\r\n            />{' '}\r\n            <Dropdown\r\n                selection\r\n                search\r\n                onChange={this.choosePrimary}\r\n                options= {this.state.majorOptions}\r\n                disabled= {this.state.disabledPrimary}\r\n                value= {this.state.valPrimary}\r\n                placeholder= {this.state.phPrimary}\r\n            />{' '}\r\n            <Dropdown\r\n                selection\r\n                search\r\n                onChange={this.chooseSecondary}\r\n                options= {this.state.minorOptions}\r\n                disabled= {this.state.disabledSecondary}\r\n                value= {this.state.valSecondary}\r\n                placeholder= {this.state.phSecondary}\r\n            />\r\n            <div>\r\n                <Button\r\n                    onClick={this.clickDone}\r\n                    style={{marginTop: \"20px\"}}\r\n                >Done! Print to console</Button>\r\n            </div>\r\n        </>;\r\n    }\r\n}\r\n\r\nexport default DropdownDegrees\r\n","import React, {useState} from 'react';\r\nimport DropdownDegrees from \"./dropdownDegrees.js\"\r\nimport { Icon, Button, Container, Segment, Header, Dropdown, Grid } from 'semantic-ui-react'\r\nimport ScrollTo from \"react-scroll-into-view\"\r\n\r\nconst example = [\r\n    { key: 'af', value: 'af', flag: 'af', text: 'Afghanistan' },\r\n    { key: 'ax', value: 'ax', flag: 'ax', text: 'Aland Islands' },\r\n    { key: 'al', value: 'al', flag: 'al', text: 'Albania' },\r\n    { key: 'dz', value: 'dz', flag: 'dz', text: 'Algeria' },\r\n    { key: 'as', value: 'as', flag: 'as', text: 'American Samoa' },\r\n    { key: 'ad', value: 'ad', flag: 'ad', text: 'Andorra' },\r\n    { key: 'ao', value: 'ao', flag: 'ao', text: 'Angola' },\r\n    { key: 'ai', value: 'ai', flag: 'ai', text: 'Anguilla' },\r\n    { key: 'ag', value: 'ag', flag: 'ag', text: 'Antigua' },\r\n    { key: 'ar', value: 'ar', flag: 'ar', text: 'Argentina' },\r\n    { key: 'am', value: 'am', flag: 'am', text: 'Armenia' },\r\n    { key: 'aw', value: 'aw', flag: 'aw', text: 'Aruba' },\r\n    { key: 'au', value: 'au', flag: 'au', text: 'Australia' },\r\n    { key: 'at', value: 'at', flag: 'at', text: 'Austria' },\r\n    { key: 'az', value: 'az', flag: 'az', text: 'Azerbaijan' },\r\n    { key: 'bs', value: 'bs', flag: 'bs', text: 'Bahamas' },\r\n    { key: 'bh', value: 'bh', flag: 'bh', text: 'Bahrain' },\r\n    { key: 'bd', value: 'bd', flag: 'bd', text: 'Bangladesh' },\r\n    { key: 'bb', value: 'bb', flag: 'bb', text: 'Barbados' },\r\n    { key: 'by', value: 'by', flag: 'by', text: 'Belarus' },\r\n    { key: 'be', value: 'be', flag: 'be', text: 'Belgium' },\r\n    { key: 'bz', value: 'bz', flag: 'bz', text: 'Belize' },\r\n    { key: 'bj', value: 'bj', flag: 'bj', text: 'Benin' }\r\n]\r\n\r\nconst Sidebar = (props) => {\r\n    return (\r\n        <Container style={{paddingLeft: \"10px\", paddingRight: \"10px\"}}>\r\n\r\n            <Grid divided=\"vertically\" stretched>\r\n                <Grid.Row>\r\n                    <Container>\r\n                        <Header as=\"h3\" textAlign=\"center\" style={{marginTop: \"5px\"}}>Choose your degree</Header>\r\n                        <DropdownDegrees />\r\n                    </Container>\r\n                </Grid.Row>\r\n\r\n                <Grid.Row>\r\n                    <Container>\r\n                        <Header as=\"h3\" textAlign=\"center\">Choose your courses</Header>\r\n                        <Header as=\"h4\" style={{marginBottom: 0}}>Level 1 Core Courses</Header>\r\n                        <Dropdown\r\n                            fluid\r\n                            selection\r\n                            search\r\n                            multiple\r\n                            options={example}\r\n                            placeholder=\"Select courses\"\r\n                        />\r\n\r\n                        <Header as=\"h4\" style={{marginBottom: 0}}>Level 2 Core Courses</Header>\r\n                        <Dropdown\r\n                            fluid\r\n                            selection\r\n                            search\r\n                            multiple\r\n                            options={example}\r\n                            placeholder=\"Select courses\"\r\n                        />\r\n\r\n                        <Header as=\"h4\" style={{marginBottom: 0}}>Level 3 Core Courses</Header>\r\n                        <Dropdown\r\n                            fluid\r\n                            selection\r\n                            search\r\n                            multiple\r\n                            options={example}\r\n                            placeholder=\"Select courses\"\r\n                        />\r\n                    </Container>\r\n                </Grid.Row>\r\n\r\n                <Container textAlign=\"center\">\r\n                    <ScrollTo selector=\"#DegreePlanner\">\r\n\r\n                        <Button\r\n                            animated=\"vertical\"\r\n                            color=\"red\"\r\n                        >\r\n                            <Button.Content visible>Generate degree planner</Button.Content>\r\n                            <Button.Content hidden>\r\n                                <Icon name=\"arrow down\" />\r\n                            </Button.Content>\r\n                        </Button>\r\n                    </ScrollTo>\r\n\r\n                </Container>\r\n            </Grid>\r\n        </Container>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default Sidebar","import React from \"react\";\r\nimport { Label, Container } from 'semantic-ui-react'\r\n\r\nimport { Draggable } from \"react-beautiful-dnd\"\r\n\r\nexport default class Task extends React.Component {\r\n    render () {\r\n        return (\r\n            <Container>\r\n                <Draggable draggableId={this.props.task.id} index={this.props.index}>\r\n                    {provided => (\r\n                        <div>\r\n                            <div\r\n                                {...provided.draggableProps}\r\n                                {...provided.dragHandleProps}\r\n                                ref={provided.innerRef}\r\n                            >\r\n                                <Label>\r\n                                    {this.props.task.content}\r\n                                </Label>\r\n                            </div>\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Draggable>\r\n            </Container>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { Icon, Button, Container, Segment, Header, Dropdown, Grid } from 'semantic-ui-react'\r\n\r\nimport Task from \"./degreeplanner-task\"\r\n\r\nimport { Droppable } from \"react-beautiful-dnd\"\r\n\r\nexport default class Column extends React.Component {\r\n    render () {\r\n        return (\r\n            <Container>\r\n                <Header as=\"h3\">\r\n                    {this.props.column.title}\r\n                </Header>\r\n                <Droppable droppableId={this.props.column.id}>\r\n                    {provided => (\r\n                        <div\r\n                            // style={{padding: \"8px\"}}\r\n                            ref={provided.innerRef}\r\n                            {...provided.droppableProps}\r\n                        >\r\n                            {this.props.tasks.map((task, index) => <Task key={task.id} task={task} index={index} />)}\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n            </Container>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { Icon, Button, Container, Segment, Header, Dropdown, Grid } from 'semantic-ui-react'\r\n\r\nimport programsJSON from \"../webscraper/programs.json\"\r\nimport specialisationsJSON from \"../webscraper/specialisations.json\"\r\n\r\nimport { DragDropContext } from \"react-beautiful-dnd\"\r\nimport Column from \"./degreeplanner-column\"\r\n\r\nconst initialData = {\r\n    tasks: {\r\n        \"COMP1511\": {id: \"COMP1511\", content: \"COMP1511\"},\r\n        \"COMP1521\": {id: \"COMP1521\", content: \"COMP1521\"},\r\n        \"COMP1531\": {id: \"COMP1531\", content: \"COMP1531\"},\r\n        \"MATH1141\": {id: \"MATH1141\", content: \"MATH1141\"},\r\n        \"MATH1241\": {id: \"MATH1241\", content: \"MATH1241\"}\r\n    },\r\n\r\n    columns: {\r\n        \"Summer Term\": {\r\n            id: \"T1\",\r\n            title: \"Summer Term\",\r\n            taskIds: [\"COMP1511\", \"COMP1521\", \"COMP1531\", \"MATH1141\", \"MATH1241\"]\r\n        },\r\n        \"Term 1\": {\r\n            id: \"T1\",\r\n            title: \"Term 1\",\r\n            taskIds: [\"COMP1511\", \"COMP1521\", \"COMP1531\", \"MATH1141\", \"MATH1241\"]\r\n        },\r\n        \"Term 2\": {\r\n            id: \"T1\",\r\n            title: \"Term 2\",\r\n            taskIds: [\"COMP1511\", \"COMP1521\", \"COMP1531\", \"MATH1141\", \"MATH1241\"]\r\n        },\r\n        \"Term 3\": {\r\n            id: \"T1\",\r\n            title: \"Term 3\",\r\n            taskIds: [\"COMP1511\", \"COMP1521\", \"COMP1531\", \"MATH1141\", \"MATH1241\"]\r\n        }\r\n    },\r\n\r\n    years: [1, 2, 3, 4, 5, 6],\r\n\r\n    columnOrder: [\"Summer Term\", \"Term 1\", \"Term 2\", \"Term 3\"]\r\n}\r\n\r\nclass DegreePlanner extends React.Component {\r\n    state = initialData;\r\n\r\n    onDragEnd = result => {\r\n        console.log(\"drag finished\")\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Segment>\r\n                <Container>\r\n                    <Header as=\"h2\" textAlign=\"center\" style={{marginTop: \"50px\"}}>Plan your degree</Header>\r\n                    <p>The following degree plan has been generated based on the courses you have selected above. By default, our algorithm:</p>\r\n                    <ul>\r\n                        <li>allocates 18 UOC per term</li>\r\n                        <li>does not allocate courses in Summer Term</li>\r\n                        <li>ensures courses have their prerequisites met</li>\r\n                        <li>ensures courses can be taken in allocated terms</li>\r\n                    </ul>\r\n\r\n                    <p>Drag and drop the courses below to further customise your degree plan!</p>\r\n\r\n                    <p><em>Please note that our data is scraped from the UNSW Handbook and may have some inconsistencies.</em></p>\r\n\r\n                    {this.state.years.map(years => (\r\n                        <DragDropContext onDragEnd={this.onDragEnd}>\r\n                            <Grid columns={4}>\r\n                                {this.state.columnOrder.map(columnId => {\r\n                                    const column = this.state.columns[columnId];\r\n                                    const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\r\n\r\n                                    return (\r\n                                        <Grid.Column>\r\n                                            <Segment>\r\n                                                <Column key={column.id} column={column} tasks={tasks} />\r\n                                            </Segment>\r\n                                        </Grid.Column>\r\n                                    );\r\n                                })}\r\n                            </Grid>\r\n                        </DragDropContext>\r\n                    ))}\r\n                </Container>\r\n            </Segment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DegreePlanner","// Helper functions to highlight nodes and edges\r\n// Will highlight/unhighlight nodes based on selectedNodes dictionary\r\nimport { isEdge } from \"react-flow-renderer\";\r\n\r\nexport default function highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges) {\r\n    const newElements = elements.map((e) => {\r\n        // It is an edge\r\n        if (isEdge(e)) {\r\n            if (selectedEdges.hasOwnProperty(e.id)) {\r\n                if (hoverEdges.hasOwnProperty(e.id)) return {...e, style: {...e.style, stroke: 'red', strokeWidth: 5, opacity: 1}, animated: true};\r\n                else return {...e, style: {...e.style, stroke: 'red', strokeWidth: 5, opacity: 1}, animated: false};\r\n            } else if (potentialEdges.hasOwnProperty(e.id)) {\r\n                if (hoverEdges.hasOwnProperty(e.id)) return {...e, style: {...e.style, stroke: 'blue', strokeWidth: 2.5, opacity: 1}, animated: true};\r\n                else return {...e, style: {...e.style, stroke: 'blue', strokeWidth: 1, opacity: 0.3}, animated: false};\r\n            } else if (hoverEdges.hasOwnProperty(e.id)) {\r\n                return {...e, style: {...e.style, stroke: 'purple', strokeWidth: 2.5, opacity: 1}, animated: true};\r\n            } else {\r\n                return {...e, style: {...e.style, stroke: 'grey', strokeWidth: 1, opacity: 0.2}, animated: false};\r\n            } \r\n        }\r\n\r\n        // It is a node\r\n        if (selectedNodes.hasOwnProperty(e.id)) {\r\n            if (e.style.background === 'white') {\r\n                // It was previously a selectable node. Adjust colours accordingly\r\n                const backgroundColour = e.style.color;\r\n                return {...e, style: {...e.style, color: 'white', background: backgroundColour, filter: 'brightness(1)'}}\r\n            } else {\r\n                // It was an unselected node or an already selected node. Simply make sure its brightness is adjusted\r\n                return {...e, style: {...e.style, filter: 'brightness(1)'}};\r\n            }\r\n        } else if (selectableNodes.hasOwnProperty(e.id)) {\r\n            if (e.style.background === 'white') {\r\n                // It was already a selectable node. Do not need to adjust\r\n                return {...e};\r\n            } else {\r\n                // It was an unselected node or an already selected node. Adjust text colour and background\r\n                const textColour = e.style.background;\r\n                return {...e, style: {...e.style, color: textColour, background: 'white', filter: 'brightness(1)'}};\r\n            }\r\n        } else {\r\n            if (e.style.background === 'white') {\r\n                // It was a selectable node previously. Adjust colours accordingly\r\n                const backgroundColour = e.style.color;\r\n                return {...e, style: {...e.style, color: 'white', background: backgroundColour, filter: 'brightness(0.75)'}}; \r\n            } else {\r\n                // It was either unselected or an already selected node. Simply adjust brightness\r\n                return {...e, style: {...e.style, filter: 'brightness(0.75)'}};\r\n            }\r\n        }\r\n    })\r\n\r\n    return newElements;\r\n}","import React, {useState} from 'react';\r\nimport ReactFlow, {Background, Controls, getConnectedEdges, isNode, isEdge, useStoreState, useStoreActions, ReactFlowProvider, EdgeText} from 'react-flow-renderer';\r\n\r\nimport CustomNode1 from '../../components/customnode1.js';\r\nimport CustomNode2 from '../../components/customnode2.js';\r\nimport HeaderNode1 from '../../components/headernode1.js';\r\n\r\nimport HoverInfo from '../../components/hoverinfo.js';\r\nimport hoverPrerequisites from '../../components/hoverprerequisites.js';\r\nimport unhoverPrerequisites from '../../components/unhoverprerequisites.js';\r\n\r\nimport DropdownD from \"../../components/dropdownDegrees.js\"\r\nimport { Grid, Segment } from 'semantic-ui-react'\r\nimport Sidebar from \"../../components/sidebar.js\"\r\nimport pkg from 'semantic-ui-react/package.json'\r\n\r\nimport DegreePlanner from \"../../components/degreeplanner.js\"\r\n\r\nimport positionHelper from '../../components/positionhelper.js';\r\nimport selectNode from '../../components/selectnode.js';\r\nimport unselectNode from '../../components/unselectnode.js';\r\nimport highlightElements from '../../components/highlightelements.js';\r\nimport getSelectable from '../../components/getselectable.js';\r\nimport checkPrerequisites from '../../components/checkprerequisites';\r\nimport DropdownDegrees from '../../components/dropdownDegrees';\r\n\r\nimport exclusionSwap from '../../components/exclusionswap.js';\r\n\r\nvar elementsData = require(\"./data.json\");\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {\r\n    'SENGAH': 1\r\n}\r\nvar selectedEdges = {};\r\nvar selectableNodes = {};\r\nvar potentialEdges = {};\r\nvar hoverEdges = {};\r\n\r\n// Load up the chart with initial selectable nodes and edges\r\nfor (const node of nodesData) {\r\n    if (selectedNodes.hasOwnProperty(node.id)) {\r\n        if (node.data.unlocks === null) continue;\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n        }\r\n    } else if (checkPrerequisites(node, nodesData)) {\r\n        selectableNodes[node.id] = 1;\r\n    }\r\n}\r\n\r\nvar exclusionGroups = require(\"./data_exclusion.json\");\r\nvar exclusionNodes = {};\r\nfor (const group of exclusionGroups) {\r\n    for (const exclusion of group) {\r\n        exclusionNodes[exclusion] = 1;\r\n    }\r\n}\r\n\r\n// console.log(\"==========SelectedNodes==========\");\r\n// console.log(selectedNodes);\r\n// console.log(\"==========SelectedEdges==========\");\r\n// console.log(selectedEdges);\r\n// console.log(\"==========SelectableNodes==========\");\r\n// console.log(selectableNodes);\r\n// console.log(\"==========PotentialEdges==========\");\r\n// console.log(potentialEdges);\r\n\r\nelementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\n\r\nconst onLoad = (reactFlowInstance) => {\r\n    reactFlowInstance.fitView();\r\n    for (var group of exclusionGroups) {\r\n        const last = group.pop();\r\n    \r\n        for (var course of elementsData) {\r\n            if (last === course.id) {\r\n                course.isHidden = true;\r\n                \r\n                // Get all the edges and hide them too\r\n                for (var edge of elementsData) {\r\n                    if (isNode(edge)) continue;\r\n                    if (edge.source === last || edge.target === last) {\r\n                        console.log(\"hiding \" + edge.id);\r\n                        edge.isHidden = true;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        group.push(last);\r\n    }\r\n};\r\n\r\nconst nodeTypes = {\r\n    custom1: CustomNode1,\r\n    custom2: CustomNode2,\r\n    header1: HeaderNode1\r\n};\r\n\r\nconst BESengah = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverText, setHoverText] = useState(false);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    const [sidebarOpen, setSidebarOpen] = useState(false);\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n\r\n    const selectUnselect = (element) => {\r\n        // NOTE: Might not need this?????\r\n        // EXPLANATION: Reason we dont need it is because we have to leave node\r\n        // anyways to hover another node. But maybe good practise to have just in case\r\n        // Unhover edges which lit up on nodeMouseEnter\r\n        unhoverPrerequisites(hoverEdges);\r\n\r\n        // 1. Select the node and fill in edges.\r\n        // - Deal with unselecting nodes\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n\r\n        // 2. Determine which nodes are now selectable\r\n        // - Determine which previously selectable nodes are now unselectable\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n\r\n        // After selecting node:\r\n        /*console.log(\"==========SelectedNodes==========\");\r\n        console.log(selectedNodes);\r\n        console.log(\"==========SelectedEdges==========\");\r\n        console.log(selectedEdges);\r\n        console.log(\"==========SelectableNodes==========\");\r\n        console.log(selectableNodes);\r\n        console.log(\"==========PotentialEdges==========\");\r\n        console.log(potentialEdges);*/\r\n\r\n        // Render graph accordingly\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const toggleExclusion = (element) => {\r\n        // TODO: ARE there courses which do not \r\n        // For all immediate edges of the element, swap\r\n        // with the exclusion course\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    // ==========ONCLICK==========\r\n    const onElementClick = (event, element) => {\r\n        console.log(\"ONELEMENTCLICK\");\r\n        if (isEdge(element)) return; // Don't care about edges\r\n        if (element.id === 'SENGAH') return; // Cannot click on main node\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return; // Cannot select non selectable nodes\r\n        \r\n\r\n        // Determine double or single click for exclusion nodes\r\n        // This will prevent normal nodes from waiting the double click delay\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 200);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            // Not an exclusion node.\r\n            selectUnselect(element);\r\n        }\r\n\r\n    \r\n        /*for (var e of elements) {\r\n            if (e.id === element.id) {\r\n                e.position.x = element.position.x;\r\n                e.position.y = element.position.y;\r\n                break;\r\n            }\r\n        }*/\r\n    };\r\n    // ===========================\r\n\r\n    // ==========ONHOVER==========\r\n    const onNodeMouseEnter = (event, node) => {\r\n        // Display node information in top left\r\n        setHoverText(true);\r\n        setHoverNode(node);\r\n\r\n        // If the node is unselected, highlight prerequisite edges in purple\r\n        //if ((!selectedNodes.hasOwnProperty(node.id)) && (!selectableNodes.hasOwnProperty(node.id))) {\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        //}\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        setHoverText(false);\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    let hoverDisplay;\r\n    if (hoverText) {\r\n        hoverDisplay = <HoverInfo node={hoverNode}/>\r\n    }\r\n    // ===========================\r\n\r\n    const onNodeContextMenu = (event, node) => {\r\n        console.log(\"THE EVEENT\");\r\n        console.log(event);\r\n    }\r\n    return (\r\n        <>\r\n            <Grid columns={2} divided>\r\n                <Grid.Column width=\"12\">\r\n                    <ReactFlowProvider>\r\n                        <ReactFlow\r\n                            elements={elements}\r\n                            style={{width: '100%', height: '95vh'}}\r\n                            onLoad={onLoad}\r\n                            nodeTypes={nodeTypes}\r\n                            nodesConnectable={false}\r\n                            onElementClick={onElementClick}\r\n                            minZoom={0.1}\r\n                            //setInitTransform={TransformUpdater({x: 100, y: 100, z: 1})}\r\n                            nodesDraggable={false}\r\n                            onNodeMouseEnter={onNodeMouseEnter}\r\n                            onNodeMouseLeave={onNodeMouseLeave}\r\n                            selectNodesOnDrag={false}\r\n                            onNodeContextMenu={onNodeContextMenu}\r\n                        >\r\n                        </ReactFlow>\r\n                        {hoverDisplay}\r\n                    </ReactFlowProvider>\r\n                </Grid.Column>\r\n\r\n                <Grid.Column width=\"4\">\r\n                    <Sidebar />\r\n                    {/* <DegreePlanner/> */}\r\n                </Grid.Column>\r\n            </Grid>\r\n\r\n            <div id=\"DegreePlanner\">\r\n                <DegreePlanner />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\nBESengah.whyDidYouRender = true;\r\n\r\nexport default BESengah;","// HELPER FUNCTION for selecting nodes\r\n// Given a selectable node, highlights potential edges and fills in prereq edges\r\nimport checkPrerequisites from './checkprerequisites.js';\r\nimport getElement from './getelement.js';\r\n\r\nexport default function selectNode(elements, node, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    selectedNodes[node.id] = 1;\r\n    delete selectableNodes[node.id];\r\n\r\n    // Turn its prerequisite potential edges into actual edges\r\n    // Keep grey edges as grey\r\n    if (node.data.conditions.prerequisites !== null) {\r\n        for (const prereq of node.data.conditions.prerequisites) {\r\n            if (potentialEdges.hasOwnProperty('e' + prereq + '-' + node.id)) {\r\n                selectedEdges['e' + prereq + '-' + node.id] = 1;\r\n                delete potentialEdges['e' + prereq + '-' + node.id];\r\n            }\r\n        }\r\n    }\r\n\r\n    // Unlock its future edges\r\n    if (node.data.unlocks !== null) {\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            // Edges from node to unlocks should be unselected\r\n            if (selectedNodes.hasOwnProperty(unlockCourse)) {\r\n                // This course is already selected. Make the edge a selected edge\r\n                selectedEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n            } else {\r\n                // This course is either unselected or selectable\r\n                // In either case, add potential edge\r\n                potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n            }\r\n        }            \r\n    }\r\n\r\n    return;\r\n}\r\n","// HELPER FUNCTION for unselecting nodes\r\n// Given a selected node, unselects it and pushes it onto a queue to be analysed\r\n// ==================ON THE QUEUE==========================\r\n// Unshift node and Manages its prerequisites as follows:\r\n//  - if the prereq node is selected, turn selected edges into potential edges\r\n//  - if otherwise, do nothing\r\n// Determine the status of the current node:\r\n//  - if it meets prerequisites, leave it as is.\r\n//  - if it does not meet prerequisites, make it unselectable (delete from selectable/selected)\r\n// For each unlock:\r\n// - if the current node is not selected, turn edge grey no matter what\r\n// - if the current node is selected, keep edge as it is\r\n// - push the unlock onto queue if it was selectable/selected\r\nimport getElement from './getelement.js';\r\nimport checkPrerequisites from './checkprerequisites.js';\r\n\r\nexport default function unselectNode(elements, node, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    // Unselect this node\r\n    delete selectedNodes[node.id];\r\n    var unselectQueue = [node.id];\r\n    while (unselectQueue.length !== 0) {\r\n        // Unshift and get the node\r\n        const current = getElement(unselectQueue.shift(), elements);\r\n        \r\n        // Analyse its prerequisites\r\n        // If the prereq node is selected, turn selected edge into potential edges\r\n        if (current.data.conditions.prerequisites !== null) {\r\n            for (const prereq of current.data.conditions.prerequisites) {\r\n                if (selectedNodes.hasOwnProperty(prereq)) {\r\n                    if (selectedEdges.hasOwnProperty('e' + prereq + '-' + current.id)) {\r\n                        delete selectedEdges['e' + prereq + '-' + current.id];\r\n                        potentialEdges['e' + prereq + '-' + current.id] = 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Determine the status of the current node\r\n        if (! checkPrerequisites(current, selectedNodes)) {\r\n            // Does not meet prerequisites. Make it unselectable\r\n            if (selectableNodes.hasOwnProperty(current.id)) delete selectableNodes[current.id];\r\n            else if (selectedNodes.hasOwnProperty(current.id)) delete selectedNodes[current.id];\r\n        } else {\r\n            // Meets prerequisites. Make it selectable\r\n            if (selectedNodes.hasOwnProperty(current.id)) delete selectedNodes[current.id];\r\n            selectableNodes[current.id] = 1;\r\n        }\r\n\r\n        // Analyse its unlocks\r\n        if (current.data.unlocks !== null) {\r\n            for (const unlockCourse of current.data.unlocks) {\r\n                if (! selectedNodes.hasOwnProperty(current.id)) {\r\n                    // Make edge grey\r\n                    if (potentialEdges.hasOwnProperty('e' + current.id + '-' + unlockCourse)) delete potentialEdges['e' + current.id + '-' + unlockCourse];\r\n                    else if (selectedEdges.hasOwnProperty('e' + current.id + '-' + unlockCourse)) delete selectedEdges['e' + current.id + '-' + unlockCourse];\r\n                }\r\n\r\n                if (selectedNodes.hasOwnProperty(unlockCourse) || selectableNodes.hasOwnProperty(unlockCourse)) {\r\n                    unselectQueue.push(unlockCourse);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","// HELPER FUNCTION to determine which previously unselectable nodes\r\n// are now selectable\r\nimport checkPrerequisites from './checkprerequisites.js';\r\nimport getElement from './getelement.js';\r\n\r\nexport default function getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    // TODO: Deal with outsider nodes\r\n\r\n    // Analyse the target of potential edges for potential nodes\r\n    var analyseNodes = {};\r\n    const potentialEdgesKeys = Object.keys(potentialEdges);\r\n    for (var edge of potentialEdgesKeys) {\r\n        // Get the target course\r\n        const target = edge.split('-')[1];\r\n\r\n        if ((! selectedNodes.hasOwnProperty(target)) && (! selectableNodes.hasOwnProperty(target))) {\r\n            analyseNodes[edge.split('-')[1]] = 1;\r\n        }\r\n    }\r\n\r\n    const analyseNodesKeys = Object.keys(analyseNodes);\r\n    //console.log(\"==========ANALYSE NODES KEYS===========\");\r\n    //console.log(analyseNodesKeys);\r\n    //console.log(\"==============ELEMENTS===============\");\r\n    //console.log(elements);\r\n\r\n    for (const nodeID of analyseNodesKeys) {\r\n        // Determine if the prerequisite has been met\r\n        // For now, assume prerequisites are met\r\n        const node = getElement(nodeID, elements);\r\n        //console.log(node);\r\n        \r\n        if (checkPrerequisites(node, selectedNodes)) {\r\n            selectableNodes[nodeID] = 1;\r\n        } else {\r\n            if (selectableNodes.hasOwnProperty(nodeID)) delete selectableNodes[nodeID];\r\n            // TODO: Deal with selected nodes cases? (e.g. unselecting a child???)\r\n\r\n        }\r\n    }\r\n}","// HELPER FUNCTION to toggle exclusion courses\r\n// Will hide the current course and its edges, unhide the next course and edges\r\n// in the queue. Finds new edges to show by regex substitution???\r\nimport { getConnectedEdges } from 'react-flow-renderer';\r\nimport getElement from './getelement.js';\r\n\r\nexport default function exclusionSwap(node, elements, edges, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups) {\r\n    console.log(\"EXCLUSION SWAP\");\r\n    console.log(exclusionGroups);\r\n    console.log(node.id);\r\n    const newElements = [...elements];\r\n    for (var group of exclusionGroups) {\r\n        console.log(\"CHECKING\", group);\r\n        if (group.includes(node.id)) {\r\n            console.log(\"FOUND THE EXCLUSION GROUP\");\r\n            console.log(group);\r\n\r\n            // Move this to the back\r\n            const prevCourse = group.shift();\r\n            group.push(prevCourse);\r\n\r\n            // Current course we need to display is now at front of queue\r\n            const curCourse = group[0];\r\n\r\n            console.log(prevCourse);\r\n            console.log(curCourse);\r\n\r\n\r\n            // Toggle the nodes themselves accordingly\r\n            for (var e of elements) {\r\n                if (e.id === prevCourse) {\r\n                    console.log(e);\r\n                    console.log(\"HIDING\");\r\n                    console.log(prevCourse);\r\n                    e.isHidden = true;\r\n                    console.log(e);\r\n                } else if (e.id === curCourse) {\r\n                    console.log(e);\r\n                    console.log(\"REVEALING\");\r\n                    console.log(curCourse);\r\n                    e.isHidden = false;\r\n                    console.log(e);\r\n                }\r\n            }\r\n\r\n            if (selectedNodes.hasOwnProperty(prevCourse)) {\r\n                delete selectedNodes[prevCourse];\r\n                selectedNodes[curCourse] = 1;\r\n            }\r\n            if (selectableNodes.hasOwnProperty(prevCourse)) {\r\n                delete selectableNodes[prevCourse];\r\n                selectableNodes[curCourse] = 1;\r\n            }\r\n\r\n            // Get all the edges of the previous course and hide all of them\r\n            // Then use regex sub to determine the new edges to reveal\r\n            // Transfer over selected, potential and hover edges\r\n            var edgesList = getConnectedEdges([node], edges);\r\n            var newEdgesList = [];\r\n            for (const hideEdge of edgesList) {\r\n                for (const edge of newElements) {\r\n                    if (hideEdge.id === edge.id) {\r\n                        edge.isHidden = true;\r\n                        console.log(\"HIDING\", edge.id);\r\n\r\n                        // Get the name of the new edge\r\n                        var newEdge = hideEdge.id.replace(prevCourse, curCourse);\r\n                        console.log(\"SHOWING\", newEdge);\r\n\r\n                        // Keep selected, potential and hover edges\r\n                        if (selectedEdges.hasOwnProperty(hideEdge.id)) {\r\n                            delete selectedEdges[hideEdge.id];\r\n                            selectedEdges[newEdge] = 1;\r\n                        }\r\n\r\n                        if (potentialEdges.hasOwnProperty(hideEdge.id)) {\r\n                            delete potentialEdges[hideEdge.id];\r\n                            potentialEdges[newEdge] = 1;\r\n                        }\r\n                        \r\n                        if (hoverEdges.hasOwnProperty(hideEdge.id)) {\r\n                            delete hoverEdges[hideEdge.id];\r\n                            hoverEdges[newEdge] = 1;\r\n                        }\r\n\r\n                        newEdgesList.push(newEdge);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // For each edge, show it IF TARGET AND SOURCE ARE NOT HIDDEN\r\n            for (const newEdge of newEdgesList) {\r\n                for (const edge of newElements) {\r\n                    if (newEdge === edge.id) {\r\n                        console.log(newEdge);\r\n                        const sourceNode = getElement(edge.source, elements);\r\n                        const targetNode = getElement(edge.target, elements);\r\n                        if ((!sourceNode.isHidden) && (!targetNode.isHidden)) {\r\n                            edge.isHidden = false;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    }\r\n\r\n    return newElements;\r\n}","// HELPER FUNCTION to highlight prerequisites in purple on hover\r\n// When hovering over an unselected node, show a path of edges\r\n// which will stop at a selected/selectable node\r\nimport getElement from './getelement.js';\r\n\r\nexport default function hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges) {\r\n    if (node.data.conditions.prerequisites === null) return;\r\n    // Get all selected edges one layer down and add to hover edges\r\n    for (const prereq of node.data.conditions.prerequisites) {\r\n        if (selectedEdges.hasOwnProperty('e' + prereq + '-' + node.id)) {\r\n            hoverEdges['e' + prereq + '-' + node.id] = 1;\r\n        }\r\n    }\r\n\r\n    // hoverEdge all unselected (AND POTENTIAL???) edges until we hit selected/selectable node\r\n    var prereqQueue = [node.id];\r\n    while (prereqQueue.length !== 0) {\r\n        const current = getElement(prereqQueue.shift(), elements);\r\n        // Make sure this course exists as a node in our map\r\n        if (current === null) continue;\r\n\r\n        if (current.data.conditions.prerequisites === null) continue;\r\n\r\n        for (const prereq of current.data.conditions.prerequisites) {\r\n            if (!selectedEdges.hasOwnProperty('e' + prereq + '-' + current.id)) {\r\n                hoverEdges['e' + prereq + '-' + current.id] = 1;\r\n            }\r\n            /*if ((!selectedEdges.hasOwnProperty('e' + prereq + '-' + current.id)) && (!potentialEdges.hasOwnProperty('e' + prereq + '-' + current.id))) {\r\n                hoverEdges['e' + prereq + '-' + current.id] = 1;\r\n            }*/\r\n\r\n            if ((!selectedNodes.hasOwnProperty(prereq)) && (!selectableNodes.hasOwnProperty(prereq))) {\r\n                prereqQueue.push(prereq);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import React, {useState, Fragment} from 'react';\r\nimport ReactFlow, {Background, Controls, MiniMap} from 'react-flow-renderer';\r\n\r\nvar initialElements = [\r\n    {id: '1', style: {opacity: 1}, position: {x: 0, y: 0}, data: {label: 'VINCENT'}, type: 'default'},\r\n    {id: '2', style: {opacity: 1}, position: {x: 0, y: 100}, data: {label: 'HAYES'}, type: 'default'},\r\n    {id: '3', style: {opacity: 1}, position: {x: 0, y: -100}, data: {label: 'JAMES'}, type: 'default'},\r\n    \r\n    {id: 'e1-2', source: '1', target: '2', type: 'step', animated: true}\r\n];\r\n\r\nconst onLoad = (reactFlowInstance) => {\r\n    reactFlowInstance.fitView();\r\n}\r\n\r\nconst Teaching = () => {\r\n    const [elements, setElements] = useState(initialElements);\r\n    const [isDraggable, setIsDraggable] = useState(true);\r\n\r\n    const addNode = () => {\r\n        setElements(e => e.concat({\r\n            id: (e.length+1).toString(),\r\n            data: {label: 'new node' + e.length},\r\n            position: {x: Math.random() * window.innerWidth, y: Math.random() * window.innerHeight}\r\n        }));\r\n    };\r\n    \r\n\r\n    const onClick = (event, element) => {\r\n        console.log('hi');\r\n        setElements((els) =>\r\n            els.map((e) => {\r\n                if (e.id === element.id) {\r\n                    console.log(element);    \r\n                    console.log(e.style.opacity);\r\n                    return e;\r\n                }\r\n                return e;\r\n            })\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <ReactFlow\r\n                elements={elements}\r\n                onLoad={onLoad}\r\n                style={{width: \"100%\", height: \"99vh\"}}\r\n                onElementClick={onClick}\r\n                nodesDraggable={false}\r\n            >\r\n                <Background />\r\n                <MiniMap \r\n                    nodeColor = {n=>{\r\n                        if (n.data.label === 'VINCENT') return 'red';\r\n                        return 'blue';\r\n                    }}\r\n                />\r\n                <Controls />\r\n            </ReactFlow>\r\n            <div>\r\n                <button type=\"button\" onClick={addNode}>\r\n                    ADD NEW NODE HERE!!!!\r\n                </button>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Teaching;","import React, {Component} from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Link,\r\n  Redirect,\r\n  HashRouter\r\n} from 'react-router-dom';\r\n\r\nimport BESengah from './maps/EngineeringHonoursSoftware/map.js';\r\nimport Teaching from './components/teaching.js';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <HashRouter basename='/'>\r\n        <div>\r\n          <ul>\r\n            <li><Link to=\"/\">Home</Link></li>\r\n            <li><Link to=\"/SoftwareEngineering\">Software Engineering</Link></li>\r\n          </ul>\r\n\r\n          <hr />\r\n          <Route path=\"/SoftwareEngineering\" component={BESengah} />\r\n          <Route path=\"/Teaching\" component={Teaching}/>\r\n        </div>\r\n      </HashRouter>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// Returns true if all prerequisites are met for a given node\r\n// Returns false if prerequisites are not met for a given node\r\n// Will only analyse targets of potential edges\r\n// NOTE: Assumes that source of potential edges are always selected\r\nexport default function checkPrerequisites(node, selectedNodes) {\r\n    if (node.data.conditions.prerequisites === null) return true;\r\n    if (node.data.conditions.prereqs_executable === null) return true;\r\n\r\n    // TODO: Check for corerequsiites and exclusion courses as well\r\n\r\n    // Check if these nodes are enough to satisfy prerequisites\r\n    // Get the prerequisite condition and replace courses by 1 if they have been\r\n    // selected and 0 if they have not.\r\n    \r\n    console.log(node.id);\r\n    var condition = node.data.conditions.prereqs_executable;\r\n    condition = condition.replace(/[A-Z]{4}[0-9]{4}/gi, function(match) {\r\n        if (selectedNodes.hasOwnProperty(match)) return 1;\r\n        else return 0;\r\n    })\r\n\r\n    console.log(condition);\r\n    if (eval(condition)) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\n"],"sourceRoot":""}