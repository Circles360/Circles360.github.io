{"version":3,"sources":["components/degreeplanner-course.jsx","components/getelement.js","components/degreeplanner.js","components/degreeplanner-term.jsx","components/checkprerequisites.js","components/customnode1.js","components/customnode2.js","components/headernode1.js","components/hoverinfo.js","components/unhoverprerequisites.js","components/dropdownDegrees.js","components/sidebar-modal.js","components/sidebar.js","components/positionhelper.js","components/unselectnode.js","components/highlightelements.js","maps/EngineeringHonoursSoftware/map.js","components/selectnode.js","components/getselectable.js","components/exclusionswap.js","components/hoverprerequisites.js","components/teaching.js","App.js","serviceWorker.js","index.js"],"names":["Course","draggableId","this","props","course","id","index","provided","ref","innerRef","draggableProps","dragHandleProps","style","margin","content","placeholder","React","Component","getElement","elementsData","e","getCoreCourses","code","coreCourses","level","specialisationsJSON","structure","includes","push","courses","flat","selectedCourses","filter","c","getCourses","forEach","termsAvailable","coursesJSON","terms","map","term","course_name","units","generateTerms","yearId","TSKey","T1Key","T2Key","T3Key","title","courseIds","addPriority","priority","courseId","unlocksCourse","conditions","prerequisites","prereq","unlocks","prioritiseCourses","Number","t","length","prioritised","Object","values","sort","a","b","checkPrereqsMet","termPlan","termId","REGEX_COURSE_CODE","prereqsExecutable","prereqs_executable","coursesTaken","replace","eval","addCourseToPlan","courseUnits","substring","console","log","populateTerms","maxYears","prioritisedCourses","year","makePlan","plan","table","generatePlanScaffold","years","toString","DegreePlanner","state","onDragStart","result","onDragEnd","destination","source","droppableId","sourceYear","start","destinationYear","finish","startCourseIds","Array","from","splice","newStart","finishCourseIds","newFinish","newState","setState","newCourseIds","newTerm","as","textAlign","marginTop","keys","columns","termOrder","Column","key","allCourses","backgroundColor","checkTermAvailability","checkValidCourses","Term","snapshot","isDraggingOver","draggingOverWith","transition","total","reduce","colour","color","floating","showUnits","droppableProps","minHeight","checkPrerequisites","node","elements","selectedNodes","data","condition","match","hasOwnProperty","units_required","level_for_units_required","target","selectedList","selected","core_year","zIndex","pointerEvents","opacity","top","memo","type","position","course_code","bottom","degree_name","HoverInfo","unhoverPrerequisites","hoverEdges","edge","courseOptions","programOptions","programsJSON","degrees_involved","majors","honours","name","replacement","spec","getMajors","minors","getMinors","DropdownDegrees","majorOptions","minorOptions","disabledPrimary","disabledSecondary","hiddenPrimary","hiddenSecondary","valProgram","valPrimary","valSecondary","phPrimary","phSecondary","chooseProgram","program","value","choosePrimary","chooseSecondary","minor","clickDone","Grid","centered","marginBottom","Row","Dropdown","selection","search","onChange","options","enabled","disabled","visibility","Button","onClick","exampleReducer","action","open","dimmer","Error","SideBarModal","useReducer","undefined","dispatch","Modal","closeIcon","onClose","Header","Container","example","flag","text","Sidebar","paddingLeft","paddingRight","Message","info","stretched","fluid","multiple","selector","animated","Content","visible","hidden","Icon","positionHelper","positioning_data","isNode","x","y","unselectNode","selectedEdges","selectableNodes","potentialEdges","unselectQueue","current","shift","unlockCourse","selectedEdgeAnimated","stroke","strokeWidth","selectedEdgeStatic","hoverEdge","potentialHoverEdge","potentialEdge","unselectedEdge","highlightElements","isEdge","background","backgroundColour","textColour","require","nodesData","edgesData","exclusionGroups","exclusionNodes","group","exclusion","onLoad","reactFlowInstance","last","pop","isHidden","setTransform","zoom","nodeTypes","custom1","CustomNode1","custom2","CustomNode2","header1","HeaderNode1","layoutStyle","overflowX","overflowY","width","height","BESengah","hoverDisplay","useState","setElements","hoverText","setHoverText","hoverNode","setHoverNode","clickCount","singleClickTimer","layout","setLayout","selectUnselect","element","selectNode","analyseNodesKeys","getSelectable","toggleExclusion","edges","newElements","prevCourse","curCourse","curNode","edgesList","getConnectedEdges","newEdgesList","edgesIds","newEdgesIds","newEdge","checkedEdges","hideEdge","newEdgeId","split","sourceNode","targetNode","exclusionSwap","divided","onMouseEnter","onMouseLeave","nodesConnectable","onElementClick","event","setTimeout","clearTimeout","minZoom","onNodeMouseEnter","prereqQueue","hoverPrerequisites","onNodeMouseLeave","selectNodesOnDrag","onNodeContextMenu","onNodeDragStop","elementsSelectable","whyDidYouRender","initialElements","label","fitView","Teaching","els","nodesDraggable","nodeColor","n","concat","Math","random","window","innerWidth","innerHeight","App","basename","path","component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0ff71064.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Label, Container } from 'semantic-ui-react'\r\n\r\nimport { Draggable } from \"react-beautiful-dnd\"\r\n\r\nexport default class Course extends React.Component {\r\n    render () {\r\n        return (\r\n            <Container>\r\n                <Draggable draggableId={this.props.course.id} index={this.props.index}>\r\n                    {provided => (\r\n                        <div>\r\n                            <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                                <Label style={{margin: \"5px\"}}>{this.props.course.content}</Label>\r\n                            </div>\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Draggable>\r\n            </Container>\r\n        );\r\n    }\r\n}","// Given an id, returns the element\r\nconst getElement = (id, elementsData) => {\r\n    //console.log(\"GET ELEMENT OF \" + id);\r\n    for (var e of elementsData) {\r\n        if (e.id === id) {\r\n            return e;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport default getElement;","import React from 'react';\r\nimport { Icon, Button, Container, Segment, Header, Dropdown, Grid } from 'semantic-ui-react'\r\n\r\n// import programsJSON from \"../webscraper/programs.json\"\r\n// import specialisationsJSON from \"../webscraper/specialisations.json\"\r\nimport coursesJSON from \"../webscraper/courses.json\"\r\nimport specialisationsJSON from \"../webscraper/specialisations.json\"\r\n\r\nimport { DragDropContext } from \"react-beautiful-dnd\"\r\nimport Term from \"./degreeplanner-term\"\r\n\r\n\r\nconst getCoreCourses = (code) => {\r\n    const coreCourses = [];\r\n\r\n    for (const level in specialisationsJSON[code].structure) {\r\n        if (level.includes(\"Core\") || level.includes(\"core\")) {\r\n            coreCourses.push(...specialisationsJSON[code].structure[level].courses.flat())\r\n        }\r\n    }\r\n\r\n    return coreCourses\r\n}\r\nconst selectedCourses = getCoreCourses(\"SENGAH\").filter(c => c != \"MATH1131\" && c != \"MATH1231\");\r\n\r\nconst getCourses = (selectedCourses) => {\r\n    const courses = {}\r\n\r\n    selectedCourses.forEach(c => {\r\n        const termsAvailable = coursesJSON[c].terms.map(term => {\r\n            if (term === \"Summer Term\") return \"TS\"\r\n            if (term === \"Term 1\") return \"T1\"\r\n            if (term === \"Term 2\") return \"T2\"\r\n            if (term === \"Term 3\") return \"T3\"\r\n        })\r\n\r\n        courses[c] = {\r\n            id: c,\r\n            content: `${c} - ${coursesJSON[c].course_name}`,\r\n            termsAvailable: termsAvailable,\r\n            units: coursesJSON[c].units\r\n        }\r\n    })\r\n\r\n    return courses\r\n}\r\n\r\nconst generateTerms = (yearId) => {\r\n    const terms = {}\r\n\r\n    // Terms have id of <YEAR>T<TERM TYPE> eg: 1TS is 1st Year, Summer Term\r\n\r\n    const TSKey = `${yearId}TS`;\r\n    const T1Key = `${yearId}T1`;\r\n    const T2Key = `${yearId}T2`;\r\n    const T3Key = `${yearId}T3`;\r\n    terms[\"termOrder\"] = [TSKey, T1Key, T2Key, T3Key];\r\n\r\n    terms[TSKey] = {\r\n        id: TSKey,\r\n        title: \"Summer Term\",\r\n        courseIds: []\r\n    }\r\n\r\n    terms[T1Key] = {\r\n        id: T1Key,\r\n        title: \"Term 1\",\r\n        courseIds: []\r\n    }\r\n\r\n    terms[T2Key] = {\r\n        id: T2Key,\r\n        title: \"Term 2\",\r\n        courseIds: []\r\n    }\r\n\r\n    terms[T3Key] = {\r\n        id: T3Key,\r\n        title: \"Term 3\",\r\n        courseIds: []\r\n    }\r\n\r\n    return terms;\r\n}\r\n\r\nconst addPriority = (priority, courseId, unlocksCourse) => {\r\n\r\n    if (!coursesJSON[courseId].conditions.prerequisites) return priority;\r\n\r\n    for (const prereq of coursesJSON[courseId].conditions.prerequisites) {\r\n        if (!(prereq in priority)) continue;\r\n        if (courseId === prereq) continue;\r\n\r\n        priority[prereq].unlocks.push(unlocksCourse);\r\n        priority = addPriority(priority, prereq, unlocksCourse);\r\n    }\r\n\r\n    return priority;\r\n}\r\n\r\nconst prioritiseCourses = (selectedCourses) => {\r\n    // Initiate priorities\r\n    var priority = {};\r\n    for (const courseId of selectedCourses) {\r\n        priority[courseId] = {\r\n            courseId: courseId,\r\n            level: Number(courseId[4]),\r\n            unlocks: [],\r\n            termsAvailable: coursesJSON[courseId].terms.filter(t => t != \"Summer Term\").length\r\n        }\r\n    }\r\n\r\n    // Calculate priorities\r\n    for (const courseId of selectedCourses) {\r\n        priority = addPriority(priority, courseId, courseId);\r\n    }\r\n\r\n    // Sort keys of priority into array to give into prioritised\r\n    const prioritised = Object.values(priority);\r\n\r\n    prioritised.sort((a, b) => {\r\n        // Sort by:\r\n        // 1. Level (ASC)\r\n        // 2. Unlocks (DESC)\r\n        // 3. Terms Available (ASC)\r\n\r\n        if (a.level === b.level) {\r\n            if (a.unlocks.length === b.unlocks.length) {\r\n                return a.termsAvailable - b.termsAvailable; // Ascending\r\n            }\r\n            return b.unlocks.length - a.unlocks.length; // Descending\r\n        }\r\n        return a.level - b.level; // Ascending\r\n    });\r\n\r\n    return prioritised;\r\n}\r\n\r\nconst checkPrereqsMet = (termPlan, termId, courseId) => {\r\n    const REGEX_COURSE_CODE = /[A-Z]{4}\\d{4}/g;\r\n\r\n    let prereqsExecutable = coursesJSON[courseId].conditions.prereqs_executable;\r\n    if (!prereqsExecutable) return true; // No executable\r\n\r\n    // Get courses taken up to termId\r\n    const coursesTaken = [];\r\n    for (const t in termPlan) {\r\n        if (t === termId) break;\r\n        coursesTaken.push(...termPlan[t].courseIds);\r\n    }\r\n\r\n    for (const course of coursesTaken) {\r\n        prereqsExecutable = prereqsExecutable.replace(course, \"1\");\r\n    }\r\n    prereqsExecutable = prereqsExecutable.replace(REGEX_COURSE_CODE, \"0\");\r\n    return eval(prereqsExecutable);\r\n}\r\n\r\nconst addCourseToPlan = (termPlan, courseId) => {\r\n    const maxUOC = 18;\r\n\r\n    for (const termId in termPlan) {\r\n        if (termPlan[termId].units >= maxUOC) continue;\r\n\r\n        const courseUnits = coursesJSON[courseId].units;\r\n        if (termPlan[termId].units + courseUnits > maxUOC) continue;\r\n\r\n        const termsAvailable = coursesJSON[courseId].terms.map(term => {\r\n            if (term === \"Summer Term\") return \"TS\"\r\n            if (term === \"Term 1\") return \"T1\"\r\n            if (term === \"Term 2\") return \"T2\"\r\n            if (term === \"Term 3\") return \"T3\"\r\n        })\r\n        if (!(termsAvailable.includes(termId.substring(1, 3)))) continue;\r\n\r\n        // Need to check prerequisites have been met here\r\n        if (!checkPrereqsMet(termPlan, termId, courseId)) continue;\r\n\r\n        // Add course to plan\r\n        termPlan[termId].units += coursesJSON[courseId].units;\r\n        termPlan[termId].courseIds.push(courseId);\r\n        return termPlan;\r\n    }\r\n\r\n    console.log(\"ERROR WITH \", courseId); // TODO: put in a \"error\" segment\r\n}\r\n\r\nconst populateTerms = (maxYears, prioritisedCourses) => {\r\n    const maxTerms = 3;\r\n\r\n    const termPlan = {};\r\n    for (let year = 1; year <= maxYears; year++) {\r\n        for (let term = 1; term <= maxTerms; term++) {\r\n            const termId = `${year}T${term}`;\r\n            termPlan[termId] = {\r\n                units: 0,\r\n                courseIds: []\r\n            };\r\n        }\r\n    }\r\n\r\n    // For each course in the prioritised, slot into earliest possible term\r\n    for (const course of prioritisedCourses) {\r\n        addCourseToPlan(termPlan, course.courseId);\r\n    }\r\n\r\n    return termPlan;\r\n}\r\n\r\nconst makePlan = (plan, maxYears) => {\r\n    const prioritisedCourses = prioritiseCourses(selectedCourses);\r\n\r\n    const termPlan = populateTerms(maxYears, prioritisedCourses);\r\n\r\n    for (const termId in termPlan) {\r\n        const year = termId[0];\r\n        plan[year][termId].courseIds = termPlan[termId].courseIds\r\n    }\r\n\r\n    console.table(termPlan);\r\n\r\n    return plan;\r\n}\r\n\r\nconst generatePlanScaffold = (years) => {\r\n    let plan = {};\r\n\r\n    for (let year = 1; year <= years; year++) {\r\n        plan[year.toString()] = generateTerms(year)\r\n    }\r\n\r\n    plan = makePlan(plan, years)\r\n\r\n    return plan;\r\n}\r\n\r\nclass DegreePlanner extends React.Component {\r\n    state = {\r\n        courses: getCourses(selectedCourses),\r\n        plan: generatePlanScaffold(4)\r\n    };\r\n\r\n    onDragStart = result => {\r\n        const { draggableId } = result;\r\n    };\r\n\r\n    onDragEnd = result => {\r\n        const { destination, source, draggableId } = result;\r\n\r\n        // Null destination means label was not dragged into a droppable\r\n        if (!destination) return;\r\n\r\n        // Label was dragged into the same position\r\n        if (destination.droppableId === source.droppableId && destination.index === source.index) return;\r\n\r\n        const sourceYear = source.droppableId[0];\r\n        const start = this.state.plan[sourceYear][source.droppableId];\r\n        const destinationYear = destination.droppableId[0];\r\n        const finish = this.state.plan[destinationYear][destination.droppableId];\r\n\r\n        if (start === finish) {\r\n            const newCourseIds = Array.from(start.courseIds);\r\n            newCourseIds.splice(source.index, 1); // Remove 1 item at source.index\r\n            newCourseIds.splice(destination.index, 0, draggableId); // Insert dragggableId into destination\r\n            const newTerm = {\r\n                ...start,\r\n                courseIds: newCourseIds\r\n            };\r\n\r\n            const newState = {\r\n                ...this.state,\r\n                plan: {\r\n                    ...this.state.plan,\r\n                    [sourceYear]: {\r\n                        ...this.state.plan[sourceYear],\r\n                        [newTerm.id]: newTerm,\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setState(newState);\r\n            return;\r\n        }\r\n\r\n        // Moving from one list to another\r\n        const startCourseIds = Array.from(start.courseIds)\r\n        startCourseIds.splice(source.index, 1);\r\n\r\n        const newStart = {\r\n            ...start,\r\n            courseIds: startCourseIds,\r\n        }\r\n\r\n        const finishCourseIds = Array.from(finish.courseIds)\r\n        finishCourseIds.splice(destination.index, 0, draggableId);\r\n\r\n        const newFinish = {\r\n            ...finish,\r\n            courseIds: finishCourseIds\r\n        }\r\n\r\n        const newState = this.state;\r\n        newState.plan[sourceYear][newStart.id] = newStart;\r\n        newState.plan[destinationYear][newFinish.id] = newFinish;\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Segment>\r\n                <Container>\r\n                    <Header as=\"h2\" textAlign=\"center\" style={{marginTop: \"50px\"}}>Plan your degree</Header>\r\n                    <p>The following degree plan has been generated based on the courses you have selected above. By default, our algorithm:</p>\r\n                    <ul>\r\n                        <li>allocates 18 UOC per term</li>\r\n                        <li>ensures courses have their prerequisites met</li>\r\n                        <li>ensures courses are offered in allocated terms</li>\r\n                        <li>does not allocate courses in Summer Term</li>\r\n                    </ul>\r\n\r\n                    <p>Drag and drop the courses below to further customise your degree plan!</p>\r\n\r\n                    <p><em>Please note that our data is scraped from the UNSW Handbook and may have some inconsistencies.</em></p>\r\n                    <p><em>Also note, you can drag a course into a term even if it is not offered as our data may be out of date, please double check :) </em></p>\r\n\r\n                    <DragDropContext onDragEnd={this.onDragEnd} onDragStart={this.onDragStart}>\r\n                        {Object.keys(this.state.plan).map(yearId => (\r\n                            <Grid columns={4}>\r\n                                {this.state.plan[yearId].termOrder.map(termId => {\r\n                                    const term = this.state.plan[yearId][termId];\r\n                                    const courses = term.courseIds.map(courseId => this.state.courses[courseId]);\r\n                                    return (\r\n                                        <Grid.Column>\r\n                                            <Term key={term.id} term={term} courses={courses} allCourses={this.state.courses}/>\r\n                                        </Grid.Column>\r\n                                    );\r\n                                })}\r\n                            </Grid>\r\n                        ))}\r\n                    </DragDropContext>\r\n                    <Segment style={{backgroundColor: \"lightpink\"}}>\r\n                        <Header as=\"h3\">Error messages</Header>\r\n                        <p>None</p>\r\n                    </Segment>\r\n                </Container>\r\n            </Segment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DegreePlanner","import React from \"react\";\r\nimport { Container, Segment, Header, Label } from 'semantic-ui-react'\r\n\r\nimport Course from \"./degreeplanner-course\"\r\n\r\nimport { Droppable } from \"react-beautiful-dnd\"\r\n\r\nconst SUCCESS = \"#e5fbe5\";\r\nconst ERROR = \"#ffebeb\";\r\n\r\nconst checkTermAvailability = (props, courseId) => {\r\n    const termId = props.term.id.substring(1, 3);\r\n    const termAvailability = props.allCourses[courseId].termsAvailable;\r\n\r\n    return termAvailability.includes(termId) ? SUCCESS : ERROR;\r\n}\r\n\r\nconst checkValidCourses = (props) => {\r\n    const termId = props.term.id.substring(1, 3);\r\n\r\n    for (const courseId of props.term.courseIds) {\r\n        if (!props.allCourses[courseId].termsAvailable.includes(termId)) {\r\n            return ERROR\r\n        }\r\n    }\r\n    return \"white\"\r\n}\r\n\r\nconst getUnits = (props) => props.term.courseIds.reduce((total, courseId) => total + props.allCourses[courseId].units, 0);\r\n\r\nconst showUnits = (props) => {\r\n    const total = props.term.courseIds.reduce((total, courseId) => total + props.allCourses[courseId].units, 0);\r\n    const partTime = 12;\r\n    const fullTime = 18;\r\n\r\n    let colour = \"\"\r\n    if (total === 0) {\r\n        colour = \"grey\";\r\n    } else if (total < partTime) {\r\n        colour = \"orange\";\r\n    } else if (total < fullTime) {\r\n        colour = \"blue\";\r\n    } else if (total === fullTime) {\r\n        colour = \"teal\";\r\n    } else {\r\n        colour = \"red\";\r\n    }\r\n\r\n    return <Label color={colour} floating>{total}</Label>;\r\n}\r\n\r\nexport default class Term extends React.Component {\r\n    render () {\r\n        return (\r\n            <Container>\r\n                <Droppable droppableId={this.props.term.id}>\r\n                    {(provided, snapshot) => (\r\n                        <Segment style={{backgroundColor: snapshot.isDraggingOver ? checkTermAvailability(this.props, snapshot.draggingOverWith) : checkValidCourses(this.props), transition: \"0.2s ease\"}}>\r\n                            <Header as=\"h3\">{this.props.term.title}</Header>\r\n                            {showUnits(this.props)}\r\n                            {/* {getTermTitle(this.props)} */}\r\n                            <div ref={provided.innerRef} {...provided.droppableProps} style={{minHeight: \"150px\"}}>\r\n                                {this.props.courses.map((course, index) => <Course key={course.id} course={course} index={index} />)}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        </Segment>\r\n                    )}\r\n                </Droppable>\r\n            </Container>\r\n        )\r\n    }\r\n}","// Returns true if all prerequisites are met for a given node\r\n// Returns false if prerequisites are not met for a given node\r\n// Will only analyse targets of potential edges\r\n\r\nimport Course from \"./degreeplanner-course\";\r\n\r\nimport getElement from './getelement.js';\r\n\r\n// NOTE: Assumes that source of potential edges are always selected\r\nexport default function checkPrerequisites(node, elements, selectedNodes) {\r\n    if (node.data.conditions.prerequisites !== null && node.data.conditions.prereqs_executable !== null) {\r\n        // Evaluate the condition\r\n        //console.log(\"HERE\");\r\n        //console.log(node.data.conditions.prereqs_executable);\r\n        var condition = node.data.conditions.prereqs_executable;\r\n        //console.log(condition);\r\n        condition = condition.replace(/[A-Z]{4}[A-Z0-9]+/gi, function(match) {\r\n            //console.log(match);\r\n            if (selectedNodes.hasOwnProperty(match)) {\r\n                return 1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        });\r\n        if (eval(condition)) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    } else {\r\n        // Check if units required exists\r\n        if (node.data.conditions.units_required !== null) {\r\n            if (node.data.conditions.level_for_units_required === null) {\r\n                //console.log(\"LEVEL FOR UNITS\", node.id);\r\n                // See if we meet the total for this course\r\n                var total = 0;\r\n                const target = node.data.conditions.units_required;\r\n                const selectedList = Object.keys(selectedNodes);\r\n                //console.log(selectedNodes);\r\n                for (const selected of selectedList) {\r\n                    //console.log(selected);\r\n                    const node = getElement(selected, elements);\r\n                    total += node.data.units;\r\n                    //console.log(node.id + \"=\" + node.data.units);\r\n                }\r\n\r\n                if (total >= target) {\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n        } else if (node.data.conditions.core_year !== null) {\r\n            console.log(\"CORE YEAR NOT NULL\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return true;\r\n\r\n    // TODO: Check for corerequsiites and exclusion courses as well\r\n    // TODO: Check for completion of units and core_year\r\n\r\n    // Check if these nodes are enough to satisfy prerequisites\r\n    // Get the prerequisite condition and replace courses by 1 if they have been\r\n    // selected and 0 if they have not.\r\n    \r\n\r\n}\r\n\r\n\r\n","// For normal nodes\r\nimport React, { memo } from 'react';\r\n\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nconst style = {zIndex: -9999, pointerEvents: 'none', opacity: 0, top: '50%'};\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={style} />\r\n      <div>\r\n            <b>{data.course_code}</b>\r\n      </div>\r\n      <Handle type=\"source\" position=\"bottom\" style={style} />\r\n    </>\r\n  );\r\n});\r\n","// For grouping nodes\r\nimport React, { memo } from 'react';\r\n\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={{zIndex: -9999, pointerEvents: 'none', opacity: 0, top: '50%'}} />\r\n      <div>\r\n          <b>{data.id}</b>\r\n      </div>\r\n      <Handle type=\"source\" position=\"bottom\" style={{zIndex: -9999, pointerEvents: 'none', opacity: 0, bottom: '50%'}} />\r\n    </>\r\n  );\r\n});\r\n","import React, { memo } from 'react';\r\n\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={{opacity: 0, top: '50%'}} />\r\n      <div>\r\n            <b>{data.degree_name}</b>\r\n      </div>\r\n      <Handle type=\"source\" position=\"bottom\" style={{opacity: 0, bottom: '50%'}} />\r\n    </>\r\n  );\r\n});\r\n","// Displays hover text in top left corner which contains info about the course\r\nimport React from 'react';\r\nimport '../styles/hover.css';\r\n\r\nexport default function HoverInfo(props) {\r\n    console.log(props);\r\n    return (\r\n        <div id=\"hoverbox\">\r\n            <div id=\"header\">\r\n                {props.node.id}\r\n            </div>\r\n        </div>\r\n    );\r\n}","// HELPER FUNCTION to delete prerequisite edges\r\n// Usually used after unhovering or onclick\r\nexport default function unhoverPrerequisites(hoverEdges) {\r\n    for (var edge in hoverEdges) {\r\n        delete hoverEdges[edge];\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Button, Dropdown, Grid } from 'semantic-ui-react'\r\n\r\nimport programsJSON from \"../webscraper/programs.json\"\r\nimport specialisationsJSON from \"../webscraper/specialisations.json\"\r\n\r\nconst MAJORS = 1;\r\nconst MINORS = 2;\r\nconst HONOURS = 3;\r\n\r\nconst courseOptions = {}\r\nconst programOptions = []\r\n\r\nfor (const code in programsJSON) {\r\n    if (programsJSON[code].degrees_involved.majors.length === 0 && programsJSON[code].degrees_involved.honours.length === 0) continue;\r\n\r\n    programOptions.push({\r\n        \"key\": code,\r\n        \"value\": code,\r\n        \"text\": code + \" - \" + programsJSON[code].name\r\n    })\r\n\r\n    courseOptions[code] = programsJSON[code].degrees_involved\r\n}\r\n\r\nfor (const code in courseOptions) {\r\n    for (const type in courseOptions[code]) {\r\n\r\n        const replacement = [];\r\n        for (const spec of courseOptions[code][type]) {\r\n            if (!(spec in specialisationsJSON)) continue;\r\n            replacement.push({\r\n                \"key\": spec,\r\n                \"value\": spec,\r\n                \"text\": spec + \" - \" + specialisationsJSON[spec].name\r\n            })\r\n        }\r\n        courseOptions[code][type] = replacement;\r\n    }\r\n}\r\n\r\n// returns MAJORS if Majors but no Minors\r\n// returns MINORS if Majors and Minors exist\r\n// returns HONOURS if Honours exist\r\nconst getMajors = (code) => {\r\n    if (!(code in courseOptions)) {\r\n        console.log(\"code not found in majors\", code);\r\n        return [];\r\n    }\r\n\r\n    if (courseOptions[code].honours.length) return [HONOURS, courseOptions[code].honours];\r\n    if (courseOptions[code].minors.length) return [MINORS, courseOptions[code].majors];\r\n    return [MAJORS, courseOptions[code].majors];\r\n}\r\n\r\nconst getMinors = (code) => {\r\n    if (!(code in courseOptions)) {\r\n        console.log(\"code not found in minors\", code);\r\n        return [];\r\n    }\r\n\r\n    return courseOptions[code].minors;\r\n}\r\n\r\nclass DropdownDegrees extends Component {\r\n    state = {\r\n        programOptions: programOptions,\r\n        majorOptions: [],\r\n        minorOptions: [],\r\n\r\n        disabledPrimary: true,\r\n        disabledSecondary: true,\r\n        hiddenPrimary: 'hidden',\r\n        hiddenSecondary: 'hidden',\r\n\r\n        valProgram: null,\r\n        valPrimary: null,\r\n        valSecondary: null,\r\n\r\n        phPrimary: \"Select\",\r\n        phSecondary: \"N/A\"\r\n    }\r\n\r\n    chooseProgram = (e, program) => {\r\n        const [type, majors] = getMajors(program.value)\r\n        console.log(program.value)\r\n        this.setState({\r\n            valProgram: program.value,\r\n\r\n            valPrimary: null,\r\n            disabledPrimary: false,\r\n            hiddenPrimary: 'visible',\r\n            majorOptions: majors,\r\n            phPrimary: \"Select Major\",\r\n\r\n            valSecondary: null,\r\n            disabledSecondary: true,\r\n            hiddenSecondary: 'hidden',\r\n            minorOptions: [],\r\n            phSecondary: \"N/A\"\r\n        })\r\n\r\n        if (type === HONOURS) this.setState({phPrimary: \"Select Honour\"})\r\n        else if (type === MAJORS) this.setState({phPrimary: \"Select Major\"})\r\n        else {\r\n            this.setState({\r\n                phPrimary: \"Select Major\",\r\n                phSecondary: \"Select Minor\",\r\n                minorOptions: getMinors(program.value),\r\n                disabledSecondary: false,\r\n                hiddenSecondary: 'visible',\r\n            });\r\n        }\r\n    }\r\n\r\n    choosePrimary = (e, spec) => {\r\n        this.setState({\r\n            valPrimary: spec.value\r\n        })\r\n    }\r\n\r\n    chooseSecondary = (e, minor) => {\r\n        this.setState({\r\n            valSecondary: minor.value\r\n        })\r\n    }\r\n\r\n    clickDone = () => {\r\n        console.log('Running click')\r\n        // console.log(this.state)\r\n        console.log(this.state.valProgram, this.state.valPrimary, this.state.valSecondary)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <Grid centered style={{marginBottom: \"20px\"}}> \r\n                <Grid.Row>  \r\n                    <Dropdown\r\n                        selection\r\n                        search\r\n                        onChange={this.chooseProgram}\r\n                        options= {this.state.programOptions}\r\n                        enabled\r\n                        placeholder= 'Select Program'\r\n                    />\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Dropdown\r\n                        selection\r\n                        search\r\n                        onChange={this.choosePrimary}\r\n                        options= {this.state.majorOptions}\r\n                        disabled= {this.state.disabledPrimary}\r\n                        value= {this.state.valPrimary}\r\n                        placeholder= {this.state.phPrimary}\r\n                        style={{visibility: this.state.hiddenPrimary}}\r\n                    />\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Dropdown\r\n                        selection\r\n                        search\r\n                        onChange={this.chooseSecondary}\r\n                        options= {this.state.minorOptions}\r\n                        disabled= {this.state.disabledSecondary}\r\n                        value= {this.state.valSecondary}\r\n                        placeholder= {this.state.phSecondary}\r\n                        style={{visibility: this.state.hiddenSecondary}}\r\n                    />\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Button\r\n                    onClick={this.clickDone}\r\n                    color=\"red\"\r\n                    >Done! Print to console</Button>\r\n                </Grid.Row>\r\n            </Grid>\r\n            \r\n\r\n        </>;\r\n    }\r\n}\r\n\r\nexport default DropdownDegrees\r\n\r\n{/* <Button\r\nanimated=\"vertical\"\r\ncolor=\"red\"\r\n>\r\n<Button.Content visible>Generate degree planner</Button.Content>\r\n<Button.Content hidden>\r\n    <Icon name=\"arrow down\" />\r\n</Button.Content>\r\n</Button> */}","import React, { useState } from \"react\";\r\nimport DropdownDegrees from \"./dropdownDegrees.js\"\r\nimport { Icon, Button, Container, Modal, Header, Dropdown, Grid, Message } from 'semantic-ui-react'\r\n\r\nfunction exampleReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'OPEN_MODAL':\r\n      return { open: true, dimmer: action.dimmer }\r\n    case 'CLOSE_MODAL':\r\n      return { open: false }\r\n    default:\r\n      throw new Error()\r\n  }\r\n}\r\n\r\nfunction SideBarModal() {\r\n  const [state, dispatch] = React.useReducer(exampleReducer, {\r\n    open: false,\r\n    dimmer: undefined,\r\n  })\r\n  const { open, dimmer } = state\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        onClick={() => dispatch({ type: 'OPEN_MODAL', dimmer: 'blurring' })}\r\n      >\r\n        Click on Me :) \r\n      </Button>\r\n\r\n      <Modal\r\n        closeIcon\r\n        dimmer={dimmer}\r\n        open={open}\r\n        onClose={() => dispatch({ type: 'CLOSE_MODAL' })}\r\n      >\r\n        <Modal.Header textAlign=\"center\">Degree Planner</Modal.Header>\r\n        <Container>\r\n            <Header as=\"h3\" textAlign=\"center\" style={{marginTop: \"5px\"}}>Choose your degree</Header>\r\n            <DropdownDegrees />\r\n        </Container>\r\n        {/* <Modal.Actions>\r\n          <Button color='black' onClick={() => {\r\n              dispatch({ type: 'CLOSE_MODAL' });\r\n            }}>\r\n            Generate\r\n          </Button>\r\n        </Modal.Actions> */}\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SideBarModal\r\n\r\n//DropdownDegrees.clickDone() \r\n\r\n//DropdownDegrees d = new DropdownDegrees(); \r\n//d.clickDone()","import React, {useState} from 'react';\r\nimport DropdownDegrees from \"./dropdownDegrees.js\"\r\nimport SidebarModal from \"./sidebar-modal.js\"\r\nimport { Icon, Button, Container, Modal, Header, Dropdown, Grid, Message } from 'semantic-ui-react'\r\nimport ScrollTo from \"react-scroll-into-view\"\r\n\r\nconst example = [\r\n    { key: 'af', value: 'af', flag: 'af', text: 'Afghanistan' },\r\n    { key: 'ax', value: 'ax', flag: 'ax', text: 'Aland Islands' },\r\n    { key: 'al', value: 'al', flag: 'al', text: 'Albania' },\r\n    { key: 'dz', value: 'dz', flag: 'dz', text: 'Algeria' },\r\n    { key: 'as', value: 'as', flag: 'as', text: 'American Samoa' },\r\n    { key: 'ad', value: 'ad', flag: 'ad', text: 'Andorra' },\r\n    { key: 'ao', value: 'ao', flag: 'ao', text: 'Angola' },\r\n    { key: 'ai', value: 'ai', flag: 'ai', text: 'Anguilla' },\r\n    { key: 'ag', value: 'ag', flag: 'ag', text: 'Antigua' },\r\n    { key: 'ar', value: 'ar', flag: 'ar', text: 'Argentina' },\r\n    { key: 'am', value: 'am', flag: 'am', text: 'Armenia' },\r\n    { key: 'aw', value: 'aw', flag: 'aw', text: 'Aruba' },\r\n    { key: 'au', value: 'au', flag: 'au', text: 'Australia' },\r\n    { key: 'at', value: 'at', flag: 'at', text: 'Austria' },\r\n    { key: 'az', value: 'az', flag: 'az', text: 'Azerbaijan' },\r\n    { key: 'bs', value: 'bs', flag: 'bs', text: 'Bahamas' },\r\n    { key: 'bh', value: 'bh', flag: 'bh', text: 'Bahrain' },\r\n    { key: 'bd', value: 'bd', flag: 'bd', text: 'Bangladesh' },\r\n    { key: 'bb', value: 'bb', flag: 'bb', text: 'Barbados' },\r\n    { key: 'by', value: 'by', flag: 'by', text: 'Belarus' },\r\n    { key: 'be', value: 'be', flag: 'be', text: 'Belgium' },\r\n    { key: 'bz', value: 'bz', flag: 'bz', text: 'Belize' },\r\n    { key: 'bj', value: 'bj', flag: 'bj', text: 'Benin' }\r\n]\r\n\r\nconst Sidebar = (props) => {\r\n    return (\r\n        <Container style={{paddingLeft: \"10px\", paddingRight: \"10px\"}}>\r\n            <Header as=\"h1\" textAlign=\"center\" style={{marginTop: \"10px\"}}>Circles</Header>\r\n            <Message info>\r\n                <p>Circles is a visual degree planner for UNSW students. Choose your program and degree below to begin!</p>\r\n                <SidebarModal />\r\n            </Message>\r\n\r\n            <Grid stretched>\r\n                <Grid.Row>\r\n                    <Container>\r\n                        <Header as=\"h3\" textAlign=\"center\">Choose your courses</Header>\r\n                        <Header as=\"h4\" style={{marginBottom: 0}}>Level 1 Core Courses</Header>\r\n                        <Dropdown\r\n                            fluid\r\n                            selection\r\n                            search\r\n                            multiple\r\n                            options={example}\r\n                            placeholder=\"Select courses\"\r\n                        />\r\n\r\n                        <Header as=\"h4\" style={{marginBottom: 0}}>Level 2 Core Courses</Header>\r\n                        <Dropdown\r\n                            fluid\r\n                            selection\r\n                            search\r\n                            multiple\r\n                            options={example}\r\n                            placeholder=\"Select courses\"\r\n                        />\r\n\r\n                        <Header as=\"h4\" style={{marginBottom: 0}}>Level 3 Core Courses</Header>\r\n                        <Dropdown\r\n                            fluid\r\n                            selection\r\n                            search\r\n                            multiple\r\n                            options={example}\r\n                            placeholder=\"Select courses\"\r\n                        />\r\n                    </Container>\r\n                </Grid.Row>\r\n\r\n                <Container textAlign=\"center\">\r\n                    <ScrollTo selector=\"#DegreePlanner\">\r\n                        <Button\r\n                            animated=\"vertical\"\r\n                            color=\"red\"\r\n                        >\r\n                            <Button.Content visible>Generate degree planner</Button.Content>\r\n                            <Button.Content hidden>\r\n                                <Icon name=\"arrow down\" />\r\n                            </Button.Content>\r\n                        </Button>\r\n                    </ScrollTo>\r\n\r\n                </Container>\r\n            </Grid>\r\n        </Container>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default Sidebar","import {isNode} from 'react-flow-renderer';\r\n\r\n// HELPER FUNCTION FOR POSITIONING\r\n// Prints out positions of all nodes\r\nexport default function positionHelper(elements) {\r\n    var positioning_data = [];\r\n    for (const e of elements) {\r\n        if (isNode(e)) {\r\n            positioning_data.push({\r\n                id: e.id,\r\n                position: {x: e.position.x, y: e.position.y},\r\n            });\r\n        }\r\n    }\r\n    // Write data to position output file. Note we have to do this ourselves as we\r\n    // are making a server write to a local file.\r\n    console.log('[');\r\n    for (const e of positioning_data) {\r\n        console.log('{\"id\": \"' + e.id + '\", \"position\": {\"x\": ' + e.position.x + ', \"y\": ' + e.position.y + '}},');\r\n    }\r\n    console.log(']');\r\n}","// HELPER FUNCTION for unselecting nodes\r\n// Given a selected node, unselects it and pushes it onto a queue to be analysed\r\n// ==================ON THE QUEUE==========================\r\n// Unshift node and Manages its prerequisites as follows:\r\n//  - if the prereq node is selected, turn selected edges into potential edges\r\n//  - if otherwise, do nothing\r\n// Determine the status of the current node:\r\n//  - if it meets prerequisites, leave it as is.\r\n//  - if it does not meet prerequisites, make it unselectable (delete from selectable/selected)\r\n// For each unlock:\r\n// - if the current node is not selected, turn edge grey no matter what\r\n// - if the current node is selected, keep edge as it is\r\n// - push the unlock onto queue if it was selectable/selected\r\nimport getElement from './getelement.js';\r\nimport checkPrerequisites from './checkprerequisites.js';\r\n\r\nexport default function unselectNode(elements, node, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    // Unselect this node\r\n    delete selectedNodes[node.id];\r\n    var unselectQueue = [node.id];\r\n    while (unselectQueue.length !== 0) {\r\n        // Unshift and get the node\r\n        const current = getElement(unselectQueue.shift(), elements);\r\n        \r\n        // Analyse its prerequisites\r\n        // If the prereq node is selected, turn selected edge into potential edges\r\n        if (current.data.conditions.prerequisites !== null) {\r\n            for (const prereq of current.data.conditions.prerequisites) {\r\n                if (selectedNodes.hasOwnProperty(prereq)) {\r\n                    if (selectedEdges.hasOwnProperty('e' + prereq + '-' + current.id)) {\r\n                        delete selectedEdges['e' + prereq + '-' + current.id];\r\n                        potentialEdges['e' + prereq + '-' + current.id] = 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Determine the status of the current node\r\n        if (! checkPrerequisites(current, elements, selectedNodes)) {\r\n            // Does not meet prerequisites. Make it unselectable\r\n            if (selectableNodes.hasOwnProperty(current.id)) delete selectableNodes[current.id];\r\n            else if (selectedNodes.hasOwnProperty(current.id)) delete selectedNodes[current.id];\r\n        } else {\r\n            // Meets prerequisites. Make it selectable\r\n            if (selectedNodes.hasOwnProperty(current.id)) delete selectedNodes[current.id];\r\n            selectableNodes[current.id] = 1;\r\n        }\r\n\r\n        // Analyse its unlocks\r\n        if (current.data.unlocks !== null) {\r\n            for (const unlockCourse of current.data.unlocks) {\r\n                if (! selectedNodes.hasOwnProperty(current.id)) {\r\n                    // Make edge grey\r\n                    if (potentialEdges.hasOwnProperty('e' + current.id + '-' + unlockCourse)) delete potentialEdges['e' + current.id + '-' + unlockCourse];\r\n                    else if (selectedEdges.hasOwnProperty('e' + current.id + '-' + unlockCourse)) delete selectedEdges['e' + current.id + '-' + unlockCourse];\r\n                }\r\n\r\n                if (selectedNodes.hasOwnProperty(unlockCourse) || selectableNodes.hasOwnProperty(unlockCourse)) {\r\n                    unselectQueue.push(unlockCourse);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","// Helper functions to highlight nodes and edges\r\n// Will highlight/unhighlight nodes based on selectedNodes dictionary\r\nimport { isEdge } from \"react-flow-renderer\";\r\n\r\nconst selectedEdgeAnimated = {\r\n    stroke: \"#e94646\",\r\n    strokeWidth: 5,\r\n    opacity: 1,\r\n}\r\nconst selectedEdgeStatic = {\r\n    stroke: \"#e94646\",\r\n    strokeWidth: 5,\r\n    opacity: 1,\r\n}\r\n\r\nconst hoverEdge = {\r\n    stroke: \"ad66d1\",\r\n    strokeWidth: 3,\r\n    opacity: 1,\r\n}\r\n\r\nconst potentialHoverEdge = {\r\n    stroke: \"#3594e7\",\r\n    strokeWidth: 3,\r\n    opacity: 1,\r\n}\r\nconst potentialEdge = {\r\n    stroke: \"3594e7\",\r\n    strokeWidth: 1,\r\n    opacity: 0.3,\r\n}\r\n\r\nconst unselectedEdge = {\r\n    stroke: \"grey\",\r\n    strokeWidth: 1,\r\n    opacity: 0.2\r\n}\r\n\r\nexport default function highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges) {\r\n    const newElements = elements.map((e) => {\r\n        // It is an edge\r\n        if (isEdge(e)) {\r\n            if (selectedEdges.hasOwnProperty(e.id)) {\r\n                if (hoverEdges.hasOwnProperty(e.id)) return {...e, style: selectedEdgeAnimated, animated: true};\r\n                else return {...e, style: selectedEdgeStatic, animated: false};\r\n            } else if (potentialEdges.hasOwnProperty(e.id)) {\r\n                if (hoverEdges.hasOwnProperty(e.id)) return {...e, style: potentialHoverEdge, animated: true};\r\n                else return {...e, style: potentialEdge, animated: false};\r\n            } else if (hoverEdges.hasOwnProperty(e.id)) {\r\n                return {...e, style: hoverEdge, animated: true};\r\n            } else {\r\n                return {...e, style: unselectedEdge, animated: false};\r\n            } \r\n        }\r\n\r\n        // It is a node\r\n        if (selectedNodes.hasOwnProperty(e.id)) {\r\n            if (e.style.background === 'white') {\r\n                // It was previously a selectable node. Adjust colours accordingly\r\n                const backgroundColour = e.style.color;\r\n                return {...e, style: {...e.style, color: 'white', background: backgroundColour, filter: 'brightness(1.15)'}}\r\n            } else {\r\n                // It was an unselected node or an already selected node. Simply make sure its brightness is adjusted\r\n                return {...e, style: {...e.style, filter: 'brightness(1.15)'}};\r\n            }\r\n        } else if (selectableNodes.hasOwnProperty(e.id)) {\r\n            if (e.style.background === 'white') {\r\n                // It was already a selectable node. Do not need to adjust\r\n                return {...e};\r\n            } else {\r\n                // It was an unselected node or an already selected node. Adjust text colour and background\r\n                const textColour = e.style.background;\r\n                return {...e, style: {...e.style, color: textColour, background: 'white', filter: 'brightness(1.15)'}};\r\n            }\r\n        } else {\r\n            if (e.style.background === 'white') {\r\n                // It was a selectable node previously. Adjust colours accordingly\r\n                const backgroundColour = e.style.color;\r\n                return {...e, style: {...e.style, color: 'white', background: backgroundColour, filter: 'brightness(0.65)'}}; \r\n            } else {\r\n                // It was either unselected or an already selected node. Simply adjust brightness\r\n                return {...e, style: {...e.style, filter: 'brightness(0.65)'}};\r\n            }\r\n        }\r\n    })\r\n\r\n    return newElements;\r\n}","import React, {useState} from 'react';\r\nimport ReactFlow, {Background, Controls, getConnectedEdges, isNode, isEdge, useStoreState, useStoreActions, ReactFlowProvider, EdgeText} from 'react-flow-renderer';\r\n\r\nimport CustomNode1 from '../../components/customnode1.js';\r\nimport CustomNode2 from '../../components/customnode2.js';\r\nimport HeaderNode1 from '../../components/headernode1.js';\r\n\r\nimport HoverInfo from '../../components/hoverinfo.js';\r\nimport hoverPrerequisites from '../../components/hoverprerequisites.js';\r\nimport unhoverPrerequisites from '../../components/unhoverprerequisites.js';\r\n\r\nimport DropdownD from \"../../components/dropdownDegrees.js\"\r\nimport { Grid, Segment } from 'semantic-ui-react'\r\nimport Sidebar from \"../../components/sidebar.js\"\r\nimport pkg from 'semantic-ui-react/package.json'\r\n\r\nimport DegreePlanner from \"../../components/degreeplanner.js\"\r\nimport DropdownDegrees from '../../components/dropdownDegrees';\r\n\r\nimport positionHelper from '../../components/positionhelper.js';\r\nimport selectNode from '../../components/selectnode.js';\r\nimport unselectNode from '../../components/unselectnode.js';\r\nimport highlightElements from '../../components/highlightelements.js';\r\nimport getSelectable from '../../components/getselectable.js';\r\nimport checkPrerequisites from '../../components/checkprerequisites';\r\nimport exclusionSwap from '../../components/exclusionswap.js';\r\n\r\nvar elementsData = require(\"./data.json\");\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {\r\n    'SENGAH': 1\r\n}\r\nvar selectedEdges = {};\r\nvar selectableNodes = {};\r\nvar potentialEdges = {};\r\nvar hoverEdges = {};\r\n\r\n// Load up the chart with initial selectable nodes and edges\r\nfor (const node of nodesData) {\r\n    if (selectedNodes.hasOwnProperty(node.id)) {\r\n        if (node.data.unlocks === null) continue;\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n        }\r\n    } else if (checkPrerequisites(node, elementsData, selectedNodes)) {\r\n        selectableNodes[node.id] = 1;\r\n    }\r\n}\r\n\r\nvar exclusionGroups = require(\"./data_exclusion.json\");\r\nvar exclusionNodes = {};\r\nfor (const group of exclusionGroups) {\r\n    for (const exclusion of group) {\r\n        exclusionNodes[exclusion] = 1;\r\n    }\r\n}\r\n\r\nelementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\n\r\nconst onLoad = (reactFlowInstance) => {\r\n    for (var group of exclusionGroups) {\r\n        const last = group.pop();\r\n\r\n        for (var course of elementsData) {\r\n            if (last === course.id) {\r\n                course.isHidden = true;\r\n                // console.log(\"Hiding \" + course.id);\r\n                // Get all the edges and hide them too\r\n                for (var edge of elementsData) {\r\n                    if (isNode(edge)) continue;\r\n                    if (edge.source === last || edge.target === last) {\r\n                        // console.log(\"hiding \" + edge.id);\r\n                        edge.isHidden = true;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        group.push(last);\r\n    }\r\n    reactFlowInstance.setTransform({x: 470, y: 350, zoom: 0.38});\r\n};\r\n\r\nconst nodeTypes = {\r\n    custom1: CustomNode1,\r\n    custom2: CustomNode2,\r\n    header1: HeaderNode1\r\n};\r\n\r\nconst layoutStyle = {overflowX: \"hidden\", overflowY: \"overlay\", width: \"100vw\", height: \"100vh\"};\r\n\r\n\r\nconst BESengah = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverText, setHoverText] = useState(false);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    const [sidebarOpen, setSidebarOpen] = useState(false);\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n    const [layout, setLayout] = useState(layoutStyle);\r\n\r\n    const selectUnselect = (element) => {\r\n        // NOTE: Might not need this?????\r\n        // EXPLANATION: Reason we dont need it is because we have to leave node\r\n        // anyways to hover another node. But maybe good practise to have just in case\r\n        // Unhover edges which lit up on nodeMouseEnter\r\n        unhoverPrerequisites(hoverEdges);\r\n\r\n        // 1. Select the node and fill in edges.\r\n        // - Deal with unselecting nodes\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"MAINSELECT\");\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"UNSELECTING\");\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n        \r\n        console.log(\"==========SelectedNodes==========\");\r\n        console.log(selectedNodes);\r\n        console.log(\"==========SelectedEdges==========\");\r\n        console.log(selectedEdges);\r\n        console.log(\"==========SelectableNodes==========\");\r\n        console.log(selectableNodes);\r\n        console.log(\"==========PotentialEdges==========\");\r\n        console.log(potentialEdges);\r\n\r\n        // 2. Determine which nodes are now selectable\r\n        // - Determine which previously selectable nodes are now unselectable\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n\r\n        // After selecting node:\r\n\r\n\r\n        // Render graph accordingly\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const toggleExclusion = (element) => {\r\n        // TODO: ARE there courses which do not \r\n        // For all immediate edges of the element, swap\r\n        // with the exclusion course\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    // ==========ONCLICK==========\r\n    const onElementClick = (event, element) => {\r\n        // console.log(\"ONELEMENTCLICK\");\r\n        if (isEdge(element)) return; // Don't care about edges\r\n        if (element.id === 'SENGAH') return; // Cannot click on main node\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return; // Cannot select non selectable nodes\r\n\r\n        // Determine double or single click for exclusion nodes\r\n        // This will prevent normal nodes from waiting the double click delay\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 200);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            // Not an exclusion node.\r\n            selectUnselect(element);\r\n        }\r\n    };\r\n    // ===========================\r\n\r\n    // ==========ONHOVER==========\r\n    const onNodeMouseEnter = (event, node) => {\r\n        // Display node information in top left\r\n        setHoverText(true);\r\n        setHoverNode(node);\r\n\r\n        // If the node is unselected, highlight prerequisite edges in purple\r\n        //if ((!selectedNodes.hasOwnProperty(node.id)) && (!selectableNodes.hasOwnProperty(node.id))) {\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        //}\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        setHoverText(false);\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    let hoverDisplay;\r\n    if (hoverText) {\r\n        hoverDisplay = <HoverInfo node={hoverNode}/>\r\n    }\r\n    // ===========================\r\n\r\n    const onNodeContextMenu = (event, node) => {\r\n        // console.log(\"THE EVEENT\");\r\n        // console.log(event);\r\n    }\r\n\r\n    const onNodeDragStop = (event, node) => {\r\n        for (var e of elements) {\r\n            if (e.id === node.id) {\r\n                e.position.x = node.position.x;\r\n                e.position.y = node.position.y;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const disableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'hidden'});\r\n    }\r\n\r\n    const enableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'overlay'});\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div style={layout}>\r\n            <Grid columns={2} divided>\r\n                <Grid.Column width=\"12\">\r\n                    <div onMouseEnter={disableBodyScroll} onMouseLeave={enableBodyScroll}>\r\n                        <ReactFlowProvider>\r\n                            <ReactFlow\r\n                                elements={elements}\r\n                                style={{width: '100%', height: '100vh'}}\r\n                                onLoad={onLoad}\r\n                                nodeTypes={nodeTypes}\r\n                                nodesConnectable={false}\r\n                                onElementClick={onElementClick}\r\n                                minZoom={0.38}\r\n                                //setInitTransform={TransformUpdater({x: 100, y: 100, z: 1})}\r\n                                //nodesDraggable={false}\r\n                                onNodeMouseEnter={onNodeMouseEnter}\r\n                                onNodeMouseLeave={onNodeMouseLeave}\r\n                                selectNodesOnDrag={false}\r\n                                onNodeContextMenu={onNodeContextMenu}\r\n                                onNodeDragStop={onNodeDragStop}\r\n                                elementsSelectable={false}\r\n                            >\r\n                            </ReactFlow>\r\n                            {hoverDisplay}\r\n                        </ReactFlowProvider>\r\n                    </div>                    \r\n                </Grid.Column>\r\n                <Grid.Column width=\"4\">\r\n                    <Sidebar/>\r\n                    {/* <DegreePlanner/> */}\r\n                </Grid.Column>\r\n            </Grid>\r\n            <button onClick={positionHelper(elements)}>GENERATE POSITION</button>\r\n            <div id=\"DegreePlanner\">\r\n                <DegreePlanner />\r\n            </div>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\nBESengah.whyDidYouRender = true;\r\n\r\nexport default BESengah;","// HELPER FUNCTION for selecting nodes\r\n// Given a selectable node, highlights potential edges and fills in prereq edges\r\nimport checkPrerequisites from './checkprerequisites.js';\r\nimport getElement from './getelement.js';\r\n\r\nexport default function selectNode(elements, node, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    selectedNodes[node.id] = 1;\r\n    delete selectableNodes[node.id];\r\n\r\n    // Turn its prerequisite potential edges into actual edges\r\n    // Keep grey edges as grey\r\n    if (node.data.conditions.prerequisites !== null) {\r\n        for (const prereq of node.data.conditions.prerequisites) {\r\n            if (potentialEdges.hasOwnProperty('e' + prereq + '-' + node.id)) {\r\n                selectedEdges['e' + prereq + '-' + node.id] = 1;\r\n                delete potentialEdges['e' + prereq + '-' + node.id];\r\n            }\r\n        }\r\n    }\r\n\r\n    // Unlock its future edges\r\n    if (node.data.unlocks !== null) {\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            // Edges from node to unlocks should be unselected\r\n            if (selectedNodes.hasOwnProperty(unlockCourse)) {\r\n                // This course is already selected. Make the edge a selected edge\r\n                selectedEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n            } else {\r\n                // This course is either unselected or selectable\r\n                // In either case, add potential edge\r\n                potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n            }\r\n        }            \r\n    }\r\n\r\n    return;\r\n}\r\n","// HELPER FUNCTION to determine which previously unselectable nodes\r\n// are now selectable\r\nimport checkPrerequisites from './checkprerequisites.js';\r\nimport getElement from './getelement.js';\r\nimport {isNode} from 'react-flow-renderer';\r\n\r\nexport default function getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    // TODO: Deal with outsider nodes\r\n\r\n    const analyseNodesKeys = [];\r\n    for (const e of elements) {\r\n        if (isNode(e)) {\r\n            analyseNodesKeys.push(e);\r\n        }\r\n    }\r\n\r\n    // Analyse the target of potential edges for potential nodes\r\n    /*var analyseNodes = {};\r\n    const potentialEdgesKeys = Object.keys(potentialEdges);\r\n    for (var edge of potentialEdgesKeys) {\r\n        // Get the target course\r\n        const target = edge.split('-')[1];\r\n\r\n        if ((! selectedNodes.hasOwnProperty(target)) && (! selectableNodes.hasOwnProperty(target))) {\r\n            analyseNodes[edge.split('-')[1]] = 1;\r\n        }\r\n    }*/\r\n\r\n    \r\n    //const analyseNodesKeys = Object.keys(analyseNodes);\r\n    //console.log(\"==========ANALYSE NODES KEYS===========\");\r\n    //console.log(analyseNodesKeys);\r\n    //console.log(\"==============ELEMENTS===============\");\r\n    //console.log(elements);\r\n\r\n    for (const node of analyseNodesKeys) {\r\n        // Determine if the prerequisite has been met\r\n        //const node = getElement(nodeID, elements);\r\n        //console.log(node);\r\n        \r\n        // If the node is already selected, don't bother making it selectable\r\n        if (selectedNodes.hasOwnProperty(node.id)) continue;\r\n\r\n\r\n        if (checkPrerequisites(node, elements, selectedNodes)) {\r\n            //console.log(\"SELECTABLE\");\r\n            //console.log(node.id);\r\n            selectableNodes[node.id] = 1;\r\n        } else {\r\n            if (selectableNodes.hasOwnProperty(node.id)) delete selectableNodes[node.id];\r\n            //console.log(\"DELETE UNSELECTABLE\");\r\n            //console.log(node.id);\r\n            // TODO: Deal with selected nodes cases? (e.g. unselecting a child???)\r\n\r\n        }\r\n    }\r\n}","// HELPER FUNCTION to toggle exclusion courses\r\n// Will hide the current course and its edges, unhide the next course and edges\r\n// in the queue. Finds new edges to show by regex substitution???\r\nimport { getConnectedEdges } from 'react-flow-renderer';\r\nimport getElement from './getelement.js';\r\nimport checkPrerequisites from './checkprerequisites.js';\r\nimport unselectNode from './unselectnode.js';\r\n\r\nexport default function exclusionSwap(node, elements, edges, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups) {\r\n    /*console.log(\"EXCLUSION SWAP\");\r\n    console.log(exclusionGroups);\r\n    console.log(node.id);*/\r\n    const newElements = [...elements];\r\n    for (var group of exclusionGroups) {\r\n        //console.log(\"CHECKING\", group);\r\n        if (group.includes(node.id)) {\r\n            //console.log(\"FOUND THE EXCLUSION GROUP\");\r\n            //console.log(group);\r\n\r\n            // Move this to the back\r\n            const prevCourse = group.shift();\r\n            group.push(prevCourse);\r\n\r\n            // Current course we need to display is now at front of queue\r\n            const curCourse = group[0];\r\n\r\n            //console.log(prevCourse);\r\n            //console.log(curCourse);\r\n\r\n\r\n            // Toggle the nodes themselves accordingly\r\n            for (var e of elements) {\r\n                if (e.id === prevCourse) {\r\n                    /*console.log(e);\r\n                    console.log(\"HIDING\");\r\n                    console.log(prevCourse);*/\r\n                    e.isHidden = true;\r\n                    //console.log(e);\r\n                } else if (e.id === curCourse) {\r\n                    /*console.log(e);\r\n                    console.log(\"REVEALING\");\r\n                    console.log(curCourse);*/\r\n                    e.isHidden = false;\r\n                    //console.log(e);\r\n                }\r\n            }\r\n\r\n            // Determine state of the nodes (E.g. COMP6441 can be selectable\r\n            // whilst COMP6841 is not)\r\n            var curNode = getElement(curCourse, elements);\r\n            if (checkPrerequisites(curNode, elements, selectedNodes)) {\r\n                // The new node is selectable\r\n                //console.log(\"================== SELECTABLE\", curCourse);\r\n                selectableNodes[curCourse] = 1;\r\n                \r\n                // Determine previous node condition\r\n                if (selectedNodes.hasOwnProperty(prevCourse)) {\r\n                    //console.log(\"PREVIOUS SELECTED\", prevCourse);\r\n                    delete selectedNodes[prevCourse];\r\n                    delete selectableNodes[curCourse];\r\n                    selectedNodes[curCourse] = 1;\r\n                } else if (selectableNodes.hasOwnProperty(prevCourse)) {\r\n                    //console.log(\"PREVIOUS SELECTABLE\", prevCourse);\r\n                    delete selectableNodes[prevCourse];\r\n                }\r\n            } else {\r\n                // The new node is not selectable\r\n                // Unselect the original node\r\n                unselectNode(elements, node, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            }         \r\n\r\n            // Get all the edges of the previous course and hide all of them\r\n            // Then use regex sub to determine the new edges to reveal\r\n            // Transfer over selected, potential and hover edges if they are in newedgeslist\r\n            var edgesList = getConnectedEdges([node], edges);\r\n            var newEdgesList = getConnectedEdges([curNode], edges);\r\n            var edgesIds = [];\r\n            var newEdgesIds = [];\r\n            for (const edge of edgesList) {\r\n                edgesIds.push(edge.id);\r\n            }\r\n            for (const newEdge of newEdgesList) {\r\n                newEdgesIds.push(newEdge.id);\r\n            }        \r\n            var checkedEdges = [];\r\n\r\n            // Go through each edge we need to hide and check what we should do\r\n            // with the edge in hideEdgesList\r\n            for (const edge of edgesList) {\r\n                var hideEdge = getElement(edge.id, elements);\r\n                hideEdge.isHidden = true;\r\n                var newEdgeId = hideEdge.id.replace(prevCourse, curCourse);\r\n                if (getElement(newEdgeId, edges) !== null) {\r\n                    checkedEdges.push(newEdgeId);\r\n                } \r\n\r\n                // If selected, unselect it\r\n                if (selectedEdges.hasOwnProperty(hideEdge.id)) {\r\n                    delete selectedEdges[hideEdge.id];\r\n                    if (newEdgesIds.includes(newEdgeId)) {\r\n                        // This is in the newEdges list. Transfer the edge property\r\n                        selectedEdges[newEdgeId] = 1;\r\n                    }\r\n                }\r\n\r\n                // If potential, unpotential it\r\n                if (potentialEdges.hasOwnProperty(hideEdge.id)) {\r\n                    delete potentialEdges[hideEdge.id];\r\n                    if (newEdgesIds.includes(newEdgeId)) {\r\n                        // This is in the newEdges list. Transfer the edge property\r\n                        potentialEdges[newEdgeId] = 1;\r\n                    }\r\n                }\r\n\r\n                // If hover, unhover it\r\n                if (hoverEdges.hasOwnProperty(hideEdge.id)) {\r\n                    delete hoverEdges[hideEdge.id];\r\n                    if (newEdgesIds.includes(newEdgeId)) {\r\n                        // This is in the newEdges list. Transfer the edge property\r\n                        hoverEdges[newEdgeId] = 1;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            //console.log(\"CHECKED EDGES\", checkedEdges);\r\n            \r\n            for (const edge of edgesIds) {\r\n                const newEdgeId = edge.replace(prevCourse, curCourse);\r\n                if (! checkedEdges.includes(newEdgeId)) {\r\n                    // Old edge which has not been transferred to new edge.\r\n                    // Deal with the TARGET NODE SELECTABILITY right here\r\n                    var target = newEdgeId.split('-')[1];\r\n                    //console.log(\"CHECKING\", newEdgeId);\r\n                    //console.log(\"TARGET IS\", target);\r\n                    // Note that we cannot use newEdge.target as this edge\r\n                    // DOES NOT EXIST ( i think )\r\n\r\n                    // TODO: TEMPORARY FIX. Make sure target is not current course\r\n                    if (target === curCourse) continue;\r\n\r\n                    if (selectableNodes.hasOwnProperty(target)) {\r\n                        //console.log(\"Deleting \" + target);\r\n                        delete selectableNodes[target];\r\n                    }\r\n                }\r\n            }\r\n\r\n            // For each edge, show it IF TARGET AND SOURCE ARE NOT HIDDEN\r\n            // Will also show any additional edges\r\n            // (Example: COMP6441, COMP6841. COMP6841 -> COMP6448 but COMP6441 does not)\r\n            for (const newEdge of newEdgesList) {\r\n                var edge = getElement(newEdge.id, elements);\r\n                const sourceNode = getElement(edge.source, elements);\r\n                const targetNode = getElement(edge.target, elements);\r\n                if ((!sourceNode.isHidden) && (!targetNode.isHidden)) {\r\n                    // Show the edge if both nodes are not hidden\r\n                    edge.isHidden = false;    \r\n                }\r\n\r\n                // Determine if this edge has been checked before\r\n                if (checkedEdges.includes(newEdge.id)) {\r\n                    // It has been checked before\r\n                    // TODO: THIS CAN BREAK if both nodes have same edges\r\n                    // but one has an additional prerequisite??????\r\n                    continue;\r\n                } else {\r\n                    //console.log(newEdge.id + \" NOT BEEN CHECKED BEFORE\")\r\n                    // It has NOT been checked before\r\n                    if (selectedNodes.hasOwnProperty(curCourse)) {\r\n                        //console.log(curCourse + \" was previously seleted\");\r\n                        potentialEdges[newEdge.id] = 1;\r\n                        // Check if the target node is selectable\r\n                        if (! selectableNodes.hasOwnProperty(edge.target)) {\r\n                            if (checkPrerequisites(targetNode, elements, selectedNodes)) {\r\n                                //console.log(edge.target + \" DOES MEET PREREQS\");\r\n                                selectableNodes[targetNode.id] = 1;\r\n                            } else {\r\n                                //console.log(edge.target + \" DOES NOT MEET PREREQS\");\r\n                            }\r\n                        }\r\n                    } else {\r\n                        //console.log(curCourse + \" was not previously selected\")\r\n                        // The node was not selected before. Delete any potential edges\r\n                        // Make target node unselectable if prereqs are not met\r\n                        if (potentialEdges.hasOwnProperty(edge.id)) {\r\n                            //console.log(\"DELETING \" + edge.id);\r\n                            delete potentialEdges[edge.id];\r\n                            if (selectableNodes.hasOwnProperty(edge.target)) {\r\n                                //console.log(edge.target + \" WAS SELECTABLE\")\r\n                                if (! checkPrerequisites(targetNode, elements, selectedNodes)) {\r\n                                    //console.log(edge.target + \" DOES NOT MEET PREREQS\");\r\n                                    delete selectableNodes[targetNode.id];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            /*for (const newEdge of newEdgesList) {\r\n                for (const edge of newElements) {\r\n                    if (newEdge.id === edge.id) {\r\n                        const sourceNode = getElement(edge.source, elements);\r\n                        const targetNode = getElement(edge.target, elements);\r\n                        if ((!sourceNode.isHidden) && (!targetNode.isHidden)) {\r\n                            edge.isHidden = false;\r\n                            \r\n                            \r\n                            // If the new node is selected, make this edge blue\r\n                            // Else, make this edge grey. Deals with differing edge\r\n                            // cases COMP6441 and COMP6841\r\n                            if (selectedNodes.hasOwnProperty(curCourse)) {\r\n                                potentialEdges[edge.id] = 1;\r\n                                // Make sure the target node is selectable\r\n                                if (! selectableNodes.hasOwnProperty(edge.target)) {\r\n                                    if (checkPrerequisites(targetNode, selectedNodes)) {\r\n                                        selectableNodes[targetNode.id] = 1;\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                if (potentialEdges.hasOwnProperty(edge.id)) {\r\n                                   delete potentialEdges[edge.id];\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }*/\r\n\r\n\r\n            break;\r\n        }\r\n    }\r\n\r\n    return newElements;\r\n}","// HELPER FUNCTION to highlight prerequisites in purple on hover\r\n// When hovering over an unselected node, show a path of edges\r\n// which will stop at a selected/selectable node\r\nimport getElement from './getelement.js';\r\n\r\nexport default function hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges) {\r\n    if (node.data.conditions.prerequisites === null) return;\r\n    // Get all selected edges one layer down and add to hover edges\r\n    for (const prereq of node.data.conditions.prerequisites) {\r\n        if (selectedEdges.hasOwnProperty('e' + prereq + '-' + node.id)) {\r\n            hoverEdges['e' + prereq + '-' + node.id] = 1;\r\n        }\r\n    }\r\n\r\n    // hoverEdge all unselected (AND POTENTIAL???) edges until we hit selected/selectable node\r\n    var prereqQueue = [node.id];\r\n    while (prereqQueue.length !== 0) {\r\n        const current = getElement(prereqQueue.shift(), elements);\r\n        // Make sure this course exists as a node in our map\r\n        if (current === null) continue;\r\n\r\n        if (current.data.conditions.prerequisites === null) continue;\r\n\r\n        for (const prereq of current.data.conditions.prerequisites) {\r\n            if (!selectedEdges.hasOwnProperty('e' + prereq + '-' + current.id)) {\r\n                hoverEdges['e' + prereq + '-' + current.id] = 1;\r\n            }\r\n            /*if ((!selectedEdges.hasOwnProperty('e' + prereq + '-' + current.id)) && (!potentialEdges.hasOwnProperty('e' + prereq + '-' + current.id))) {\r\n                hoverEdges['e' + prereq + '-' + current.id] = 1;\r\n            }*/\r\n\r\n            if ((!selectedNodes.hasOwnProperty(prereq)) && (!selectableNodes.hasOwnProperty(prereq))) {\r\n                prereqQueue.push(prereq);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import React, {useState, Fragment} from 'react';\r\nimport ReactFlow, {Background, Controls, MiniMap} from 'react-flow-renderer';\r\n\r\nvar initialElements = [\r\n    {id: '1', style: {opacity: 1}, position: {x: 0, y: 0}, data: {label: 'VINCENT'}, type: 'default'},\r\n    {id: '2', style: {opacity: 1}, position: {x: 0, y: 100}, data: {label: 'HAYES'}, type: 'default'},\r\n    {id: '3', style: {opacity: 1}, position: {x: 0, y: -100}, data: {label: 'JAMES'}, type: 'default'},\r\n    \r\n    {id: 'e1-2', source: '1', target: '2', type: 'step', animated: true}\r\n];\r\n\r\nconst onLoad = (reactFlowInstance) => {\r\n    reactFlowInstance.fitView();\r\n}\r\n\r\nconst Teaching = () => {\r\n    const [elements, setElements] = useState(initialElements);\r\n    const [isDraggable, setIsDraggable] = useState(true);\r\n\r\n    const addNode = () => {\r\n        setElements(e => e.concat({\r\n            id: (e.length+1).toString(),\r\n            data: {label: 'new node' + e.length},\r\n            position: {x: Math.random() * window.innerWidth, y: Math.random() * window.innerHeight}\r\n        }));\r\n    };\r\n    \r\n\r\n    const onClick = (event, element) => {\r\n        console.log('hi');\r\n        setElements((els) =>\r\n            els.map((e) => {\r\n                if (e.id === element.id) {\r\n                    console.log(element);    \r\n                    console.log(e.style.opacity);\r\n                    return e;\r\n                }\r\n                return e;\r\n            })\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <ReactFlow\r\n                elements={elements}\r\n                onLoad={onLoad}\r\n                style={{width: \"100%\", height: \"99vh\"}}\r\n                onElementClick={onClick}\r\n                nodesDraggable={false}\r\n            >\r\n                <Background />\r\n                <MiniMap \r\n                    nodeColor = {n=>{\r\n                        if (n.data.label === 'VINCENT') return 'red';\r\n                        return 'blue';\r\n                    }}\r\n                />\r\n                <Controls />\r\n            </ReactFlow>\r\n            <div>\r\n                <button type=\"button\" onClick={addNode}>\r\n                    ADD NEW NODE HERE!!!!\r\n                </button>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Teaching;","import React, {Component} from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Link,\r\n  Redirect,\r\n  HashRouter\r\n} from 'react-router-dom';\r\n\r\nimport BESengah from './maps/EngineeringHonoursSoftware/map.js';\r\nimport Teaching from './components/teaching.js';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <HashRouter basename='/'>\r\n        <div>\r\n          <Route path=\"/\" component={BESengah} />\r\n          <Route path=\"/Teaching\" component={Teaching}/>\r\n        </div>\r\n      </HashRouter>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}