{"version":3,"sources":["assets/refresh.svg","components/checkprerequisites.js","components/getelement.js","components/degreeplanner-course.jsx","components/degreeplanner-term.jsx","components/degreeplanner.js","components/customnode1.js","components/customnode2.js","components/headernode1.js","components/hoverinfo.js","components/hoverprerequisites.js","components/unhoverprerequisites.js","components/dropdownDegrees.js","components/sidebar-modal.js","components/tutorialnode1.js","components/tutorialnode2.js","components/highlightelements.js","components/selectnode.js","components/unselectnode.js","components/getselectable.js","components/exclusionswap.js","components/unselectunconnected.js","components/interactivetutorial.js","components/tutorial-modal.js","components/sidebar.js","components/dropdownsearch.js","components/positionhelper.js","maps/EngineeringHonoursSoftware/map.js","maps/ComputerScienceCOMPA1ACCTA2/map.js","maps/ComputerScienceCOMPA1MARKA2/map.js","maps/ComputerScienceCOMPA1INFSA2/map.js","maps/ComputerScienceCOMPA1PSYCM2/map.js","maps/EngineeringHonoursSoftware/teaching.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","checkPrerequisites","node","elements","selectedNodes","data","conditions","units_required","level_for_units_required","checkPrerequisiteUnitsLevel","prerequisites","prereqs_executable","checkPrerequisiteUnits","condition","replace","match","hasOwnProperty","eval","total","target","Object","keys","selected","id","getElement","units","core_year","courseType","substr","concat","selectedList","takenNode","elementsData","e","Course","Container","draggableId","this","props","course","index","provided","ref","innerRef","draggableProps","dragHandleProps","Label","style","margin","display","flexGrow","content","courseId","marginLeft","alignSelf","rel","href","Icon","name","placeholder","React","Component","checkTermAvailability","termId","term","substring","allCourses","termsAvailable","includes","placeholderTerms","checkValidCourses","courseIds","Term","droppableId","snapshot","Segment","backgroundColor","isDraggingOver","draggingOverWith","transition","Header","as","title","filter","c","reduce","colour","color","floating","showUnits","droppableProps","minHeight","courses","map","key","REGEX_COURSE_CODE","mapTermIds","mapTermFull","updateCourses","coursesJSON","dataJSON","forEach","terms","rawCoursesJSON","getCourses","selectedCourses","course_name","generateTerms","yearId","TSKey","T1Key","T2Key","T3Key","addPriority","priority","unlocksCourse","prereq","unlocks","push","prioritiseCourses","level","Number","t","length","prioritised","values","sort","a","b","checkPrereqsMet","termPlan","runningTotalUnits","prereqsExecutable","coursesTaken","addCourseToPlan","courseUnits","populateTerms","maxYears","prioritisedCourses","year","makePlan","plan","generatePlanScaffold","years","toString","DegreePlanner","state","onDragEnd","result","destination","source","sourceYear","start","destinationYear","finish","startCourseIds","Array","from","splice","newStart","finishCourseIds","newFinish","newState","setState","newCourseIds","newTerm","getConsiderationMessages","programId","specialisationId","programUnits","programsJSON","degreeUnits","specialisationsJSON","considerationMessages","getCourseLink","getCoursesInLevel","rawList","flat","allCourseIds","courseList","totalUnits","Item","coreCourses","levelName","structure","levelCourses","selectedUnits","replaceAll","join","marginBottom","positive","List","error","textAlign","marginTop","onDragStart","columns","termOrder","Column","fluid","height","padding","zIndex","pointerEvents","opacity","top","memo","type","position","course_code","iconSize","width","bottom","src","Refresh","alt","degree_name","left","maxWidth","HoverInfo","raised","raw","exclusions","hoverPrerequisites","selectedEdges","selectableNodes","potentialEdges","hoverEdges","prereqQueue","current","shift","unhoverPrerequisites","edge","courseOptions","programOptions","code","degrees_involved","majors","honours","replacement","spec","getMajors","minors","console","log","getMinors","DropdownDegrees","majorOptions","minorOptions","disabledPrimary","disabledSecondary","hiddenPrimary","hiddenSecondary","valProgram","valPrimary","valSecondary","phPrimary","phSecondary","chooseProgram","program","value","choosePrimary","chooseSecondary","minor","getLink","supported","isDisabled","messageVisible","getMessage","Message","warning","Grid","centered","Row","Dropdown","selection","search","onChange","options","enabled","disabled","visibility","clearable","Button","exampleReducer","action","open","dimmer","Error","SideBarModal","useReducer","undefined","dispatch","size","onClick","Modal","closeIcon","onClose","instructions","selectedEdgeAnimated","stroke","strokeWidth","selectedEdgeStatic","hoverEdge","potentialHoverEdge","potentialEdge","unselectedEdge","highlightElements","isEdge","animated","textSelectedColour","background","selectedColour","textColour","selectableColour","selectNode","unlockCourse","unselectNode","unselectQueue","getSelectable","analyseNodesKeys","isNode","exclusionSwap","edges","exclusionGroups","newElements","group","prevCourse","curCourse","isHidden","curNode","edgesList","getConnectedEdges","newEdgesList","edgesIds","newEdgesIds","newEdge","checkedEdges","hideEdge","newEdgeId","split","sourceNode","targetNode","unselectUnconnected","selectedNode","trueSelectedNodes","selectedUnlockQueue","curUnlock","selectedUnitsNode","checkPrequisiteUnits","selectable","selectableNode","course_level","corequisites","other","equivalents","x","y","alignItems","justifyContent","fontSize","borderRadius","border","edgesData","exclusionNodes","nodeTypes","tutorial1","TutorialNode1","tutorial2","TutorialNode2","InteractiveTutorial","useState","setElements","setHoverNode","clickCount","singleClickTimer","selectUnselect","element","onLoad","reactFlowInstance","exclusion","last","pop","fitView","nodesConnectable","onElementClick","event","setTimeout","clearTimeout","toggleExclusion","paneMoveable","selectNodesOnDrag","elementsSelectable","nodesDraggable","onNodeMouseEnter","onNodeMouseLeave","TutorialModal","getSelectedCourses","specialisationCode","levels","minUnits","unitsTaken","horizontal","Sidebar","paddingLeft","paddingRight","info","flexDirection","Divider","selector","Content","visible","hidden","nodeOptions","elementsList","text","DropdownSearch","setSearch","setInitTransform","useStoreActions","actions","clickDone","canvasSize","k","prop","onKeyPress","icon","positionHelper","positioning_data","specialisations","slice","nodesData","specialisation","require","custom1","CustomNode1","custom2","CustomNode2","header1","HeaderNode1","layoutStyle","overflowX","overflowY","getMoreCoursesForDropdown","moreOptions","nodesOnFlowchart","BESengah","hoverText","setHoverText","hoverNode","layout","setLayout","setReactFlowInstance","additionalCourses","setAdditionalCourses","dropSearch","size1","project","window","innerWidth","innerHeight","size2","getCanvasSize","hoverDisplay","positon","divided","onMouseEnter","onMouseLeave","instance","setTransform","zoom","minZoom","onNodeDragStop","right","multiple","ComputerScienceCOMPA1ACCTA2","ComputerScienceCOMPA1MARKA2","ComputerScienceCOMPA1INFSA2","ComputerScienceCOMPA1PSYCM2","Teaching","App","basename","path","component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f0d46a24.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/refresh.5c376b6e.svg\";","// Returns true if all prerequisites are met for a given node\r\n// Returns false if prerequisites are not met for a given node\r\n// Will only analyse targets of potential edges\r\n\r\nimport getElement from './getelement.js';\r\n\r\n// NOTE: Assumes that source of potential edges are always selected\r\nexport default function checkPrerequisites(node, elements, selectedNodes) {\r\n    if (node.data.conditions.units_required !== null && node.data.conditions.level_for_units_required !== null) {\r\n        // Get the type of course this is\r\n        return(checkPrerequisiteUnitsLevel(node, elements, selectedNodes));\r\n    }\r\n\r\n    if (node.data.conditions.prerequisites !== null && node.data.conditions.prereqs_executable !== null) {\r\n        // Evaluate the condition\r\n        //console.log(\"HERE\");\r\n        //console.log(node.data.conditions.prereqs_executable);\r\n\r\n        // Check if units have been met if it has a unit requirement\r\n        if (node.data.conditions.units_required !== null) {\r\n            return(checkPrerequisiteUnits(node, elements, selectedNodes));\r\n        }\r\n\r\n        var condition = node.data.conditions.prereqs_executable;\r\n        //console.log(condition);\r\n        condition = condition.replace(/[A-Z]{4}[A-Z0-9]+/gi, function(match) {\r\n            //console.log(match);\r\n            if (selectedNodes.hasOwnProperty(match)) {\r\n                return 1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        });\r\n        // eslint-disable-next-line\r\n        if (eval(condition)) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    return(checkPrerequisiteUnits(node, elements, selectedNodes));\r\n\r\n    // TODO: Check for corerequsiites and exclusion courses as well\r\n    // TODO: Check for completion of units and core_year\r\n\r\n    // Check if these nodes are enough to satisfy prerequisites\r\n    // Get the prerequisite condition and replace courses by 1 if they have been\r\n    // selected and 0 if they have not.\r\n\r\n}\r\n\r\n// Perform prerequisite check for units given the node to check, elements and all\r\n// the selected nodes. Returns true/false\r\nexport function checkPrerequisiteUnits(node, elements, selectedNodes) {\r\n    if (node.data.conditions.units_required !== null) {\r\n        if (node.data.conditions.level_for_units_required === null) {\r\n            // See if we meet the total for this course\r\n            var total = 0;\r\n            const target = node.data.conditions.units_required;\r\n            // console.log(selectedNodes);\r\n            const selectedList = Object.keys(selectedNodes);\r\n            for (const selected of selectedList) {\r\n                if (selected === node.id) continue; // The node can't include itself\r\n                const takenNode = getElement(selected, elements);\r\n                total += takenNode.data.units;\r\n            }\r\n            \r\n            if (total >= target) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            // This should have been dealt with in the main function\r\n            // Only check specific level courses\r\n            // We will put it here anyways because unselectconnected imports this function alone\r\n            return(checkPrerequisiteUnitsLevel(node, elements, selectedNodes));\r\n        }\r\n    } else if (node.data.conditions.core_year !== null) {\r\n        // NOTE: Hardcoded this for comp courses in sengah\r\n        return true;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n// Perform prerequisite check for nodes which require X units of Y level courses\r\nfunction checkPrerequisiteUnitsLevel(node, elements, selectedNodes) {\r\n    // Determine the type of course\r\n    var courseType = node.id.substr(0, 4);\r\n    courseType = courseType.concat(node.data.conditions.level_for_units_required);\r\n\r\n    var total = 0;\r\n    const target = node.data.conditions.units_required;\r\n    const selectedList = Object.keys(selectedNodes);\r\n    for (const selected of selectedList) {\r\n        if (selected.substr(0, 5) !== courseType) continue; // Not the right course type\r\n        if (selected === node.id) continue; // The node can't include itself\r\n        const takenNode = getElement(selected, elements);\r\n        total += takenNode.data.units;\r\n    }\r\n\r\n    if (total >= target) {\r\n        // If it has conditions, check the conditions\r\n        if (node.data.conditions.prerequisites !== null && node.data.conditions.prereqs_executable !== null) {\r\n            // Evaluate the condition\r\n\r\n            var condition = node.data.conditions.prereqs_executable;\r\n            condition = condition.replace(/[A-Z]{4}[A-Z0-9]+/gi, function(match) {\r\n                if (selectedNodes.hasOwnProperty(match)) {\r\n                    return 1;\r\n                } else {\r\n                    return 0;\r\n                }\r\n            });\r\n            // eslint-disable-next-line\r\n            if (eval(condition)) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n    \r\n}","// Given an id, returns the element\r\nconst getElement = (id, elementsData) => {\r\n    //console.log(\"GET ELEMENT OF \" + id);\r\n    for (var e of elementsData) {\r\n        if (e.id === id) {\r\n            return e;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport default getElement;","import React from \"react\";\r\nimport { Label, Container, Icon} from 'semantic-ui-react'\r\n\r\nimport { Draggable } from \"react-beautiful-dnd\"\r\n\r\nconst getCourseLink = (courseId) => {\r\n    const handbookVersion = 2021;\r\n    return <a style={{marginLeft: \"5px\", alignSelf: \"flex-start\"}} target=\"_blank\" rel=\"noopener noreferrer\" href={`https://www.handbook.unsw.edu.au/undergraduate/courses/${handbookVersion}/${courseId}`}><Icon name=\"external share\"/></a>;\r\n}\r\n\r\nexport default class Course extends React.Component {\r\n    render () {\r\n        return (\r\n            <Container>\r\n                <Draggable draggableId={this.props.course.id} index={this.props.index}>\r\n                    {provided => (\r\n                        <div>\r\n                            <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                                <Label style={{margin: \"5px\", display: \"flex\"}}>\r\n                                    <span style={{flexGrow: \"1\"}}>\r\n                                        {this.props.course.content}\r\n                                    </span>\r\n                                    {getCourseLink(this.props.course.id)}\r\n                                </Label>\r\n                            </div>\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Draggable>\r\n            </Container>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { Container, Segment, Header, Label } from 'semantic-ui-react'\r\n\r\nimport Course from \"./degreeplanner-course\"\r\n\r\nimport { Droppable } from \"react-beautiful-dnd\"\r\n\r\nconst SUCCESS = \"#FCFFF5\";\r\nconst ERROR = \"#FFF6F6\";\r\nconst UNKNOWN = \"#FFFAF3\"\r\n\r\nconst checkTermAvailability = (props, courseId) => {\r\n    const termId = props.term.id.substring(1, 3);\r\n    const termAvailability = props.allCourses[courseId].termsAvailable;\r\n\r\n    // return props.allCourses[courseId].placeholderTerms\r\n    //     ? UNKNOWN\r\n    //     : termAvailability.includes(termId)\r\n    //     ? SUCCESS\r\n    //     : ERROR;\r\n    return termAvailability.includes(termId)\r\n        ? props.allCourses[courseId].placeholderTerms\r\n            ? UNKNOWN\r\n            : SUCCESS\r\n        : ERROR\r\n}\r\n\r\nconst checkValidCourses = (props) => {\r\n    const termId = props.term.id.substring(1, 3);\r\n\r\n    for (const courseId of props.term.courseIds) {\r\n        if (!props.allCourses[courseId].termsAvailable.includes(termId)) return ERROR;\r\n        if (props.allCourses[courseId].placeholderTerms) return UNKNOWN;\r\n    }\r\n    return \"white\"\r\n}\r\n\r\nconst showUnits = (props) => {\r\n    const total = props.term.courseIds.filter(c => props.allCourses[c]).reduce((total, courseId) => total + props.allCourses[courseId].units, 0);\r\n    const partTime = 12;\r\n    const fullTime = 18;\r\n\r\n    let colour = \"\"\r\n    if (total === 0) {\r\n        colour = \"grey\";\r\n    } else if (total < partTime) {\r\n        colour = \"orange\";\r\n    } else if (total < fullTime) {\r\n        colour = \"blue\";\r\n    } else if (total === fullTime) {\r\n        colour = \"teal\";\r\n    } else {\r\n        colour = \"red\";\r\n    }\r\n\r\n    return <Label color={colour} floating style={{transition: \"0.2s ease\"}}>{total}</Label>;\r\n}\r\n\r\nexport default class Term extends React.Component {\r\n    render () {\r\n        return (\r\n            <Container>\r\n                <Droppable droppableId={this.props.term.id}>\r\n                    {(provided, snapshot) => (\r\n                        <Segment style={{backgroundColor: snapshot.isDraggingOver ? checkTermAvailability(this.props, snapshot.draggingOverWith) : checkValidCourses(this.props), transition: \"0.2s ease\"}}>\r\n                            <Header as=\"h4\">{this.props.term.title}</Header>\r\n                            {showUnits(this.props)}\r\n                            {/* {getTermTitle(this.props)} */}\r\n                            <div ref={provided.innerRef} {...provided.droppableProps} style={{minHeight: \"150px\"}}>\r\n                                {this.props.courses.map((course, index) => <Course key={course.id} course={course} index={index} />)}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        </Segment>\r\n                    )}\r\n                </Droppable>\r\n            </Container>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { Container, Segment, Header, Message, Grid } from 'semantic-ui-react'\r\n\r\nimport dataJSON from \"../maps/EngineeringHonoursSoftware/data.json\"\r\nimport rawCoursesJSON from \"../webscraper/courses.json\"\r\n\r\nimport programsJSON from \"../webscraper/programs.json\"\r\nimport specialisationsJSON from \"../webscraper/specialisations.json\"\r\n\r\nimport { DragDropContext } from \"react-beautiful-dnd\"\r\nimport Term from \"./degreeplanner-term\"\r\n\r\nconst REGEX_COURSE_CODE = /[A-Z]{4}\\d{4}/g;\r\n\r\nconst mapTermIds = (term) => {\r\n    if (term === \"Summer Term\") return \"TS\";\r\n    if (term === \"Term 1\") return \"T1\";\r\n    if (term === \"Term 2\") return \"T2\";\r\n    if (term === \"Term 3\") return \"T3\";\r\n    return;\r\n}\r\n\r\nconst mapTermFull = (term) => {\r\n    if (term === \"TS\") return \"Summer Term\";\r\n    if (term === \"T1\") return \"Term 1\";\r\n    if (term === \"T2\") return \"Term 2\";\r\n    if (term === \"T3\") return \"Term 3\";\r\n}\r\n\r\nconst updateCourses = (coursesJSON, dataJSON) => {\r\n    dataJSON.forEach(course => {\r\n        if (!(course.id in coursesJSON)) return;\r\n        coursesJSON[course.id].conditions.prereqs_executable = course.data.conditions.prereqs_executable\r\n        coursesJSON[course.id].terms = course.data.terms;\r\n    });\r\n    return coursesJSON;\r\n}\r\n\r\nconst coursesJSON = updateCourses(rawCoursesJSON, dataJSON);\r\n\r\nconst getCourses = (selectedCourses) => {\r\n    const courses = {}\r\n\r\n    selectedCourses.forEach(c => {\r\n        if (!(c in coursesJSON)) return;\r\n\r\n        let termsAvailable;\r\n        if (!coursesJSON[c].terms) {\r\n            termsAvailable = [\"TS\", \"T1\", \"T2\", \"T3\"];\r\n        } else {\r\n            termsAvailable = coursesJSON[c].terms.map(term => mapTermIds(term));\r\n        }\r\n\r\n        courses[c] = {\r\n            id: c,\r\n            content: `${c} - ${coursesJSON[c].course_name}`,\r\n            termsAvailable: termsAvailable,\r\n            placeholderTerms: !coursesJSON[c].terms,\r\n            units: coursesJSON[c].units\r\n        }\r\n    })\r\n\r\n    return courses\r\n}\r\n\r\nconst generateTerms = (yearId) => {\r\n    const terms = {}\r\n\r\n    // Terms have id of <YEAR>T<TERM TYPE> eg: 1TS is 1st Year, Summer Term\r\n\r\n    const TSKey = `${yearId}TS`;\r\n    const T1Key = `${yearId}T1`;\r\n    const T2Key = `${yearId}T2`;\r\n    const T3Key = `${yearId}T3`;\r\n    terms[\"termOrder\"] = [TSKey, T1Key, T2Key, T3Key];\r\n\r\n    terms[TSKey] = {\r\n        id: TSKey,\r\n        title: `Year ${yearId} - Summer Term`,\r\n        courseIds: []\r\n    }\r\n\r\n    terms[T1Key] = {\r\n        id: T1Key,\r\n        title: `Year ${yearId} - Term One`,\r\n        courseIds: []\r\n    }\r\n\r\n    terms[T2Key] = {\r\n        id: T2Key,\r\n        title: `Year ${yearId} - Term Two`,\r\n        courseIds: []\r\n    }\r\n\r\n    terms[T3Key] = {\r\n        id: T3Key,\r\n        title: `Year ${yearId} - Term Three`,\r\n        courseIds: []\r\n    }\r\n\r\n    return terms;\r\n}\r\n\r\nconst addPriority = (priority, courseId, unlocksCourse) => {\r\n    if (!(courseId in coursesJSON)) return priority;\r\n    if (!coursesJSON[courseId].conditions.prerequisites) return priority;\r\n\r\n    for (const prereq of coursesJSON[courseId].conditions.prerequisites) {\r\n        if (!(prereq in priority)) continue;\r\n        if (courseId === prereq) continue;\r\n\r\n        priority[prereq].unlocks.push(unlocksCourse);\r\n        priority = addPriority(priority, prereq, unlocksCourse);\r\n    }\r\n\r\n    return priority;\r\n}\r\n\r\nconst prioritiseCourses = (selectedCourses) => {\r\n    // Initiate priorities\r\n    var priority = {};\r\n    for (const courseId of selectedCourses) {\r\n        if (!(courseId in coursesJSON)) continue\r\n\r\n        priority[courseId] = {\r\n            courseId: courseId,\r\n            level: Number(courseId[4]),\r\n            unlocks: [],\r\n            termsAvailable: coursesJSON[courseId].terms ? coursesJSON[courseId].terms.filter(t => t !== \"Summer Term\").length : 0\r\n        }\r\n    }\r\n\r\n    // Calculate priorities\r\n    for (const courseId of selectedCourses) {\r\n        priority = addPriority(priority, courseId, courseId);\r\n    }\r\n\r\n    // Sort keys of priority into array to give into prioritised\r\n    const prioritised = Object.values(priority);\r\n\r\n    prioritised.sort((a, b) => {\r\n        // Sort by:\r\n        // 1. Level (ASC)\r\n        // 2. Unlocks (DESC)\r\n        // 3. Terms Available (ASC)\r\n\r\n        if (a.level === b.level) {\r\n            if (a.unlocks.length === b.unlocks.length) {\r\n                return a.termsAvailable - b.termsAvailable; // Ascending\r\n            }\r\n            return b.unlocks.length - a.unlocks.length; // Descending\r\n        }\r\n        return a.level - b.level; // Ascending\r\n    });\r\n\r\n    return prioritised;\r\n}\r\n\r\nconst checkPrereqsMet = (termPlan, termId, courseId) => {\r\n\r\n    let runningTotalUnits = 0;\r\n    let prereqsExecutable = coursesJSON[courseId].conditions.prereqs_executable;\r\n\r\n    // Get courses taken up to termId\r\n    const coursesTaken = [];\r\n    for (const t in termPlan) {\r\n        if (t === termId) break;\r\n        coursesTaken.push(...termPlan[t].courseIds);\r\n        runningTotalUnits += termPlan[t].courseIds.reduce((total, c) => total + (c in coursesJSON ? coursesJSON[c].units : 0), 0);\r\n    }\r\n    // console.log(courseId, \"courses taken:\", coursesTaken);\r\n\r\n    if (coursesJSON[courseId].conditions.units_required) {\r\n        if (runningTotalUnits < coursesJSON[courseId].conditions.units_required) return false;\r\n    }\r\n\r\n    if (!prereqsExecutable) return true; // No executable\r\n\r\n    for (const course of coursesTaken) {\r\n        prereqsExecutable = prereqsExecutable.replace(course, \"1\");\r\n    }\r\n    prereqsExecutable = prereqsExecutable.replace(REGEX_COURSE_CODE, \"0\");\r\n\r\n    // eslint-disable-next-line\r\n    return eval(prereqsExecutable);\r\n}\r\n\r\nconst addCourseToPlan = (termPlan, courseId) => {\r\n    const maxUOC = 18;\r\n\r\n    for (const termId in termPlan) {\r\n        if (termId.includes(\"TS\")) continue;\r\n        if (termPlan[termId].units >= maxUOC) continue;\r\n\r\n        const courseUnits = coursesJSON[courseId].units;\r\n        if (termPlan[termId].units + courseUnits > maxUOC) continue;\r\n\r\n        let termsAvailable;\r\n        if (!(coursesJSON[courseId].terms)) {\r\n            termsAvailable = [\"TS\", \"T1\", \"T2\", \"T3\"];\r\n        } else {\r\n            termsAvailable = coursesJSON[courseId].terms.map(term => mapTermIds(term));\r\n        }\r\n\r\n        if (!(termsAvailable.includes(termId.substring(1, 3)))) continue;\r\n\r\n        // Need to check prerequisites have been met here\r\n        if (!checkPrereqsMet(termPlan, termId, courseId)) continue;\r\n\r\n        // Add course to plan\r\n        termPlan[termId].units += coursesJSON[courseId].units;\r\n        termPlan[termId].courseIds.push(courseId);\r\n        return termPlan;\r\n    }\r\n\r\n    // Default put in Year 1 Summer Term if cannot find a good position for it.\r\n    let termsAvailable;\r\n    if (!(coursesJSON[courseId].terms)) {\r\n        termsAvailable = [\"TS\", \"T1\", \"T2\", \"T3\"];\r\n    } else {\r\n        termsAvailable = coursesJSON[courseId].terms.map(term => mapTermIds(term));\r\n    }\r\n\r\n    termPlan[\"1TS\"].units += coursesJSON[courseId].units;\r\n    termPlan[\"1TS\"].courseIds.push(courseId);\r\n    return termPlan;\r\n}\r\n\r\nconst populateTerms = (maxYears, prioritisedCourses) => {\r\n    const maxTerms = 3;\r\n\r\n    const termPlan = {};\r\n    for (let year = 1; year <= maxYears; year++) {\r\n        termPlan[`${year}TS`] = {\r\n            units: 0,\r\n            courseIds: []\r\n        };\r\n        for (let term = 1; term <= maxTerms; term++) {\r\n            const termId = `${year}T${term}`;\r\n            termPlan[termId] = {\r\n                units: 0,\r\n                courseIds: []\r\n            };\r\n        }\r\n    }\r\n\r\n    // For each course in the prioritised, slot into earliest possible term\r\n    for (const course of prioritisedCourses) {\r\n        addCourseToPlan(termPlan, course.courseId);\r\n    }\r\n\r\n    return termPlan;\r\n}\r\n\r\nconst makePlan = (plan, maxYears, selectedCourses) => {\r\n    const prioritisedCourses = prioritiseCourses(selectedCourses);\r\n\r\n    const termPlan = populateTerms(maxYears, prioritisedCourses);\r\n\r\n    for (const termId in termPlan) {\r\n        const year = termId[0];\r\n        plan[year][termId].courseIds = termPlan[termId].courseIds\r\n    }\r\n\r\n    return plan;\r\n}\r\n\r\nconst generatePlanScaffold = (years, selectedCourses) => {\r\n    let plan = {};\r\n\r\n    for (let year = 1; year <= years; year++) {\r\n        plan[year.toString()] = generateTerms(year)\r\n    }\r\n\r\n    plan = makePlan(plan, years, selectedCourses)\r\n\r\n    return plan;\r\n}\r\n\r\nclass DegreePlanner extends React.Component {\r\n    state = {\r\n        courses: getCourses(this.props.selectedCourses),\r\n        selectedCourses: this.props.selectedCourses,\r\n        plan: generatePlanScaffold(4, this.props.selectedCourses),\r\n    };\r\n\r\n    onDragEnd = result => {\r\n        const { destination, source, draggableId } = result;\r\n\r\n        // Null destination means label was not dragged into a droppable\r\n        if (!destination) return;\r\n\r\n        // Label was dragged into the same position\r\n        if (destination.droppableId === source.droppableId && destination.index === source.index) return;\r\n\r\n        const sourceYear = source.droppableId[0];\r\n        const start = this.state.plan[sourceYear][source.droppableId];\r\n        const destinationYear = destination.droppableId[0];\r\n        const finish = this.state.plan[destinationYear][destination.droppableId];\r\n\r\n        if (start === finish) {\r\n            const newCourseIds = Array.from(start.courseIds);\r\n            newCourseIds.splice(source.index, 1); // Remove 1 item at source.index\r\n            newCourseIds.splice(destination.index, 0, draggableId); // Insert dragggableId into destination\r\n            const newTerm = {\r\n                ...start,\r\n                courseIds: newCourseIds\r\n            };\r\n\r\n            const newState = {\r\n                ...this.state,\r\n                plan: {\r\n                    ...this.state.plan,\r\n                    [sourceYear]: {\r\n                        ...this.state.plan[sourceYear],\r\n                        [newTerm.id]: newTerm,\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setState(newState);\r\n            return;\r\n        }\r\n\r\n        // Moving from one list to another\r\n        const startCourseIds = Array.from(start.courseIds)\r\n        startCourseIds.splice(source.index, 1);\r\n\r\n        const newStart = {\r\n            ...start,\r\n            courseIds: startCourseIds,\r\n        }\r\n\r\n        const finishCourseIds = Array.from(finish.courseIds)\r\n        finishCourseIds.splice(destination.index, 0, draggableId);\r\n\r\n        const newFinish = {\r\n            ...finish,\r\n            courseIds: finishCourseIds\r\n        }\r\n\r\n        const newState = this.state;\r\n        newState.plan[sourceYear][newStart.id] = newStart;\r\n        newState.plan[destinationYear][newFinish.id] = newFinish;\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    getConsiderationMessages = (state) => {\r\n        const plan = state.plan;\r\n        const courses = state.courses;\r\n        const selectedCourses = state.selectedCourses;\r\n        const program = \"3707\"\r\n        const programUnits = programsJSON[program].units;\r\n        const degree = \"SENGAH\";\r\n        const degreeUnits = specialisationsJSON[degree].units\r\n        const considerationMessages = [];\r\n        const handbookVersion = 2021;\r\n\r\n        const getCourseLink = (courseId) => {\r\n            return <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://www.handbook.unsw.edu.au/undergraduate/courses/${handbookVersion}/${courseId}`}>{courseId}</a>;\r\n        }\r\n\r\n        const getProgramLink = (programId) => {\r\n            return <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://www.handbook.unsw.edu.au/undergraduate/programs/${handbookVersion}/${programId}`}>{programId} - {programsJSON[programId].name}</a>;\r\n        }\r\n\r\n        const getSpecialisationsLink = (specialisationId) => {\r\n            return <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://www.handbook.unsw.edu.au/undergraduate/specialisations/${handbookVersion}/${specialisationId}`}>{specialisationId} - {specialisationsJSON[specialisationId].name}</a>;\r\n        }\r\n\r\n        const getCoursesInLevel = (rawList) => {\r\n            rawList = rawList.flat().filter(c => c !== \"ANY COURSE\");\r\n            const allCourseIds = Object.keys(coursesJSON);\r\n            const courseList = [];\r\n            rawList.forEach(courseId => {\r\n                if (courseId.match(REGEX_COURSE_CODE)) {\r\n                    courseList.push(courseId);\r\n                } else if (courseId.match(/^[A-Z]{4}\\d$/)) {\r\n                    const relevantCourses = allCourseIds.filter(c => c.includes(courseId));\r\n                    relevantCourses.forEach(c => {\r\n                        if (courseList.includes(c)) return;\r\n                        courseList.push(c);\r\n                    });\r\n                }\r\n            });\r\n            return courseList;\r\n        }\r\n\r\n        // Check prereqs\r\n        const termPlan = {}\r\n        let totalUnits = 0;\r\n        for (const year in plan) {\r\n            for (const term in plan[year]) {\r\n                if (term === \"termOrder\") continue;\r\n                termPlan[term] = plan[year][term]\r\n                for (const courseId of termPlan[term].courseIds) {\r\n                    const conditions = coursesJSON[courseId].conditions\r\n                    if (!conditions.units_required) continue;\r\n                    if (totalUnits < conditions.units_required) {\r\n                        considerationMessages.push(\r\n                            <Message.Item>\r\n                                {getCourseLink(courseId)} prerequisites have not been met: {conditions.units_required} UOC required.\r\n                            </Message.Item>\r\n                        )\r\n                    }\r\n                }\r\n\r\n                totalUnits += termPlan[term].courseIds.reduce((total, c) => total + (c in coursesJSON ? coursesJSON[c].units : 0), 0);\r\n            }\r\n        }\r\n\r\n        if (totalUnits < programUnits) {\r\n            considerationMessages.push(\r\n                <Message.Item>\r\n                    {getProgramLink(program)} requires {programUnits} units. You have taken {totalUnits} units.\r\n                </Message.Item>\r\n            )\r\n        }\r\n\r\n        if (totalUnits < degreeUnits) {\r\n            considerationMessages.push(\r\n                <Message.Item>\r\n                    {getSpecialisationsLink(degree)} requires {degreeUnits} units. You have taken {totalUnits} units.\r\n                </Message.Item>\r\n            )\r\n        }\r\n\r\n        // Check levels for each\r\n        const coreCourses = []\r\n        for (const levelName in specialisationsJSON[degree].structure) {\r\n            const level = specialisationsJSON[degree].structure[levelName];\r\n            if (!level.units_required) continue;\r\n            if (level.courses.filter(c => c !== \"ANY COURSE\").length === 0) continue;\r\n            if (level.name.match(/[Cc]ore/g)) level.courses.flat().forEach(c => coreCourses.push(c));\r\n\r\n            let levelCourses = getCoursesInLevel(level.courses);\r\n            if (!level.name.match(/[Cc]ore/g)) levelCourses = levelCourses.filter(c => !coreCourses.includes(c))\r\n            const selectedInLevel = levelCourses.filter(c => selectedCourses.includes(c));\r\n            const selectedUnits = selectedInLevel.reduce((total, c) => total + (c in coursesJSON ? coursesJSON[c].units : 0), 0);\r\n\r\n            if (selectedUnits < level.units_required) {\r\n                considerationMessages.push(\r\n                    <Message.Item>\r\n                        {level.name} requires {level.units_required} units. You have taken {selectedUnits} units.\r\n                    </Message.Item>\r\n                );\r\n            }\r\n        }\r\n\r\n\r\n        for (const year in plan) {\r\n            for (const term in plan[year]) {\r\n                if (term === \"termOrder\") continue;\r\n                for (const courseId of plan[year][term].courseIds) {\r\n                    if (!checkPrereqsMet(termPlan, term, courseId)) {\r\n                        if (coursesJSON[courseId].conditions.prereqs_executable) {\r\n                            considerationMessages.push(\r\n                                <Message.Item>\r\n                                    {getCourseLink(courseId)} prerequisites have not been met: {coursesJSON[courseId].conditions.prereqs_executable\r\n                                        .replaceAll(\"|| 0 ||\", \"||\")\r\n                                        .replaceAll(\"&& 0 &&\", \"&&\")\r\n                                        .replaceAll(\"&& 0 ||\", \"||\")\r\n                                        .replaceAll(\"|| 0 &&\", \"&&\")\r\n                                        .replaceAll(\"&&\", \"and\")\r\n                                        .replaceAll(\"||\", \"or\")\r\n                                    }\r\n                                </Message.Item>\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Check terms\r\n        for (const yearId in plan) {\r\n            for (let termId in plan[yearId]) {\r\n                if (termId === \"termOrder\") continue;\r\n                const term = termId.substring(1, 3)\r\n                for (const courseId of plan[yearId][termId].courseIds) {\r\n                    // if (!courses[courseId].termsAvailable) {\r\n                    if (!courses[courseId]) {\r\n                        considerationMessages.push(\r\n                            <Message.Item>\r\n                                {getCourseLink(courseId)}: could not retrieve course. Check handbook for more details.\r\n                            </Message.Item>\r\n                        )\r\n                    } else if (courses[courseId].placeholderTerms) {\r\n                        considerationMessages.push(\r\n                            <Message.Item>\r\n                                {getCourseLink(courseId)}: unknown term availability. Check handbook for more details.\r\n                            </Message.Item>\r\n                        )\r\n                    } else if (!courses[courseId].termsAvailable.includes(term)) {\r\n                        considerationMessages.push(\r\n                            <Message.Item>\r\n                                {getCourseLink(courseId)} is only available in {courses[courseId].termsAvailable.map(term => mapTermFull(term)).join(\", \")}\r\n                            </Message.Item>\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const style = {\r\n            marginBottom: \"20px\",\r\n            transition: \"0.3s ease\"\r\n        }\r\n\r\n        if (considerationMessages.length === 0) {\r\n            return (\r\n                <Message style={style} positive>\r\n                    <Message.Header>Considerations</Message.Header>\r\n                    <Message.List>\r\n                        Looks good to me!\r\n                    </Message.List>\r\n                </Message>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <Message style={style} error>\r\n                <Message.Header>Considerations</Message.Header>\r\n                <Message.List>\r\n                    {considerationMessages}\r\n                </Message.List>\r\n            </Message>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Segment>\r\n                <Container>\r\n                    <Header as=\"h2\" textAlign=\"center\" style={{marginTop: \"50px\"}}>Plan your degree</Header>\r\n                    <p>The following degree plan has been generated based on the courses you have selected above. By default, our algorithm:</p>\r\n                    <ul>\r\n                        <li>allocates 18 UOC per term</li>\r\n                        <li>ensures courses have their prerequisites met</li>\r\n                        <li>ensures courses are offered in allocated terms</li>\r\n                        <li>does not allocate courses in Summer Term</li>\r\n                    </ul>\r\n                    <p>If the algorithm cannot place the course in a valid term, then it will place it <u>Year 1 - Summer Term</u> for you.</p>\r\n\r\n                    <p><b>Drag and drop the courses below to customise your degree plan!</b></p>\r\n\r\n                    <DragDropContext onDragEnd={this.onDragEnd} onDragStart={this.onDragStart}>\r\n                        {this.getConsiderationMessages(this.state)}\r\n                        {Object.keys(this.state.plan).map(yearId => (\r\n                            <Grid key={yearId} columns={4}>\r\n                                {this.state.plan[yearId].termOrder.map(termId => {\r\n                                    const term = this.state.plan[yearId][termId];\r\n                                    const courses = term.courseIds.map(courseId => this.state.courses[courseId]);\r\n                                    return (\r\n                                        <Grid.Column key={termId}>\r\n                                            <Term key={term.id} term={term} courses={courses} allCourses={this.state.courses}/>\r\n                                        </Grid.Column>\r\n                                    );\r\n                                })}\r\n                            </Grid>\r\n                        ))}\r\n                    </DragDropContext>\r\n                </Container>\r\n                <Container fluid style={{textAlign: \"center\", marginTop: \"50px\", height: \"auto\", padding: \"20px\"}}>\r\n                    <p><b>Disclaimer:</b> While we try our best, Circles is not an official UNSW website and does not guarantee accuracy or reliability (e.g. a course may not have its term availability published on the Handbook)</p>\r\n                    <p>Made by SRKO, 2020</p>\r\n                    <a href=\"https://github.com/Circles360/Circles360.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>\r\n                </Container>\r\n            </Segment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DegreePlanner","// For normal nodes\r\nimport React, { memo } from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nconst style = {zIndex: -9999, pointerEvents: 'none', opacity: 0, top: '50%'};\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={style} />\r\n      <div>\r\n            <b>{data.course_code}</b>\r\n      </div>\r\n      <Handle type=\"source\" position=\"top\" style={style} />\r\n    </>\r\n  );\r\n});\r\n","// For normal nodes\r\nimport React, { memo } from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nimport Refresh from '../assets/refresh.svg';\r\n\r\nconst style = {zIndex: -9999, pointerEvents: 'none', opacity: 0, top: '50%'};\r\nconst iconSize = {width: 12, position: 'relative', bottom: 2};\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={style} />\r\n      <div>\r\n            <br></br>\r\n            <b>{data.course_code}</b>\r\n            <div>\r\n              <img src={Refresh} alt={data.course_code} style={iconSize}/>\r\n            </div>\r\n      </div>\r\n      <Handle type=\"source\" position=\"top\" style={style} />\r\n    </>\r\n  );\r\n});\r\n","import React, { memo } from 'react';\r\n\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={{opacity: 0, top: '50%'}} />\r\n      <div>\r\n            <b>{data.degree_name}</b>\r\n      </div>\r\n      <Handle type=\"source\" position=\"bottom\" style={{opacity: 0, bottom: '50%'}} />\r\n    </>\r\n  );\r\n});\r\n","// Displays hover text in top left corner which contains info about the course\r\nimport React from 'react';\r\nimport { Segment, Header } from \"semantic-ui-react\";\r\n\r\nconst style = {\r\n    padding: \"20px\",\r\n    margin: \"10px\",\r\n    position: \"absolute\",\r\n    top: \"0\",\r\n    left: \"0\",\r\n    zIndex: \"10\",\r\n    maxWidth: \"20%\"\r\n}\r\n\r\nexport default function HoverInfo(props) {\r\n    return (\r\n        <Segment raised id=\"hoverbox\" style={style}>\r\n            <Header as=\"h4\" textAlign=\"center\">{props.node.data.course_name}</Header>\r\n            <p><b>Terms: </b>{(props.node.data.terms !== null) ? props.node.data.terms.join(\", \") : <text>Unknown</text>}</p>\r\n\r\n            {props.node.data.conditions.raw !== null ? <p><b>Conditions: </b>{props.node.data.conditions.raw}</p> : <p><b>Conditions: </b> None</p>}\r\n\r\n            {props.node.data.exclusions !== null &&\r\n            <p><b>Exclusion courses: </b>{props.node.data.exclusions.join(\", \")}</p>}\r\n        </Segment>\r\n    );\r\n}","// HELPER FUNCTION to highlight prerequisites in purple on hover\r\n// When hovering over an unselected node, show a path of edges\r\n// which will stop at a selected/selectable node\r\nimport getElement from './getelement.js';\r\n\r\nexport default function hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges) {\r\n    if (node.data.conditions.prerequisites === null) return;\r\n    // Get all selected edges one layer down and add to hover edges\r\n    for (const prereq of node.data.conditions.prerequisites) {\r\n        if (selectedEdges.hasOwnProperty('e' + prereq + '-' + node.id)) {\r\n            hoverEdges['e' + prereq + '-' + node.id] = 1;\r\n        }\r\n    }\r\n\r\n    // hoverEdge all unselected (AND POTENTIAL???) edges until we hit selected node (NO LONGER STOPS AT SELECTABLE NODE)\r\n    var prereqQueue = [node.id];\r\n    while (prereqQueue.length !== 0) {\r\n        const current = getElement(prereqQueue.shift(), elements);\r\n        // Make sure this course exists as a node in our map\r\n        if (current === null) continue;\r\n\r\n        if (current.data.conditions.prerequisites === null) continue;\r\n\r\n        for (const prereq of current.data.conditions.prerequisites) {\r\n            if (!selectedEdges.hasOwnProperty('e' + prereq + '-' + current.id)) {\r\n                hoverEdges['e' + prereq + '-' + current.id] = 1;\r\n            }\r\n            /*if ((!selectedEdges.hasOwnProperty('e' + prereq + '-' + current.id)) && (!potentialEdges.hasOwnProperty('e' + prereq + '-' + current.id))) {\r\n                hoverEdges['e' + prereq + '-' + current.id] = 1;\r\n            }*/\r\n\r\n            if ((!selectedNodes.hasOwnProperty(prereq))) {\r\n                prereqQueue.push(prereq);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// HELPER FUNCTION to delete prerequisite edges\r\n// Usually used after unhovering or onclick\r\nexport default function unhoverPrerequisites(hoverEdges) {\r\n    for (var edge in hoverEdges) {\r\n        delete hoverEdges[edge];\r\n    }\r\n}","import { findAllByDisplayValue } from '@testing-library/react';\r\nimport React, { Component } from 'react'\r\nimport { Button, Dropdown, Grid, Message } from 'semantic-ui-react'\r\n\r\nimport programsJSON from \"../webscraper/programs.json\"\r\nimport specialisationsJSON from \"../webscraper/specialisations.json\"\r\n\r\nconst MAJORS = 1;\r\nconst MINORS = 2;\r\nconst HONOURS = 3;\r\n\r\nconst courseOptions = {}\r\nconst programOptions = []\r\n\r\nfor (const code in programsJSON) {\r\n    if (programsJSON[code].degrees_involved.majors.length === 0 && programsJSON[code].degrees_involved.honours.length === 0) continue;\r\n\r\n    programOptions.push({\r\n        \"key\": code,\r\n        \"value\": code,\r\n        \"text\": code + \" - \" + programsJSON[code].name\r\n    })\r\n\r\n    courseOptions[code] = programsJSON[code].degrees_involved\r\n}\r\n\r\nfor (const code in courseOptions) {\r\n    for (const type in courseOptions[code]) {\r\n\r\n        const replacement = [];\r\n        for (const spec of courseOptions[code][type]) {\r\n            if (!(spec in specialisationsJSON)) continue;\r\n            replacement.push({\r\n                \"key\": spec,\r\n                \"value\": spec,\r\n                \"text\": spec + \" - \" + specialisationsJSON[spec].name\r\n            })\r\n        }\r\n        courseOptions[code][type] = replacement;\r\n    }\r\n}\r\n\r\n// returns MAJORS if Majors but no Minors\r\n// returns MINORS if Majors and Minors exist\r\n// returns HONOURS if Honours exist\r\nconst getMajors = (code) => {\r\n    if (!(code in courseOptions)) {\r\n        console.log(\"code not found in majors\", code);\r\n        return [];\r\n    }\r\n\r\n    if (courseOptions[code].honours.length) return [HONOURS, courseOptions[code].honours];\r\n    if (courseOptions[code].minors.length) return [MINORS, courseOptions[code].majors];\r\n    return [MAJORS, courseOptions[code].majors];\r\n}\r\n\r\nconst getMinors = (code) => {\r\n    if (!(code in courseOptions)) {\r\n        console.log(\"code not found in minors\", code);\r\n        return [];\r\n    }\r\n\r\n    return courseOptions[code].minors;\r\n}\r\n\r\nclass DropdownDegrees extends Component {\r\n    state = {\r\n        programOptions: programOptions,\r\n        majorOptions: [],\r\n        minorOptions: [],\r\n\r\n        disabledPrimary: true,\r\n        disabledSecondary: true,\r\n        hiddenPrimary: 'hidden',\r\n        hiddenSecondary: 'hidden',\r\n\r\n        valProgram: null,\r\n        valPrimary: null,\r\n        valSecondary: null,\r\n\r\n        phPrimary: \"Select\",\r\n        phSecondary: \"N/A\",\r\n    }\r\n\r\n    chooseProgram = (e, program) => {\r\n        const [type, majors] = getMajors(program.value)\r\n        console.log(program.value)\r\n        this.setState({\r\n            valProgram: program.value,\r\n\r\n            valPrimary: null,\r\n            disabledPrimary: false,\r\n            hiddenPrimary: 'visible',\r\n            majorOptions: majors,\r\n            phPrimary: \"Select Major\",\r\n\r\n            valSecondary: null,\r\n            disabledSecondary: true,\r\n            hiddenSecondary: 'hidden',\r\n            minorOptions: [],\r\n            phSecondary: \"N/A\"\r\n        })\r\n\r\n        if (type === HONOURS) this.setState({phPrimary: \"Select Honour\"})\r\n        else if (type === MAJORS) this.setState({phPrimary: \"Select Major\"})\r\n        else {\r\n            this.setState({\r\n                phPrimary: \"Select Major\",\r\n                phSecondary: \"Select Minor\",\r\n                minorOptions: getMinors(program.value),\r\n                disabledSecondary: false,\r\n                hiddenSecondary: 'visible',\r\n            });\r\n        }\r\n    }\r\n\r\n    choosePrimary = (e, spec) => {\r\n        this.setState({\r\n            valPrimary: spec.value\r\n        })\r\n    }\r\n\r\n    chooseSecondary = (e, minor) => {\r\n        this.setState({\r\n            valSecondary: minor.value\r\n        })\r\n    }\r\n\r\n    getLink = () => {\r\n        if (this.state.valSecondary) return `#/${this.state.valProgram}/${this.state.valPrimary}/${this.state.valSecondary}`\r\n        return `#/${this.state.valProgram}/${this.state.valPrimary}`\r\n    }\r\n\r\n    supported = {\r\n        \"3707\": [\"SENGAH\"],\r\n        \"3778\": [\"COMPA1\"]\r\n    };\r\n\r\n    isDisabled = () => {\r\n        this.state.messageVisible = \"hidden\"\r\n\r\n        if (!!this.state.valSecondary) return true;\r\n        if (!(this.state.valProgram in this.supported)) return true;\r\n        if (!this.supported[this.state.valProgram].includes(this.state.valPrimary)) return true;\r\n\r\n        const isSupported = this.state.valProgram === null || this.state.valPrimary === null;\r\n        return isSupported;\r\n    }\r\n\r\n    getMessage = () => {\r\n        if (!!this.state.valSecondary) {\r\n            return (\r\n                <Message warning>\r\n                    Minors not supported yet\r\n                </Message>\r\n            )\r\n        }\r\n\r\n        if (!(this.state.valProgram in this.supported)) {\r\n            return (\r\n                <Message warning>\r\n                    {`Only ${Object.keys(this.supported).join(\", \")} is supported`}\r\n                </Message>\r\n            )\r\n        }\r\n\r\n\r\n        if (!this.supported[this.state.valProgram].includes(this.state.valPrimary)) {\r\n            return (\r\n                <Message warning>\r\n                    {`Only ${this.supported[this.state.valProgram].join(\", \")} is supported`}\r\n                </Message>\r\n            )\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <Grid centered style={{marginBottom: \"20px\"}}>\r\n                <Grid.Row>\r\n                    <Dropdown\r\n                        selection\r\n                        search\r\n                        onChange={this.chooseProgram}\r\n                        options= {this.state.programOptions}\r\n                        enabled\r\n                        placeholder= 'Select Program'\r\n                    />\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Dropdown\r\n                        selection\r\n                        search\r\n                        onChange={this.choosePrimary}\r\n                        options= {this.state.majorOptions}\r\n                        disabled= {this.state.disabledPrimary}\r\n                        value= {this.state.valPrimary}\r\n                        placeholder= {this.state.phPrimary}\r\n                        style={{visibility: this.state.hiddenPrimary}}\r\n                    />\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Dropdown\r\n                        selection\r\n                        search\r\n                        clearable\r\n                        onChange={this.chooseSecondary}\r\n                        options= {this.state.minorOptions}\r\n                        disabled= {this.state.disabledSecondary}\r\n                        value= {this.state.valSecondary}\r\n                        placeholder= {this.state.phSecondary}\r\n                        style={{visibility: this.state.hiddenSecondary}}\r\n                    />\r\n                </Grid.Row>\r\n                {this.getMessage()}\r\n                <Grid.Row>\r\n                    <a href={this.getLink()}>\r\n                        <Button\r\n                            disabled={this.isDisabled()}\r\n                            color=\"red\"\r\n                        >\r\n                            Load flowchart\r\n                        </Button>\r\n                    </a>\r\n                </Grid.Row>\r\n            </Grid>\r\n\r\n        </>;\r\n    }\r\n}\r\n\r\nexport default DropdownDegrees","import React from \"react\";\r\nimport DropdownDegrees from \"./dropdownDegrees.js\"\r\nimport { Button, Container, Modal, Header } from 'semantic-ui-react'\r\n\r\nfunction exampleReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'OPEN_MODAL':\r\n      return { open: true, dimmer: action.dimmer }\r\n    case 'CLOSE_MODAL':\r\n      return { open: false }\r\n    default:\r\n      throw new Error()\r\n  }\r\n}\r\n\r\nfunction SideBarModal() {\r\n  const [state, dispatch] = React.useReducer(exampleReducer, {\r\n    open: false,\r\n    dimmer: undefined,\r\n  })\r\n  const { open, dimmer } = state\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        size=\"mini\"\r\n        color=\"blue\"\r\n        onClick={() => dispatch({ type: 'OPEN_MODAL', dimmer: 'blurring' })}\r\n      >\r\n        Choose Degree\r\n      </Button>\r\n\r\n      <Modal\r\n        closeIcon\r\n        dimmer={dimmer}\r\n        open={open}\r\n        onClose={() => dispatch({ type: 'CLOSE_MODAL' })}\r\n      >\r\n        <Modal.Header textAlign=\"center\">Degree Planner</Modal.Header>\r\n        <Container>\r\n            <Header as=\"h3\" textAlign=\"center\" style={{marginTop: \"5px\"}}>Choose your degree</Header>\r\n            <DropdownDegrees />\r\n        </Container>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SideBarModal\r\n\r\n//DropdownDegrees.clickDone() \r\n\r\n//DropdownDegrees d = new DropdownDegrees(); \r\n//d.clickDone()","// For normal nodes\r\nimport React, { memo } from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nconst style = {zIndex: -9999, pointerEvents: 'none', opacity: 0, top: '50%'};\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={style} />\r\n      <div>\r\n            <text>{data.instructions}</text>\r\n      </div>\r\n      <Handle type=\"source\" position=\"top\" style={style} />\r\n    </>\r\n  );\r\n});\r\n","// For normal nodes\r\nimport React, { memo } from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\nimport Refresh from '../assets/refresh.svg';\r\n\r\nconst style = {zIndex: -9999, pointerEvents: 'none', opacity: 0, top: '50%'};\r\nconst iconSize = {width: 12, position: 'relative'};\r\n\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"top\" style={style} />\r\n      <div>\r\n            <br></br>\r\n            <b>{data.instructions}</b>\r\n            <br></br>\r\n            <div>\r\n              <img src={Refresh} alt={data.course_code} style={iconSize}/>\r\n            </div>\r\n      </div>\r\n      <Handle type=\"source\" position=\"top\" style={style} />\r\n    </>\r\n  );\r\n});\r\n","// Helper functions to highlight nodes and edges\r\n// Will highlight/unhighlight nodes based on selectedNodes dictionary\r\nimport { isEdge } from \"react-flow-renderer\";\r\n\r\nconst selectedEdgeAnimated = {\r\n    stroke: \"#e94646\",\r\n    strokeWidth: 2,\r\n    opacity: 1,\r\n    transition: \"0.3s ease\"\r\n}\r\nconst selectedEdgeStatic = {\r\n    stroke: \"#454545\",\r\n    strokeWidth: 2,\r\n    opacity: 1,\r\n    transition: \"0.3s ease\"\r\n}\r\n\r\nconst hoverEdge = {\r\n    stroke: \"#e94646\",\r\n    strokeWidth: 2,\r\n    opacity: 1,\r\n    transition: \"0.3s ease\"\r\n}\r\n\r\nconst potentialHoverEdge = {\r\n    stroke: \"#e94646\",\r\n    strokeWidth: 2,\r\n    opacity: 1,\r\n    transition: \"0.3s ease\"\r\n}\r\nconst potentialEdge = {\r\n    stroke: \"#cecece\",\r\n    strokeWidth: 1,\r\n    opacity: 1,\r\n    transition: \"0.3s ease\"\r\n}\r\n\r\nconst unselectedEdge = {\r\n    stroke: \"#cecece\",\r\n    strokeWidth: 1,\r\n    opacity: 1,\r\n    transition: \"0.3s ease\"\r\n}\r\n\r\nexport default function highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges) {\r\n    // console.log(\"=================\");\r\n    // console.log(selectedNodes);\r\n    // console.log(selectedEdges);\r\n    // console.log(selectableNodes);\r\n    // console.log(potentialEdges);\r\n    const newElements = elements.map((e) => {\r\n        // It is an edge\r\n        if (isEdge(e)) {\r\n            if (selectedEdges.hasOwnProperty(e.id)) {\r\n                if (hoverEdges.hasOwnProperty(e.id)) return {...e, style: selectedEdgeAnimated, animated: true};\r\n                else return {...e, style: selectedEdgeStatic, animated: false};\r\n            } else if (potentialEdges.hasOwnProperty(e.id)) {\r\n                if (hoverEdges.hasOwnProperty(e.id)) return {...e, style: potentialHoverEdge, animated: true};\r\n                else return {...e, style: potentialEdge, animated: false};\r\n            } else if (hoverEdges.hasOwnProperty(e.id)) {\r\n                return {...e, style: hoverEdge, animated: true};\r\n            } else {\r\n                return {...e, style: unselectedEdge, animated: false};\r\n            }\r\n        }\r\n\r\n        // It is a node\r\n        if (selectedNodes.hasOwnProperty(e.id)) {\r\n            // SELECTED NODE\r\n            return {...e, style: {...e.style, color: e.textSelectedColour, background: e.selectedColour}};\r\n        } else if (selectableNodes.hasOwnProperty(e.id)) {\r\n            // NOT SELECTED BUT CAN BE SELECTED\r\n            // console.log(e.textColour);\r\n            return {...e, style: {...e.style, color: e.textColour, background: e.selectableColour}};\r\n        } else {\r\n            // UNSELECTED NODE\r\n            return {...e, style: {...e.style, color: e.textColour, background: 'white'}};\r\n        }\r\n    })\r\n\r\n    return newElements;\r\n}","// HELPER FUNCTION for selecting nodes\r\n// Given a selectable node, highlights potential edges and fills in prereq edges\r\n// import checkPrerequisites from './checkprerequisites.js';\r\n// import getElement from './getelement.js';\r\n\r\nexport default function selectNode(elements, node, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    selectedNodes[node.id] = 1;\r\n    delete selectableNodes[node.id];\r\n\r\n    // Turn its prerequisite potential edges into actual edges\r\n    // Keep grey edges as grey\r\n    if (node.data.conditions.prerequisites !== null) {\r\n        for (const prereq of node.data.conditions.prerequisites) {\r\n            if (potentialEdges.hasOwnProperty('e' + prereq + '-' + node.id)) {\r\n                selectedEdges['e' + prereq + '-' + node.id] = 1;\r\n                delete potentialEdges['e' + prereq + '-' + node.id];\r\n            }\r\n        }\r\n    }\r\n\r\n    // Unlock its future edges\r\n    if (node.data.unlocks !== null) {\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            // Edges from node to unlocks should be unselected\r\n            if (selectedNodes.hasOwnProperty(unlockCourse)) {\r\n                // This course is already selected. Make the edge a selected edge\r\n                selectedEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n            } else {\r\n                // This course is either unselected or selectable\r\n                // In either case, add potential edge\r\n                potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n            }\r\n        }            \r\n    }\r\n\r\n    return;\r\n}\r\n","// HELPER FUNCTION for unselecting nodes\r\n// Given a selected node, unselects it and pushes it onto a queue to be analysed\r\n// ==================ON THE QUEUE==========================\r\n// Unshift node and Manages its prerequisites as follows:\r\n//  - if the prereq node is selected, turn selected edges into potential edges\r\n//  - if otherwise, do nothing\r\n// Determine the status of the current node:\r\n//  - if it meets prerequisites, leave it as is.\r\n//  - if it does not meet prerequisites, make it unselectable (delete from selectable/selected)\r\n// For each unlock:\r\n// - if the current node is not selected, turn edge grey no matter what\r\n// - if the current node is selected, keep edge as it is\r\n// - push the unlock onto queue if it was selectable/selected\r\nimport getElement from './getelement.js';\r\nimport checkPrerequisites from './checkprerequisites.js';\r\n\r\nexport default function unselectNode(elements, node, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    // Unselect this node\r\n    delete selectedNodes[node.id];\r\n    var unselectQueue = [node.id];\r\n    while (unselectQueue.length !== 0) {\r\n        // Unshift and get the node\r\n        const current = getElement(unselectQueue.shift(), elements);\r\n        \r\n        // Analyse its prerequisites\r\n        // If the prereq node is selected, turn selected edge into potential edges\r\n        if (current.data.conditions.prerequisites !== null) {\r\n            for (const prereq of current.data.conditions.prerequisites) {\r\n                if (selectedNodes.hasOwnProperty(prereq)) {\r\n                    if (selectedEdges.hasOwnProperty('e' + prereq + '-' + current.id)) {\r\n                        delete selectedEdges['e' + prereq + '-' + current.id];\r\n                        potentialEdges['e' + prereq + '-' + current.id] = 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Determine the status of the current node\r\n        if (! checkPrerequisites(current, elements, selectedNodes)) {\r\n            // Does not meet prerequisites. Make it unselectable\r\n            if (selectableNodes.hasOwnProperty(current.id)) delete selectableNodes[current.id];\r\n            else if (selectedNodes.hasOwnProperty(current.id)) delete selectedNodes[current.id];\r\n        } else {\r\n            // Meets prerequisites. Make it selectable\r\n            if (selectedNodes.hasOwnProperty(current.id)) delete selectedNodes[current.id];\r\n            selectableNodes[current.id] = 1;\r\n        }\r\n\r\n        // Analyse its unlocks\r\n        if (current.data.unlocks !== null) {\r\n            for (const unlockCourse of current.data.unlocks) {\r\n                if (! selectedNodes.hasOwnProperty(current.id)) {\r\n                    // Make edge grey\r\n                    if (potentialEdges.hasOwnProperty('e' + current.id + '-' + unlockCourse)) delete potentialEdges['e' + current.id + '-' + unlockCourse];\r\n                    else if (selectedEdges.hasOwnProperty('e' + current.id + '-' + unlockCourse)) delete selectedEdges['e' + current.id + '-' + unlockCourse];\r\n                }\r\n\r\n                // Lets push everything no matter what and try it out\r\n                unselectQueue.push(unlockCourse);\r\n                /*if (selectedNodes.hasOwnProperty(unlockCourse) || selectableNodes.hasOwnProperty(unlockCourse)) {\r\n                    unselectQueue.push(unlockCourse);\r\n                }*/\r\n            }\r\n        }\r\n    }\r\n}","// HELPER FUNCTION to determine which previously unselectable nodes\r\n// are now selectable\r\nimport checkPrerequisites from './checkprerequisites.js';\r\n// import getElement from './getelement.js';\r\nimport {isNode} from 'react-flow-renderer';\r\n\r\nexport default function getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    // TODO: Deal with outsider nodes\r\n\r\n    const analyseNodesKeys = [];\r\n    for (const e of elements) {\r\n        if (isNode(e)) {\r\n            analyseNodesKeys.push(e);\r\n        }\r\n    }\r\n\r\n    // Analyse the target of potential edges for potential nodes\r\n    /*var analyseNodes = {};\r\n    const potentialEdgesKeys = Object.keys(potentialEdges);\r\n    for (var edge of potentialEdgesKeys) {\r\n        // Get the target course\r\n        const target = edge.split('-')[1];\r\n\r\n        if ((! selectedNodes.hasOwnProperty(target)) && (! selectableNodes.hasOwnProperty(target))) {\r\n            analyseNodes[edge.split('-')[1]] = 1;\r\n        }\r\n    }*/\r\n\r\n    \r\n    //const analyseNodesKeys = Object.keys(analyseNodes);\r\n    //console.log(\"==========ANALYSE NODES KEYS===========\");\r\n    //console.log(analyseNodesKeys);\r\n    //console.log(\"==============ELEMENTS===============\");\r\n    //console.log(elements);\r\n\r\n    for (const node of analyseNodesKeys) {\r\n        // Determine if the prerequisite has been met\r\n        //const node = getElement(nodeID, elements);\r\n        //console.log(node);\r\n        \r\n        // If the node is already selected, don't bother making it selectable\r\n        if (selectedNodes.hasOwnProperty(node.id)) continue;\r\n\r\n\r\n        if (checkPrerequisites(node, elements, selectedNodes)) {\r\n            //console.log(\"SELECTABLE\");\r\n            //console.log(node.id);\r\n            selectableNodes[node.id] = 1;\r\n        } else {\r\n            if (selectableNodes.hasOwnProperty(node.id)) delete selectableNodes[node.id];\r\n            //console.log(\"DELETE UNSELECTABLE\");\r\n            //console.log(node.id);\r\n            // TODO: Deal with selected nodes cases? (e.g. unselecting a child???)\r\n\r\n        }\r\n    }\r\n}","// HELPER FUNCTION to toggle exclusion courses\r\n// Will hide the current course and its edges, unhide the next course and edges\r\n// in the queue. Finds new edges to show by regex substitution???\r\nimport { getConnectedEdges } from 'react-flow-renderer';\r\nimport getElement from './getelement.js';\r\nimport checkPrerequisites from './checkprerequisites.js';\r\nimport unselectNode from './unselectnode.js';\r\n\r\nexport default function exclusionSwap(node, elements, edges, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups) {\r\n    /*console.log(\"EXCLUSION SWAP\");\r\n    console.log(exclusionGroups);\r\n    console.log(node.id);*/\r\n    const newElements = [...elements];\r\n    for (var group of exclusionGroups) {\r\n        //console.log(\"CHECKING\", group);\r\n        if (group.includes(node.id)) {\r\n            //console.log(\"FOUND THE EXCLUSION GROUP\");\r\n            //console.log(group);\r\n\r\n            // Move this to the back\r\n            const prevCourse = group.shift();\r\n            group.push(prevCourse);\r\n\r\n            // Current course we need to display is now at front of queue\r\n            const curCourse = group[0];\r\n\r\n            //console.log(prevCourse);-\r\n            //console.log(curCourse);\r\n\r\n\r\n            // Toggle the nodes themselves accordingly\r\n            for (var e of elements) {\r\n                if (e.id === prevCourse) {\r\n                    /*console.log(e);\r\n                    console.log(\"HIDING\");\r\n                    console.log(prevCourse);*/\r\n                    e.isHidden = true;\r\n                    //console.log(e);\r\n                } else if (e.id === curCourse) {\r\n                    /*console.log(e);\r\n                    console.log(\"REVEALING\");\r\n                    console.log(curCourse);*/\r\n                    e.isHidden = false;\r\n                    //console.log(e);\r\n                }\r\n            }\r\n\r\n            // Determine state of the nodes (E.g. COMP6441 can be selectable\r\n            // whilst COMP6841 is not)\r\n            var curNode = getElement(curCourse, elements);\r\n            if (checkPrerequisites(curNode, elements, selectedNodes)) {\r\n                // The new node is selectable\r\n                //console.log(\"================== SELECTABLE\", curCourse);\r\n                selectableNodes[curCourse] = 1;\r\n                \r\n                // Determine previous node condition\r\n                if (selectedNodes.hasOwnProperty(prevCourse)) {\r\n                    //console.log(\"PREVIOUS SELECTED\", prevCourse);\r\n                    delete selectedNodes[prevCourse];\r\n                    delete selectableNodes[curCourse];\r\n                    selectedNodes[curCourse] = 1;\r\n                } else if (selectableNodes.hasOwnProperty(prevCourse)) {\r\n                    //console.log(\"PREVIOUS SELECTABLE\", prevCourse);\r\n                    delete selectableNodes[prevCourse];\r\n                }\r\n            } else {\r\n                // The new node is not selectable\r\n                // Unselect the original node\r\n                unselectNode(elements, node, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            }         \r\n\r\n            // Get all the edges of the previous course and hide all of them\r\n            // Then use regex sub to determine the new edges to reveal\r\n            // Transfer over selected, potential and hover edges if they are in newedgeslist\r\n            var edgesList = getConnectedEdges([node], edges);\r\n            var newEdgesList = getConnectedEdges([curNode], edges);\r\n            var edgesIds = [];\r\n            var newEdgesIds = [];\r\n            for (const edge of edgesList) {\r\n                edgesIds.push(edge.id);\r\n            }\r\n            for (const newEdge of newEdgesList) {\r\n                newEdgesIds.push(newEdge.id);\r\n            }        \r\n\r\n            // Stores all the common edges\r\n            var checkedEdges = [];\r\n\r\n            // Go through each edge we need to hide and check what we should do\r\n            // with the edge in hideEdgesList\r\n            for (const edge of edgesList) {\r\n                var hideEdge = getElement(edge.id, elements);\r\n                hideEdge.isHidden = true;\r\n                var newEdgeId = hideEdge.id.replace(prevCourse, curCourse);\r\n                if (getElement(newEdgeId, edges) !== null) {\r\n                    checkedEdges.push(newEdgeId);\r\n                } \r\n\r\n                // If selected, unselect it\r\n                if (selectedEdges.hasOwnProperty(hideEdge.id)) {\r\n                    delete selectedEdges[hideEdge.id];\r\n                    if (newEdgesIds.includes(newEdgeId)) {\r\n                        // This is in the newEdges list. Transfer the edge property\r\n                        selectedEdges[newEdgeId] = 1;\r\n                    }\r\n                }\r\n\r\n                // If potential, unpotential it\r\n                if (potentialEdges.hasOwnProperty(hideEdge.id)) {\r\n                    delete potentialEdges[hideEdge.id];\r\n                    if (newEdgesIds.includes(newEdgeId)) {\r\n                        // This is in the newEdges list. Transfer the edge property\r\n                        potentialEdges[newEdgeId] = 1;\r\n                    }\r\n                }\r\n\r\n                // If hover, unhover it\r\n                if (hoverEdges.hasOwnProperty(hideEdge.id)) {\r\n                    delete hoverEdges[hideEdge.id];\r\n                    if (newEdgesIds.includes(newEdgeId)) {\r\n                        // This is in the newEdges list. Transfer the edge property\r\n                        hoverEdges[newEdgeId] = 1;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            //console.log(\"CHECKED EDGES\", checkedEdges);\r\n            \r\n            for (const edge of edgesIds) {\r\n                const newEdgeId = edge.replace(prevCourse, curCourse);\r\n                if (! checkedEdges.includes(newEdgeId)) {\r\n                    // Old edge which has not been transferred to new edge.\r\n                    // Deal with the TARGET NODE SELECTABILITY right here\r\n                    var target = newEdgeId.split('-')[1];\r\n                    //console.log(\"CHECKING\", newEdgeId);\r\n                    //console.log(\"TARGET IS\", target);\r\n                    // Note that we cannot use newEdge.target as this edge\r\n                    // DOES NOT EXIST ( i think )\r\n\r\n                    // TODO: TEMPORARY FIX. Make sure target is not current course\r\n                    if (target === curCourse) continue;\r\n\r\n                    if (selectableNodes.hasOwnProperty(target)) {\r\n                        //console.log(\"Deleting \" + target);\r\n                        delete selectableNodes[target];\r\n                    }\r\n                }\r\n            }\r\n\r\n            // For each edge, show it IF TARGET AND SOURCE ARE NOT HIDDEN\r\n            // Will also show any additional edges\r\n            // (Example: COMP6441, COMP6841. COMP6841 -> COMP6448 but COMP6441 does not)\r\n            for (const newEdge of newEdgesList) {\r\n                var edge = getElement(newEdge.id, elements);\r\n                const sourceNode = getElement(edge.source, elements);\r\n                const targetNode = getElement(edge.target, elements);\r\n                if ((!sourceNode.isHidden) && (!targetNode.isHidden)) {\r\n                    // Show the edge if both nodes are not hidden\r\n                    edge.isHidden = false;    \r\n                }\r\n\r\n                // Determine if this edge has been checked before\r\n                if (checkedEdges.includes(newEdge.id)) {\r\n                    // It has been checked before\r\n                    // TODO: THIS CAN BREAK if both nodes have same edges\r\n                    // but one has an additional prerequisite??????\r\n                    continue;\r\n                } else {\r\n                    //console.log(newEdge.id + \" NOT BEEN CHECKED BEFORE\")\r\n                    // It has NOT been checked before\r\n                    if (selectedNodes.hasOwnProperty(curCourse)) {\r\n                        //console.log(curCourse + \" was previously selected\");\r\n                        \r\n                        if (sourceNode.id === curCourse) {\r\n                            // Reveal node is selected and source of edge. Make potential edge.\r\n                            potentialEdges[newEdge.id] = 1;\r\n                            // Check if the target node is selectable\r\n                            if (! selectableNodes.hasOwnProperty(edge.target)) {\r\n                                if (checkPrerequisites(targetNode, elements, selectedNodes)) {\r\n                                    //console.log(edge.target + \" DOES MEET PREREQS\");\r\n                                    selectableNodes[targetNode.id] = 1;\r\n                                } else {\r\n                                    //console.log(edge.target + \" DOES NOT MEET PREREQS\");\r\n                                }\r\n                            }\r\n                        } else {\r\n                            // Reveal node is selected and target of edge. Check previous edges/nodes\r\n                            if (curNode.data.conditions.prerequisites !== null) {\r\n                                for (const prereq of curNode.data.conditions.prerequisites) {\r\n                                    if (selectedNodes.hasOwnProperty(prereq)) {\r\n                                        // This node was selected. Make the edge selected\r\n                                        if (potentialEdges.hasOwnProperty('e' + prereq + '-' + curCourse)) delete potentialEdges['e' + prereq + '-' + curCourse];\r\n                                        selectedEdges['e' + prereq + '-' + curCourse] = 1;\r\n                                    } else {\r\n                                        // This node was not selected. Make sure the edge is unselected\r\n                                        if (potentialEdges.hasOwnProperty('e' + prereq + '-' + curCourse)) delete potentialEdges['e' + prereq + '-' + curCourse];\r\n                                        if (selectedEdges.hasOwnProperty('e' + prereq + '-' + curCourse)) delete selectedEdges['e' + prereq + '-' + curCourse];\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        //console.log(curCourse + \" was not previously selected\")\r\n                        // The node was not selected before. Delete any potential edges\r\n                        // Make target node unselectable if prereqs are not met\r\n                        if (potentialEdges.hasOwnProperty(edge.id)) {\r\n                            //console.log(\"DELETING \" + edge.id);\r\n                            delete potentialEdges[edge.id];\r\n                            if (selectableNodes.hasOwnProperty(edge.target)) {\r\n                                //console.log(edge.target + \" WAS SELECTABLE\")\r\n                                if (! checkPrerequisites(targetNode, elements, selectedNodes)) {\r\n                                    //console.log(edge.target + \" DOES NOT MEET PREREQS\");\r\n                                    delete selectableNodes[targetNode.id];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            /*for (const newEdge of newEdgesList) {\r\n                for (const edge of newElements) {\r\n                    if (newEdge.id === edge.id) {\r\n                        const sourceNode = getElement(edge.source, elements);\r\n                        const targetNode = getElement(edge.target, elements);\r\n                        if ((!sourceNode.isHidden) && (!targetNode.isHidden)) {\r\n                            edge.isHidden = false;\r\n                            \r\n                            \r\n                            // If the new node is selected, make this edge blue\r\n                            // Else, make this edge grey. Deals with differing edge\r\n                            // cases COMP6441 and COMP6841\r\n                            if (selectedNodes.hasOwnProperty(curCourse)) {\r\n                                potentialEdges[edge.id] = 1;\r\n                                // Make sure the target node is selectable\r\n                                if (! selectableNodes.hasOwnProperty(edge.target)) {\r\n                                    if (checkPrerequisites(targetNode, selectedNodes)) {\r\n                                        selectableNodes[targetNode.id] = 1;\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                if (potentialEdges.hasOwnProperty(edge.id)) {\r\n                                   delete potentialEdges[edge.id];\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }*/\r\n\r\n\r\n            break;\r\n        }\r\n    }\r\n\r\n    return newElements;\r\n}","// HELPER FUNCTION FOR unselecting nodes\r\n// Determines if any nodes not connected to unselect node needs to be unselected.\r\n// For example, nodes which rely on N units completed\r\nimport checkPrerequisites from './checkprerequisites.js';\r\nimport checkPrequisiteUnits from './checkprerequisites.js';\r\nimport unselectNode from './unselectnode.js';\r\nimport getElement from './getelement.js';\r\n\r\nexport default function unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges) {\r\n    console.log(\"UNSELECTUNCONNECTED\");\r\n    const selectedNodesList = Object.keys(selectedNodes);\r\n    for (const selected of selectedNodesList) {\r\n        if (selected === \"SENGAH\") continue;\r\n        console.log(\"CHECKING \" + selected);\r\n\r\n        // Determine if prerequisites are met\r\n        const selectedNode = getElement(selected, elements);\r\n        if (! checkPrerequisites(selectedNode, elements, selectedNodes)) {\r\n            // Prerequisites are not met\r\n            unselectNode(elements, selectedNode, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            continue;\r\n        }\r\n\r\n        // CASE if the node is selected and it has n_course prerequisite \r\n        if (selectedNode.data.conditions.units_required !== null) {\r\n            console.log(\"+++++++++++++++++++\", selectedNode.id);\r\n            // Units required exists\r\n            // Do not count the nodes it \"unlocks\" towards its unit count\r\n            // DO not count nodes with a higher \"units_required\" towards its unit count\r\n            // NOTE: This might backfire if it has an unlock which DOES NOT\r\n            // require it as a prerequisite\r\n            \r\n            var trueSelectedNodes = {...selectedNodes};\r\n\r\n            if (selectedNode.data.unlocks !== null) {\r\n                // Create unlock queue to process \"selected\" unlocks\"\r\n                const selectedUnlockQueue = [];\r\n                for (const unlockCourse of selectedNode.data.unlocks) {\r\n                    if (selectedNodes.hasOwnProperty(unlockCourse)) selectedUnlockQueue.push(unlockCourse);\r\n                }\r\n\r\n                while (selectedUnlockQueue.length !== 0) {\r\n                    const curUnlock = getElement(selectedUnlockQueue.shift(), elements);\r\n                    console.log(\"------------- deleting \" + curUnlock.id);\r\n                    delete trueSelectedNodes[curUnlock.id];\r\n\r\n                    if (curUnlock.data.unlocks !== null) {\r\n                        for (const unlockCourse of curUnlock.data.unlocks) {\r\n                            if (selectedNodes.hasOwnProperty(unlockCourse)) selectedUnlockQueue.push(unlockCourse);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // We now have a list of nodes which will count towards our current node's unit requirements\r\n            // Final check = Check for other selected nodes which have unit requirements\r\n            // Do not count them unless their unit requirements are smaller than current node's.\r\n            const trueSelectedNodesList = Object.keys(trueSelectedNodes);\r\n            for (const selected of trueSelectedNodesList) {\r\n                console.log(\"Checking \", selected);\r\n                const selectedUnitsNode = getElement(selected, elements);\r\n                if (selectedUnitsNode.data.conditions.units_required !== null) {\r\n                    if (selectedUnitsNode.data.conditions.units_required >= selectedNode.data.conditions.units_required) {\r\n                        delete trueSelectedNodes[selected];\r\n                    }\r\n                }\r\n            }\r\n\r\n            console.log(\"TRUE SELECTED LOOKS LIKE\", trueSelectedNodes);\r\n            // Perform prerequisite unit check once more\r\n            if (! checkPrequisiteUnits(selectedNode, elements, trueSelectedNodes)) {\r\n                unselectNode(elements, selectedNode, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            }\r\n        }\r\n    }\r\n\r\n    const selectableNodesList = Object.keys(selectableNodes);\r\n    for (const selectable of selectableNodesList) {\r\n        // Determine if prerequisites are met\r\n        const selectableNode = getElement(selectable, elements);\r\n        if (! checkPrerequisites(selectableNode, elements, selectedNodes)) {\r\n            // Prerequisites are not met\r\n            delete selectableNode[selectable];\r\n        }\r\n    }\r\n}","import React, {useState} from 'react';\r\nimport ReactFlow, {isNode, isEdge, ReactFlowProvider} from 'react-flow-renderer';\r\nimport TutorialNode1 from './tutorialnode1.js';\r\nimport TutorialNode2 from './tutorialnode2.js';\r\n\r\nimport hoverPrerequisites from './hoverprerequisites.js';\r\nimport unhoverPrerequisites from './unhoverprerequisites.js';\r\nimport highlightElements from './highlightelements.js';\r\nimport checkPrerequisites from './checkprerequisites.js';\r\n\r\nimport selectNode from './selectnode.js';\r\nimport unselectNode from './unselectnode.js';\r\nimport getSelectable from './getselectable.js';\r\nimport exclusionSwap from './exclusionswap.js';\r\nimport unselectUnconnected from './unselectunconnected.js';\r\n\r\nvar elementsData = [\r\n    {id: \"CODE0000\", type: \"tutorial1\", data: {instructions: \"Circles is an interactive graph to aid with your degree plan\", course_level: null, units: 0, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: null, prerequisites: null, corequisites: null, units_required: null, level_for_units_required: null, core_year: null, other: null}, equivalents: null, exclusions: null, unlocks: [\"CODE1111\"]}, position: {x: 0, y: -100}, style: {display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 6, color: \"black\", background: \"lightgrey\", width: 64, height: 64, borderRadius: 32, border: \"2px solid black\"}, textColour: 'black', textSelectedColour: 'black', selectedColour: 'lightgrey', selectableColour: 'black', isHidden: false},\r\n    {id: \"CODE1111\", type: \"tutorial1\", data: {instructions: \"Click on a node to take the course\", course_level: null, units: 6, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: \"CODE0000\", prerequisites: [\"CODE0000\"], corequisites: null, units_required: null, level_for_units_required: null, core_year: null, other: null}, equivalents: null, exclusions: null, unlocks: [\"CODE2222\"]}, position: {x: -150, y: 0}, style: {display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 6, color: \"#1EB13C\", background: \"white\", width: 64, height: 64, borderRadius: 32, border: \"2px solid #1EB13C\"}, textColour: '#1EB13C', textSelectedColour: 'white', selectableColour: '#bce8c5', selectedColour: '#1EB13C', isHidden: false},\r\n    {id: \"CODE2222\", type: \"tutorial1\", data: {instructions: \"Courses light up when you meet all the prerequisites\", course_level: null, units: 6, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: \"CODE1111\", prerequisites: [\"CODE1111\"], corequisites: null, units_required: null, level_for_units_required: null, core_year: null, other: null}, equivalents: null, exclusions: null, unlocks: [\"CODE3333\", \"CODE4444\"]}, position: {x: 0, y: 0}, style: {display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 6, color: \"#166DBA\", background: \"white\", width: 64, height: 64, borderRadius: 32, border: \"2px solid #166DBA\"}, textColour: '#166DBA', textSelectedColour: 'white', selectableColour: '#b9d3ea', selectedColour: '#166DBA', isHidden: false},\r\n    {id: \"CODE3333\", type: \"tutorial2\", data: {instructions: \"Some courses are togglable. Double click to try!\", course_level: null, units: 6, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: \"CODE2222\", prerequisites: [\"CODE2222\"], corequisites: null, units_required: null, level_for_units_required: null, core_year: null, other: null}, equivalents: null, exclusions: [\"CODE4444\"], unlocks: null}, position: {x: 150, y: 0}, style: {display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 6, color: \"#CA1818\", background: \"white\", width: 64, height: 64, borderRadius: 32, border: \"2px solid #CA1818\"}, textColour: '#CA1818', textSelectedColour: 'white', selectableColour: '#efbaba', selectedColour: '#CA1818', isHidden: false},\r\n    {id: \"CODE4444\", type: \"tutorial2\", data: {instructions: \"SOME COURSES ARE TOGGLABLE. DOUBLE CLICK TO TRY!\", course_level: null, units: 6, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: \"CODE2222\", prerequisites: [\"CODE2222\"], corequisites: null, units_required: null, level_for_units_required: null, core_year: null, other: null}, equivalents: null, exclusions: [\"CODE3333\"], unlocks: null}, position: {x: 150, y: 0}, style: {display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 6, color: \"#CA1818\", background: \"white\", width: 64, height: 64, borderRadius: 32, border: \"2px solid #CA1818\"}, textColour: '#CA1818', textSelectedColour: 'white', selectableColour: '#efbaba', selectedColour: '#CA1818', isHidden: false},\r\n    {id: \"CODE5555\", type: \"tutorial1\", data: {instructions: \"This course required 18UOC. It will be selectable once you have enough units\", course_level: null, units: 6, terms: [\"Term1, Term2, Term3\"], conditions: {raw: \"RAW\", prereqs_executable: null, prerequisites: null, corequisites: null, units_required: 18, level_for_units_required: null, core_year: null, other: null}, equivalents: null, unlocks: null}, position: {x: 0, y: 100}, style: {display: \"flex\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", fontSize: 6, color: \"#D66328\", background: \"white\", width: 64, height: 64, borderRadius: 32, border: \"2px solid #D66328\"}, textColour: '#D66328', textSelectedColour: 'white', selectableColour: '#f3d0bf', selectedColour: '#D66328', isHidden: false},\r\n\r\n    {id: 'eCODE0000-CODE1111', source: 'CODE0000', target: 'CODE1111', type: 'straight', style: {opacity: '0.2', stroke: 'grey'}, animated: false, isHidden: false},\r\n    {id: 'eCODE1111-CODE2222', source: 'CODE1111', target: 'CODE2222', type: 'straight', style: {opacity: '0.2', stroke: 'grey'}, animated: false, isHidden: false},\r\n    {id: 'eCODE2222-CODE3333', source: 'CODE2222', target: 'CODE3333', type: 'straight', style: {opacity: '0.2', stroke: 'grey'}, animated: false, isHidden: false},\r\n    {id: 'eCODE2222-CODE4444', source: 'CODE2222', target: 'CODE4444', type: 'straight', style: {opacity: '0.2', stroke: 'grey'}, animated: false, isHidden: false},\r\n];\r\n\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {\"CODE0000\": 1};\r\nvar selectedEdges = {};\r\nvar selectableNodes = {\"CODE1111\": 1};\r\nvar potentialEdges = {\"eCODE0000-CODE1111\": 1};\r\nvar hoverEdges = {};\r\nvar exclusionGroups = [[\"CODE3333\", \"CODE4444\"]];\r\nvar exclusionNodes = {};\r\n\r\nconst nodeTypes = {\r\n    tutorial1: TutorialNode1,\r\n    tutorial2: TutorialNode2,\r\n};\r\n\r\n\r\n// elementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\n\r\n\r\n\r\nconst InteractiveTutorial = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n\r\n    const onLoad = (reactFlowInstance) => {\r\n        // HARD RESET STATE ON LOAD\r\n        selectedNodes = {\"CODE0000\": 1};\r\n        selectedEdges = {};\r\n        selectableNodes = {\"CODE1111\": 1};\r\n        potentialEdges = {\"eCODE0000-CODE1111\": 1};\r\n        hoverEdges = {};\r\n        exclusionGroups = [[\"CODE3333\", \"CODE4444\"]];\r\n        exclusionNodes = {};        \r\n        \r\n        for (var e of elements) {\r\n            e.isHidden = false;\r\n        }\r\n        for (const group of exclusionGroups) {\r\n            for (const exclusion of group) {\r\n                exclusionNodes[exclusion] = 1;\r\n            }\r\n        }\r\n        for (var group of exclusionGroups) {\r\n            const last = group.pop();\r\n            for (var course of elements) {\r\n                if (last === course.id) {\r\n                    course.isHidden = true;\r\n                    for (var edge of elements) {\r\n                        if (isNode(edge)) continue;\r\n                        if (edge.source === last || edge.target === last) {\r\n                            edge.isHidden = true;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            group.push(last);\r\n        }\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n        reactFlowInstance.fitView();\r\n    };\r\n\r\n    const selectUnselect = (element) => {\r\n        unhoverPrerequisites(hoverEdges);\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n    \r\n    const toggleExclusion = (element) => {\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onElementClick = (event, element) => {\r\n        if (element.id === \"CODE0000\") return;\r\n        if (isEdge(element)) return;\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return;\r\n\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 200);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            selectUnselect(element);\r\n        }\r\n    }\r\n\r\n    const onNodeMouseEnter = (event, node) => {\r\n        setHoverNode(node);\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    return (\r\n        <ReactFlow\r\n            elements={elements}\r\n            style={{width: \"100%\", height: \"90vh\"}}\r\n            onLoad={onLoad}\r\n            nodeTypes={nodeTypes}\r\n            nodesConnectable={false}\r\n            onElementClick={onElementClick}\r\n            paneMoveable={false}\r\n            selectNodesOnDrag={false}\r\n            elementsSelectable={false}\r\n            nodesDraggable={false}\r\n            onNodeMouseEnter={onNodeMouseEnter}\r\n            onNodeMouseLeave={onNodeMouseLeave}\r\n        >\r\n        </ReactFlow>\r\n    );\r\n}\r\n\r\nexport default InteractiveTutorial;","import React from \"react\";\r\nimport { Button, Container, Modal } from 'semantic-ui-react'\r\nimport InteractiveTutorial from './interactivetutorial.js';\r\n\r\nfunction exampleReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'OPEN_MODAL':\r\n      return { open: true, dimmer: action.dimmer }\r\n    case 'CLOSE_MODAL':\r\n      return { open: false }\r\n    default:\r\n      throw new Error()\r\n  }\r\n}\r\n\r\nfunction TutorialModal() {\r\n  const [state, dispatch] = React.useReducer(exampleReducer, {\r\n    open: false,\r\n    dimmer: undefined,\r\n  })\r\n  const { open, dimmer } = state\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        size=\"mini\"\r\n        color=\"black\"\r\n        onClick={() => dispatch({ type: 'OPEN_MODAL', dimmer: 'blurring' })}\r\n      >\r\n        <text>Need Help?</text>  \r\n      </Button>\r\n\r\n      <Modal\r\n        closeIcon\r\n        dimmer={dimmer}\r\n        open={open}\r\n        onClose={() => dispatch({ type: 'CLOSE_MODAL' })}\r\n      >\r\n        <Container>\r\n          <InteractiveTutorial />\r\n        </Container>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TutorialModal\r\n\r\n//DropdownDegrees.clickDone() \r\n\r\n//DropdownDegrees d = new DropdownDegrees(); \r\n//d.clickDone()","import React from 'react';\r\nimport SidebarModal from \"./sidebar-modal.js\";\r\nimport TutorialModal from \"./tutorial-modal.js\";\r\nimport { Icon, Button, Container, Header, Divider, Segment, Message, Label } from 'semantic-ui-react';\r\nimport ScrollTo from \"react-scroll-into-view\";\r\nimport specialisationsJSON from \"../webscraper/specialisations.json\";\r\nimport coursesJSON from \"../webscraper/courses.json\";\r\n\r\nconst REGEX_COURSE_CODE = /[A-Z]{4}\\d{4}/g;\r\n\r\nconst getCoursesInLevel = (rawList) => {\r\n    rawList = rawList.flat().filter(c => c !== \"ANY COURSE\");\r\n    const allCourseIds = Object.keys(coursesJSON);\r\n    const courseList = [];\r\n    rawList.forEach(courseId => {\r\n        if (courseId.match(REGEX_COURSE_CODE)) {\r\n            courseList.push(courseId);\r\n        } else if (courseId.match(/^[A-Z]{4}\\d$/)) {\r\n            const relevantCourses = allCourseIds.filter(c => c.includes(courseId));\r\n            relevantCourses.forEach(c => {\r\n                if (courseList.includes(c)) return;\r\n                courseList.push(c);\r\n            });\r\n        }\r\n    });\r\n\r\n    return courseList;\r\n}\r\n\r\nconst getSelectedCourses = (specialisationCode, selectedNodes) => {\r\n    const levels = Object.keys(specialisationsJSON[specialisationCode].structure);\r\n    const coreCourses = [];\r\n\r\n    return levels.filter(levelName => {\r\n        const courseList = specialisationsJSON[specialisationCode].structure[levelName].courses;\r\n        if (!courseList) return false;\r\n        if (courseList.length === 1 && courseList.includes(\"ANY COURSE\")) return false;\r\n        return true;\r\n    }).map(levelName => {\r\n        const rawList = specialisationsJSON[specialisationCode].structure[levelName].courses;\r\n        const courseList = getCoursesInLevel(rawList);\r\n        const minUnits = specialisationsJSON[specialisationCode].structure[levelName].units_required;\r\n        const style = {\r\n            transition: \"0.3s ease\"\r\n        }\r\n        if (levelName.match(/[Cc]ore/g)) {\r\n            // CORE COURSE\r\n            courseList.forEach(c => coreCourses.push(c));\r\n            const unitsTaken = courseList.reduce((total, c) => total + (c in selectedNodes ? coursesJSON[c].units : 0), 0);\r\n            const showUnits = minUnits\r\n                ? <Label horizontal style={{transition: \"0.3s ease\", alignSelf: \"flex-start\"}} color={unitsTaken >= minUnits ? \"green\" : \"red\"}>{unitsTaken}/{minUnits}</Label>\r\n                : null;\r\n            return (\r\n                <Segment key={levelName} color=\"red\">\r\n                    <div style={{display: \"flex\"}}>\r\n                        <Header style={{flexGrow: \"1\"}} as=\"h5\">{levelName}</Header>\r\n                        {showUnits}\r\n                    </div>\r\n                    {courseList.map(c => c in selectedNodes ? <Label key={c} size=\"small\" color=\"grey\" style={style}>{c}</Label> : <Label key={c} size=\"small\" style={style}>{c}</Label>)}\r\n                </Segment>\r\n            )\r\n        } else {\r\n            // Not core course. Render segment with chosen electives only.\r\n            const unitsTaken = courseList.reduce((total, c) => total + (c in selectedNodes && !coreCourses.includes(c) ? coursesJSON[c].units : 0), 0);\r\n            const showUnits = minUnits\r\n                ? <Label horizontal style={{transition: \"0.3s ease\", alignSelf: \"flex-start\"}} color={unitsTaken >= minUnits ? \"green\" : \"red\"}>{unitsTaken}/{minUnits}</Label>\r\n                : null;\r\n            return (\r\n                <Segment key={levelName} style={{minHeight: \"70px\"}}>\r\n                    <div style={{display: \"flex\"}}>\r\n                        <Header style={{flexGrow: \"1\"}} as=\"h5\">{levelName}</Header>\r\n                        {showUnits}\r\n                    </div>\r\n                    {courseList.filter(c => (c in selectedNodes && !coreCourses.includes(c))).map(c => <Label key={c} size=\"small\" color=\"grey\" style={style}>{c}</Label>)}\r\n                </Segment>\r\n            )\r\n        }\r\n    })\r\n}\r\nclass Sidebar extends React.Component {\r\n    render() {\r\n        return (\r\n            <Container style={{paddingLeft: \"10px\", paddingRight: \"20px\"}}>\r\n                <Header as=\"h1\" textAlign=\"center\" style={{marginTop: \"10px\"}}>Circles</Header>\r\n                <Message info>\r\n                    <p>Circles is a <b>visual degree planner</b> for UNSW undergraduate students. Choose your program and degree to begin!</p>\r\n                    <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\"}}>\r\n                        <SidebarModal />\r\n                        <TutorialModal />\r\n                    </div>\r\n                </Message>\r\n                <Divider></Divider>\r\n                <Container>\r\n                    <Header as=\"h3\" textAlign=\"center\">Your selected courses</Header>\r\n                    {getSelectedCourses(\"SENGAH\", this.props.selectedNodes)}\r\n                </Container>\r\n                <Container textAlign=\"center\">\r\n                    <ScrollTo selector=\"#DegreePlanner\">\r\n                        <Button\r\n                            animated=\"vertical\"\r\n                            color=\"red\"\r\n                            style={{marginTop: \"10px\", marginBottom: \"10px\"}}\r\n                        >\r\n                            <Button.Content visible>Generate degree planner</Button.Content>\r\n                            <Button.Content hidden>\r\n                                <Icon name=\"arrow down\" />\r\n                            </Button.Content>\r\n                        </Button>\r\n                    </ScrollTo>\r\n\r\n                </Container>\r\n            </Container>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Sidebar","import React, { useState } from \"react\";\r\nimport { Button, Dropdown } from \"semantic-ui-react\";\r\nimport { useStoreActions } from \"react-flow-renderer\";\r\nimport dataJSON from \"../maps/EngineeringHonoursSoftware/data.json\";\r\nimport getElement from \"./getelement.js\";\r\n\r\nconst nodeOptions = [];\r\nconst elementsList = [];\r\n\r\nfor (const code in dataJSON) {\r\n    const id = dataJSON[code].id;\r\n    //console.log(\"Printing id\", id);\r\n    if (id.includes(\"-\")) continue;\r\n\r\n    elementsList.push(dataJSON[code]);\r\n    nodeOptions.push({\r\n        key: id,\r\n        value: id,\r\n        text: id,\r\n    });\r\n}\r\n\r\n// console.log(\"Printing NodeOptions\", nodeOptions);\r\n\r\nexport default function DropdownSearch(props) {\r\n    const [search, setSearch] = useState(null);\r\n\r\n    const handleChange = (e, prop) => {\r\n        setSearch(prop.value);\r\n    };\r\n\r\n    const { setInitTransform } = useStoreActions((actions) => actions);\r\n    const transformUpdater = (x, y, zoom) => {\r\n        setInitTransform({ x, y, k: zoom });\r\n    };\r\n\r\n    const clickDone = () => {\r\n        if (search === null) return;\r\n        const element = getElement(search, elementsList);\r\n\r\n        transformUpdater(\r\n            -(element.position.x)*2 + props.canvasSize[0]/2 - 64,\r\n            -(element.position.y)*2 + props.canvasSize[1]/2 - 64,\r\n            2\r\n        );\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dropdown\r\n                selection\r\n                search\r\n                options={nodeOptions}\r\n                placeholder=\"Looking for a course?\"\r\n                onChange={handleChange}\r\n                onKeyPress={event => {\r\n                    if (event.key === 'Enter') {\r\n                      clickDone();\r\n                    }\r\n                  }}\r\n                value={search}\r\n            />\r\n            <Button\r\n                onClick={clickDone}\r\n                icon=\"search\"\r\n                color=\"blue\"\r\n                style={{marginLeft: \"5px\"}}\r\n            >\r\n            </Button>\r\n        </>\r\n    );\r\n}\r\n","import {isNode} from 'react-flow-renderer';\r\n\r\n// HELPER FUNCTION FOR POSITIONING\r\n// Prints out positions of all nodes\r\nexport default function positionHelper(elements) {\r\n    var positioning_data = [];\r\n    for (const e of elements) {\r\n        if (isNode(e)) {\r\n            positioning_data.push({\r\n                id: e.id,\r\n                position: {x: e.position.x, y: e.position.y},\r\n            });\r\n        }\r\n    }\r\n    // Write data to position output file. Note we have to do this ourselves as we\r\n    // are making a server write to a local file.\r\n    console.log('[');\r\n    for (const e of positioning_data) {\r\n        console.log('{\"id\": \"' + e.id + '\", \"position\": {\"x\": ' + e.position.x + ', \"y\": ' + e.position.y + '}},');\r\n    }\r\n    console.log(']');\r\n}","import React, {useState} from 'react';\r\nimport ReactFlow, { isNode, isEdge, ReactFlowProvider } from 'react-flow-renderer';\r\n\r\nimport CustomNode1 from '../../components/customnode1.js';\r\nimport CustomNode2 from '../../components/customnode2.js';\r\nimport HeaderNode1 from '../../components/headernode1.js';\r\n\r\nimport HoverInfo from '../../components/hoverinfo.js';\r\nimport hoverPrerequisites from '../../components/hoverprerequisites.js';\r\nimport unhoverPrerequisites from '../../components/unhoverprerequisites.js';\r\n\r\nimport { Grid, Segment, Container, Dropdown, Header } from 'semantic-ui-react'\r\nimport Sidebar from \"../../components/sidebar.js\"\r\n// import pkg from 'semantic-ui-react/package.json'\r\n\r\nimport DegreePlanner from \"../../components/degreeplanner.js\"\r\nimport DropdownSearch from \"../../components/dropdownsearch.js\"\r\n\r\nimport positionHelper from '../../components/positionhelper.js';\r\nimport selectNode from '../../components/selectnode.js';\r\nimport unselectNode from '../../components/unselectnode.js';\r\nimport highlightElements from '../../components/highlightelements.js';\r\nimport getSelectable from '../../components/getselectable.js';\r\nimport checkPrerequisites from '../../components/checkprerequisites';\r\nimport exclusionSwap from '../../components/exclusionswap.js';\r\n\r\nimport unselectUnconnected from '../../components/unselectunconnected.js';\r\nimport coursesJSON from \"../../webscraper/courses.json\";\r\nimport dataJSON from \"./data.json\"\r\n\r\nvar specialisations = ['SENGAH'];\r\nvar elementsData = dataJSON.slice()\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {};\r\nfor (const specialisation of specialisations) selectedNodes[specialisation] = 1;\r\n\r\nvar selectedEdges = {};\r\nvar selectableNodes = {};\r\nvar potentialEdges = {};\r\nvar hoverEdges = {};\r\n\r\n// Load up the chart with initial selectable nodes and edges\r\nfor (const node of nodesData) {\r\n    if (selectedNodes.hasOwnProperty(node.id)) {\r\n        if (node.data.unlocks === null) continue;\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n        }\r\n    } else if (checkPrerequisites(node, elementsData, selectedNodes)) {\r\n        selectableNodes[node.id] = 1;\r\n    }\r\n}\r\n\r\nvar exclusionGroups = require(\"./data_exclusion.json\");\r\nvar exclusionNodes = {};\r\nfor (const group of exclusionGroups) {\r\n    for (const exclusion of group) {\r\n        exclusionNodes[exclusion] = 1;\r\n    }\r\n}\r\n\r\nelementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\nconst nodeTypes = {\r\n    custom1: CustomNode1,\r\n    custom2: CustomNode2,\r\n    header1: HeaderNode1\r\n};\r\n\r\nconst layoutStyle = {overflowX: \"hidden\", overflowY: \"overlay\", width: \"100vw\", height: \"100vh\"};\r\n\r\nconst getMoreCoursesForDropdown = (dataJSON) => {\r\n\r\n    const moreOptions = [];\r\n    const nodesOnFlowchart = dataJSON.map(node => node.id);\r\n    // console.log(\"refresh\", nodesOnFlowchart);\r\n\r\n    for (const code in coursesJSON) {\r\n        if (nodesOnFlowchart.includes(code)) continue;\r\n\r\n        const name = coursesJSON[code].course_name;\r\n        moreOptions.push({\r\n            key: code,\r\n            value: code,\r\n            text: code + \" - \" + name\r\n        });\r\n    }\r\n\r\n    return moreOptions;\r\n}\r\n\r\nconst BESengah = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverText, setHoverText] = useState(false);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    const [layout, setLayout] = useState(layoutStyle);\r\n    //const reactFlowInstance = useRef(null);\r\n    const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n    const [additionalCourses, setAdditionalCourses] = useState([])\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n\r\n    const onInstanceLoad = (instance) => {\r\n        for (var group of exclusionGroups) {\r\n            const last = group.pop();\r\n    \r\n            for (var course of elementsData) {\r\n                if (last === course.id) {\r\n                    course.isHidden = true;\r\n                    // console.log(\"Hiding \" + course.id);\r\n                    // Get all the edges and hide them too\r\n                    for (var edge of elementsData) {\r\n                        if (isNode(edge)) continue;\r\n                        if (edge.source === last || edge.target === last) {\r\n                            // console.log(\"hiding \" + edge.id);\r\n                            edge.isHidden = true;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            group.push(last);\r\n        }\r\n        setReactFlowInstance(instance);\r\n        instance.setTransform({x: 470, y: 350, zoom: 0.38});\r\n    };\r\n\r\n    const getCanvasSize = () => {\r\n        const size1 = reactFlowInstance.project({x: window.innerWidth * 0.75, y: window.innerHeight});\r\n        const size2 = reactFlowInstance.project({x: 0, y: 0});\r\n        return [(size1.x - size2.x) * 0.38, (size1.y - size2.y) * 0.38];\r\n    }\r\n\r\n\r\n    let dropSearch = null;\r\n    if (reactFlowInstance !== null) {\r\n        dropSearch = <DropdownSearch canvasSize={getCanvasSize()}/>\r\n    }\r\n\r\n    const selectUnselect = (element) => {\r\n        // NOTE: Might not need this?????\r\n        // EXPLANATION: Reason we dont need it is because we have to leave node\r\n        // anyways to hover another node. But maybe good practise to have just in case\r\n        // Unhover edges which lit up on nodeMouseEnter\r\n        unhoverPrerequisites(hoverEdges);\r\n\r\n        // 1. Select the node and fill in edges.\r\n        // - Deal with unselecting nodes\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            // console.log(\"MAINSELECT\");\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            // console.log(\"UNSELECTING\");\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n\r\n        // console.log(\"==========SelectedNodes==========\");\r\n        // console.log(selectedNodes);\r\n        // console.log(\"==========SelectedEdges==========\");\r\n        // console.log(selectedEdges);\r\n        // console.log(\"==========SelectableNodes==========\");\r\n        // console.log(selectableNodes);\r\n        // console.log(\"==========PotentialEdges==========\");\r\n        // console.log(potentialEdges);\r\n\r\n        // 2. Determine which nodes are now selectable\r\n        // - Determine which previously selectable nodes are now unselectable\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n\r\n        // Render graph accordingly\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const toggleExclusion = (element) => {\r\n        // TODO: ARE there courses which do not \r\n        // For all immediate edges of the element, swap\r\n        // with the exclusion course\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    // ==========ONCLICK==========\r\n    const onElementClick = (event, element) => {\r\n        // console.log(\"ONELEMENTCLICK\");\r\n        if (isEdge(element)) return; // Don't care about edges\r\n        if (specialisations.includes(element.id)) return; // Cannot click on main node\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return; // Cannot select non selectable nodes\r\n\r\n        // Determine double or single click for exclusion nodes\r\n        // This will prevent normal nodes from waiting the double click delay\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 200);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            // Not an exclusion node.\r\n            selectUnselect(element);\r\n        }\r\n    };\r\n    // ===========================\r\n\r\n    // ==========ONHOVER==========\r\n    const onNodeMouseEnter = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        // Display node information in top left\r\n        setHoverText(true);\r\n        setHoverNode(node);\r\n\r\n        // If the node is unselected, highlight prerequisite edges in purple\r\n        //if ((!selectedNodes.hasOwnProperty(node.id)) && (!selectableNodes.hasOwnProperty(node.id))) {\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        //}\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        setHoverText(false);\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    let hoverDisplay;\r\n    if (hoverText) {\r\n        hoverDisplay = <HoverInfo node={hoverNode}/>\r\n    }\r\n\r\n    // ===========================\r\n\r\n    const onNodeDragStop = (event, node) => {\r\n        for (var e of elements) {\r\n            if (e.id === node.id) {\r\n                e.position.x = node.position.x;\r\n                e.position.y = node.position.y;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const disableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'hidden'});\r\n    }\r\n\r\n    const enableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'overlay'});\r\n    }\r\n\r\n    return (\r\n        <div style={{positon: \"relative\"}}>\r\n            <div style={layout}>\r\n                <Grid columns={2} divided>\r\n                    <Grid.Column width=\"12\">\r\n                        <ReactFlowProvider onMouseEnter={disableBodyScroll} onMouseLeave={enableBodyScroll}>\r\n                            <ReactFlow\r\n                                elements={elements}\r\n                                style={{width: '100%', height: '95vh'}}\r\n                                onLoad={onInstanceLoad}\r\n                                nodeTypes={nodeTypes}\r\n                                nodesConnectable={false}\r\n                                onElementClick={onElementClick}\r\n                                minZoom={0.38}\r\n                                //setInitTransform={TransformUpdater({x: 100, y: 100, z: 1})}\r\n                                nodesDraggable={false}\r\n                                onNodeMouseEnter={onNodeMouseEnter}\r\n                                onNodeMouseLeave={onNodeMouseLeave}\r\n                                selectNodesOnDrag={false}\r\n                                onNodeDragStop={onNodeDragStop}\r\n                                elementsSelectable={false}\r\n                            >\r\n                                <div style={{position: \"absolute\", zIndex: \"10\", top: \"30px\", right: \"30px\"}}>\r\n                                    {dropSearch}\r\n                                </div>\r\n                            </ReactFlow>\r\n                            <Container style={{marginBottom: \"50px\"}}>\r\n                                <Segment raised>\r\n                                    {/* <p>Couldn't find a course up there? Add it here:</p> */}\r\n                                    <Header as=\"h5\">Couldn't find a course up there? Add it here:</Header>\r\n                                    <Dropdown\r\n                                        selection\r\n                                        multiple\r\n                                        search\r\n                                        fluid\r\n                                        options={getMoreCoursesForDropdown(dataJSON)}\r\n                                        onChange={(e, data) => setAdditionalCourses(data.value)}\r\n                                        placeholder=\"Addditional courses\"\r\n                                    />\r\n                                </Segment>\r\n                            </Container>\r\n                        </ReactFlowProvider>\r\n                    </Grid.Column>\r\n                    <Grid.Column width=\"4\">\r\n                        <Sidebar selectedNodes={selectedNodes}/>\r\n                    </Grid.Column>\r\n                </Grid>\r\n                {hoverDisplay}\r\n                {/* <button onClick={positionHelper(elements)}>GENERATE POSITION</button> */}\r\n                <div id=\"DegreePlanner\">\r\n                    <DegreePlanner key={Object.keys(selectedNodes).concat(additionalCourses).join(\"\")} selectedCourses={Object.keys(selectedNodes).concat(additionalCourses)} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BESengah;","import React, {useState} from 'react';\r\nimport ReactFlow, { isNode, isEdge, ReactFlowProvider } from 'react-flow-renderer';\r\n\r\nimport CustomNode1 from '../../components/customnode1.js';\r\nimport CustomNode2 from '../../components/customnode2.js';\r\nimport HeaderNode1 from '../../components/headernode1.js';\r\n\r\nimport HoverInfo from '../../components/hoverinfo.js';\r\nimport hoverPrerequisites from '../../components/hoverprerequisites.js';\r\nimport unhoverPrerequisites from '../../components/unhoverprerequisites.js';\r\n\r\nimport { Grid, Container } from 'semantic-ui-react'\r\nimport Sidebar from \"../../components/sidebar.js\"\r\n\r\nimport DegreePlanner from \"../../components/degreeplanner.js\"\r\nimport DropdownSearch from \"../../components/dropdownsearch.js\"\r\n\r\nimport positionHelper from '../../components/positionhelper.js';\r\nimport selectNode from '../../components/selectnode.js';\r\nimport unselectNode from '../../components/unselectnode.js';\r\nimport highlightElements from '../../components/highlightelements.js';\r\nimport getSelectable from '../../components/getselectable.js';\r\nimport checkPrerequisites from '../../components/checkprerequisites';\r\nimport exclusionSwap from '../../components/exclusionswap.js';\r\nimport unselectUnconnected from '../../components/unselectunconnected.js';\r\nimport dataJSON from \"./data.json\"\r\n\r\nconst specialisations = ['COMPA1', 'ACCTA2'];\r\nvar elementsData = dataJSON.slice()\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {};\r\nfor (const specialisation of specialisations) selectedNodes[specialisation] = 1;\r\n\r\nvar selectedEdges = {};\r\nvar selectableNodes = {};\r\nvar potentialEdges = {};\r\nvar hoverEdges = {};\r\n\r\n// Load up the chart with initial selectable nodes and edges\r\nfor (const node of nodesData) {\r\n    if (selectedNodes.hasOwnProperty(node.id)) {\r\n        if (node.data.unlocks === null) continue;\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n        }\r\n    } else if (checkPrerequisites(node, elementsData, selectedNodes)) {\r\n        selectableNodes[node.id] = 1;\r\n    }\r\n}\r\n\r\nvar exclusionGroups = require(\"./data_exclusion.json\");\r\nvar exclusionNodes = {};\r\nfor (const group of exclusionGroups) {\r\n    for (const exclusion of group) {\r\n        exclusionNodes[exclusion] = 1;\r\n    }\r\n}\r\n\r\nelementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\nconst nodeTypes = {\r\n    custom1: CustomNode1,\r\n    custom2: CustomNode2,\r\n    header1: HeaderNode1\r\n};\r\n\r\nconst layoutStyle = {overflowX: \"hidden\", overflowY: \"overlay\", width: \"100vw\", height: \"100vh\"};\r\n\r\nconst ComputerScienceCOMPA1ACCTA2 = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverText, setHoverText] = useState(false);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    const [layout, setLayout] = useState(layoutStyle);\r\n    //const reactFlowInstance = useRef(null);\r\n    const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n\r\n    const onInstanceLoad = (instance) => {\r\n        for (var group of exclusionGroups) {\r\n            const last = group.pop();\r\n    \r\n            for (var course of elementsData) {\r\n                if (last === course.id) {\r\n                    course.isHidden = true;\r\n                    // console.log(\"Hiding \" + course.id);\r\n                    // Get all the edges and hide them too\r\n                    for (var edge of elementsData) {\r\n                        if (isNode(edge)) continue;\r\n                        if (edge.source === last || edge.target === last) {\r\n                            // console.log(\"hiding \" + edge.id);\r\n                            edge.isHidden = true;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            group.push(last);\r\n        }\r\n        setReactFlowInstance(instance);\r\n        instance.setTransform({x: 470, y: 350, zoom: 0.38});\r\n    };\r\n\r\n    const getCanvasSize = () => {\r\n        const size1 = reactFlowInstance.project({x: window.innerWidth * 0.75, y: window.innerHeight});\r\n        const size2 = reactFlowInstance.project({x: 0, y: 0});\r\n        return [(size1.x - size2.x) * 0.38, (size1.y - size2.y) * 0.38];\r\n    }\r\n\r\n\r\n    let dropSearch = null;\r\n    if (reactFlowInstance !== null) {\r\n        dropSearch = <DropdownSearch canvasSize={getCanvasSize()}/>\r\n    }\r\n\r\n    const selectUnselect = (element) => {\r\n        // NOTE: Might not need this?????\r\n        // EXPLANATION: Reason we dont need it is because we have to leave node\r\n        // anyways to hover another node. But maybe good practise to have just in case\r\n        // Unhover edges which lit up on nodeMouseEnter\r\n        unhoverPrerequisites(hoverEdges);\r\n\r\n        // 1. Select the node and fill in edges.\r\n        // - Deal with unselecting nodes\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"MAINSELECT\");\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"UNSELECTING\");\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n\r\n        console.log(\"==========SelectedNodes==========\");\r\n        console.log(selectedNodes);\r\n        console.log(\"==========SelectedEdges==========\");\r\n        console.log(selectedEdges);\r\n        console.log(\"==========SelectableNodes==========\");\r\n        console.log(selectableNodes);\r\n        console.log(\"==========PotentialEdges==========\");\r\n        console.log(potentialEdges);\r\n\r\n        // 2. Determine which nodes are now selectable\r\n        // - Determine which previously selectable nodes are now unselectable\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n\r\n        // Render graph accordingly\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const toggleExclusion = (element) => {\r\n        // TODO: ARE there courses which do not \r\n        // For all immediate edges of the element, swap\r\n        // with the exclusion course\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    // ==========ONCLICK==========\r\n    const onElementClick = (event, element) => {\r\n        // console.log(\"ONELEMENTCLICK\");\r\n        if (isEdge(element)) return; // Don't care about edges\r\n        if (specialisations.includes(element.id)) return; // Cannot click on main node\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return; // Cannot select non selectable nodes\r\n\r\n        // Determine double or single click for exclusion nodes\r\n        // This will prevent normal nodes from waiting the double click delay\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 200);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            // Not an exclusion node.\r\n            selectUnselect(element);\r\n        }\r\n    };\r\n    // ===========================\r\n\r\n    // ==========ONHOVER==========\r\n    const onNodeMouseEnter = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        // Display node information in top left\r\n        setHoverText(true);\r\n        setHoverNode(node);\r\n\r\n        // If the node is unselected, highlight prerequisite edges in purple\r\n        //if ((!selectedNodes.hasOwnProperty(node.id)) && (!selectableNodes.hasOwnProperty(node.id))) {\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        //}\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        setHoverText(false);\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    let hoverDisplay;\r\n    if (hoverText) {\r\n        hoverDisplay = <HoverInfo node={hoverNode}/>\r\n    }\r\n    // ===========================\r\n\r\n    const onNodeDragStop = (event, node) => {\r\n        for (var e of elements) {\r\n            if (e.id === node.id) {\r\n                e.position.x = node.position.x;\r\n                e.position.y = node.position.y;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const disableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'hidden'});\r\n    }\r\n\r\n    const enableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'overlay'});\r\n    }\r\n\r\n    return (\r\n        <div style={{positon: \"relative\"}}>\r\n            <div style={layout}>\r\n                <Grid columns={2} divided>\r\n                    <Grid.Column width=\"12\">\r\n                        <ReactFlowProvider onMouseEnter={disableBodyScroll} onMouseLeave={enableBodyScroll}>\r\n                            <ReactFlow\r\n                                elements={elements}\r\n                                style={{width: '100%', height: '100vh'}}\r\n                                onLoad={onInstanceLoad}\r\n                                nodeTypes={nodeTypes}\r\n                                nodesConnectable={false}\r\n                                onElementClick={onElementClick}\r\n                                minZoom={0.38}\r\n                                //setInitTransform={TransformUpdater({x: 100, y: 100, z: 1})}\r\n                                nodesDraggable={false}\r\n                                onNodeMouseEnter={onNodeMouseEnter}\r\n                                onNodeMouseLeave={onNodeMouseLeave}\r\n                                selectNodesOnDrag={false}\r\n                                onNodeDragStop={onNodeDragStop}\r\n                                elementsSelectable={false}\r\n                            >\r\n                                <div style={{position: \"absolute\", zIndex: \"10\", top: \"30px\", right: \"30px\"}}>\r\n                                    {dropSearch}\r\n                                </div>\r\n                            </ReactFlow>\r\n                        </ReactFlowProvider>\r\n                    </Grid.Column>\r\n                    <Grid.Column width=\"4\">\r\n                        <Sidebar selectedNodes={selectedNodes}/>\r\n                    </Grid.Column>\r\n                </Grid>\r\n                {hoverDisplay}\r\n                {/* <button onClick={positionHelper(elements)}>GENERATE POSITION</button> */}\r\n                <button onClick={positionHelper(elements)}>GENERATE POSITION</button>\r\n                <div id=\"DegreePlanner\">\r\n                    <DegreePlanner id=\"DegreePlanner\" key={Object.keys(selectedNodes).join(\"\")}selectedCourses={Object.keys(selectedNodes)} />\r\n                </div>\r\n                <Container style={{textAlign: \"center\", height: \"auto\", padding: \"20px\"}}>\r\n                    <p>Made by SRKO, 2020</p>\r\n                    <a href=\"https://github.com/Circles360/Circles360.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>\r\n                </Container>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ComputerScienceCOMPA1ACCTA2;","import React, {useState} from 'react';\r\nimport ReactFlow, { isNode, isEdge, ReactFlowProvider } from 'react-flow-renderer';\r\n\r\nimport CustomNode1 from '../../components/customnode1.js';\r\nimport CustomNode2 from '../../components/customnode2.js';\r\nimport HeaderNode1 from '../../components/headernode1.js';\r\n\r\nimport HoverInfo from '../../components/hoverinfo.js';\r\nimport hoverPrerequisites from '../../components/hoverprerequisites.js';\r\nimport unhoverPrerequisites from '../../components/unhoverprerequisites.js';\r\n\r\nimport { Grid, Container } from 'semantic-ui-react'\r\nimport Sidebar from \"../../components/sidebar.js\"\r\n// import pkg from 'semantic-ui-react/package.json'\r\n\r\nimport DegreePlanner from \"../../components/degreeplanner.js\"\r\nimport DropdownSearch from \"../../components/dropdownsearch.js\"\r\n\r\nimport positionHelper from '../../components/positionhelper.js';\r\nimport selectNode from '../../components/selectnode.js';\r\nimport unselectNode from '../../components/unselectnode.js';\r\nimport highlightElements from '../../components/highlightelements.js';\r\nimport getSelectable from '../../components/getselectable.js';\r\nimport checkPrerequisites from '../../components/checkprerequisites';\r\nimport exclusionSwap from '../../components/exclusionswap.js';\r\n// import getElement from '../../components/getelement.js';\r\nimport unselectUnconnected from '../../components/unselectunconnected.js';\r\n// import coursesJSON from \"../../webscraper/courses.json\";\r\nimport dataJSON from \"./data.json\"\r\n\r\n\r\nvar elementsData = dataJSON.slice()\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {\r\n    'COMPA1': 1,\r\n    'MARKA2': 1\r\n}\r\nvar selectedEdges = {};\r\nvar selectableNodes = {};\r\nvar potentialEdges = {};\r\nvar hoverEdges = {};\r\n\r\n// Load up the chart with initial selectable nodes and edges\r\nfor (const node of nodesData) {\r\n    if (selectedNodes.hasOwnProperty(node.id)) {\r\n        if (node.data.unlocks === null) continue;\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n        }\r\n    } else if (checkPrerequisites(node, elementsData, selectedNodes)) {\r\n        selectableNodes[node.id] = 1;\r\n    }\r\n}\r\n\r\nvar exclusionGroups = require(\"./data_exclusion.json\");\r\nvar exclusionNodes = {};\r\nfor (const group of exclusionGroups) {\r\n    for (const exclusion of group) {\r\n        exclusionNodes[exclusion] = 1;\r\n    }\r\n}\r\n\r\nelementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\nconst nodeTypes = {\r\n    custom1: CustomNode1,\r\n    custom2: CustomNode2,\r\n    header1: HeaderNode1\r\n};\r\n\r\nconst layoutStyle = {overflowX: \"hidden\", overflowY: \"overlay\", width: \"100vw\", height: \"100vh\"};\r\n\r\nconst ComputerScienceCOMPA1MARKA2 = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverText, setHoverText] = useState(false);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    const [layout, setLayout] = useState(layoutStyle);\r\n    //const reactFlowInstance = useRef(null);\r\n    const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n\r\n    const onInstanceLoad = (instance) => {\r\n        for (var group of exclusionGroups) {\r\n            const last = group.pop();\r\n    \r\n            for (var course of elementsData) {\r\n                if (last === course.id) {\r\n                    course.isHidden = true;\r\n                    // console.log(\"Hiding \" + course.id);\r\n                    // Get all the edges and hide them too\r\n                    for (var edge of elementsData) {\r\n                        if (isNode(edge)) continue;\r\n                        if (edge.source === last || edge.target === last) {\r\n                            // console.log(\"hiding \" + edge.id);\r\n                            edge.isHidden = true;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            group.push(last);\r\n        }\r\n        setReactFlowInstance(instance);\r\n        instance.setTransform({x: 470, y: 350, zoom: 0.38});\r\n    };\r\n\r\n    const getCanvasSize = () => {\r\n        const size1 = reactFlowInstance.project({x: window.innerWidth * 0.75, y: window.innerHeight});\r\n        const size2 = reactFlowInstance.project({x: 0, y: 0});\r\n        return [(size1.x - size2.x) * 0.38, (size1.y - size2.y) * 0.38];\r\n    }\r\n\r\n\r\n    let dropSearch = null;\r\n    if (reactFlowInstance !== null) {\r\n        dropSearch = <DropdownSearch canvasSize={getCanvasSize()}/>\r\n    }\r\n\r\n    const selectUnselect = (element) => {\r\n        // NOTE: Might not need this?????\r\n        // EXPLANATION: Reason we dont need it is because we have to leave node\r\n        // anyways to hover another node. But maybe good practise to have just in case\r\n        // Unhover edges which lit up on nodeMouseEnter\r\n        unhoverPrerequisites(hoverEdges);\r\n\r\n        // 1. Select the node and fill in edges.\r\n        // - Deal with unselecting nodes\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"MAINSELECT\");\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"UNSELECTING\");\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n\r\n        console.log(\"==========SelectedNodes==========\");\r\n        console.log(selectedNodes);\r\n        console.log(\"==========SelectedEdges==========\");\r\n        console.log(selectedEdges);\r\n        console.log(\"==========SelectableNodes==========\");\r\n        console.log(selectableNodes);\r\n        console.log(\"==========PotentialEdges==========\");\r\n        console.log(potentialEdges);\r\n\r\n        // 2. Determine which nodes are now selectable\r\n        // - Determine which previously selectable nodes are now unselectable\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n\r\n        // Render graph accordingly\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const toggleExclusion = (element) => {\r\n        // TODO: ARE there courses which do not \r\n        // For all immediate edges of the element, swap\r\n        // with the exclusion course\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    // ==========ONCLICK==========\r\n    const onElementClick = (event, element) => {\r\n        // console.log(\"ONELEMENTCLICK\");\r\n        if (isEdge(element)) return; // Don't care about edges\r\n        if (element.id === 'COMPA1' || element.id === 'MARKA2') return; // Cannot click on main node\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return; // Cannot select non selectable nodes\r\n\r\n        // Determine double or single click for exclusion nodes\r\n        // This will prevent normal nodes from waiting the double click delay\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 200);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            // Not an exclusion node.\r\n            selectUnselect(element);\r\n        }\r\n    };\r\n    // ===========================\r\n\r\n    // ==========ONHOVER==========\r\n    const onNodeMouseEnter = (event, node) => {\r\n        if (node.id === 'COMPA1' || node.id === 'MARKA2') return;\r\n        // Display node information in top left\r\n        setHoverText(true);\r\n        setHoverNode(node);\r\n\r\n        // If the node is unselected, highlight prerequisite edges in purple\r\n        //if ((!selectedNodes.hasOwnProperty(node.id)) && (!selectableNodes.hasOwnProperty(node.id))) {\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        //}\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        if (node.id === 'COMPA1' || node.id === 'MARKA2') return;\r\n        setHoverText(false);\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    let hoverDisplay;\r\n    if (hoverText) {\r\n        hoverDisplay = <HoverInfo node={hoverNode}/>\r\n    }\r\n\r\n    // ===========================\r\n\r\n    const onNodeDragStop = (event, node) => {\r\n        for (var e of elements) {\r\n            if (e.id === node.id) {\r\n                e.position.x = node.position.x;\r\n                e.position.y = node.position.y;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const disableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'hidden'});\r\n    }\r\n\r\n    const enableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'overlay'});\r\n    }\r\n\r\n    return (\r\n        <div style={{positon: \"relative\"}}>\r\n            <div style={layout}>\r\n                <Grid columns={2} divided>\r\n                    <Grid.Column width=\"12\">\r\n                        <ReactFlowProvider onMouseEnter={disableBodyScroll} onMouseLeave={enableBodyScroll}>\r\n                            <ReactFlow\r\n                                elements={elements}\r\n                                style={{width: '100%', height: '100vh'}}\r\n                                onLoad={onInstanceLoad}\r\n                                nodeTypes={nodeTypes}\r\n                                nodesConnectable={false}\r\n                                onElementClick={onElementClick}\r\n                                minZoom={0.38}\r\n                                //setInitTransform={TransformUpdater({x: 100, y: 100, z: 1})}\r\n                                nodesDraggable={false}\r\n                                onNodeMouseEnter={onNodeMouseEnter}\r\n                                onNodeMouseLeave={onNodeMouseLeave}\r\n                                selectNodesOnDrag={false}\r\n                                onNodeDragStop={onNodeDragStop}\r\n                                elementsSelectable={false}\r\n                            >\r\n                                <div style={{position: \"absolute\", zIndex: \"10\", top: \"30px\", right: \"30px\"}}>\r\n                                    {dropSearch}\r\n                                </div>\r\n                            </ReactFlow>\r\n                        </ReactFlowProvider>\r\n                    </Grid.Column>\r\n                    <Grid.Column width=\"4\">\r\n                        <Sidebar selectedNodes={selectedNodes}/>\r\n                    </Grid.Column>\r\n                </Grid>\r\n                {hoverDisplay}\r\n                {/* <button onClick={positionHelper(elements)}>GENERATE POSITION</button> */}\r\n                <button onClick={positionHelper(elements)}>GENERATE POSITION</button>\r\n                <div id=\"DegreePlanner\">\r\n                    <DegreePlanner id=\"DegreePlanner\" key={Object.keys(selectedNodes).join(\"\")}selectedCourses={Object.keys(selectedNodes)} />\r\n                </div>\r\n                <Container style={{textAlign: \"center\", height: \"auto\", padding: \"20px\"}}>\r\n                    <p>Made by SRKO, 2020</p>\r\n                    <a href=\"https://github.com/Circles360/Circles360.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>\r\n                </Container>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ComputerScienceCOMPA1MARKA2;","import React, {useState} from 'react';\r\nimport ReactFlow, { isNode, isEdge, ReactFlowProvider } from 'react-flow-renderer';\r\n\r\nimport CustomNode1 from '../../components/customnode1.js';\r\nimport CustomNode2 from '../../components/customnode2.js';\r\nimport HeaderNode1 from '../../components/headernode1.js';\r\n\r\nimport HoverInfo from '../../components/hoverinfo.js';\r\nimport hoverPrerequisites from '../../components/hoverprerequisites.js';\r\nimport unhoverPrerequisites from '../../components/unhoverprerequisites.js';\r\n\r\nimport { Grid, Container } from 'semantic-ui-react'\r\nimport Sidebar from \"../../components/sidebar.js\"\r\n// import pkg from 'semantic-ui-react/package.json'\r\n\r\nimport DegreePlanner from \"../../components/degreeplanner.js\"\r\nimport DropdownSearch from \"../../components/dropdownsearch.js\"\r\n\r\nimport positionHelper from '../../components/positionhelper.js';\r\nimport selectNode from '../../components/selectnode.js';\r\nimport unselectNode from '../../components/unselectnode.js';\r\nimport highlightElements from '../../components/highlightelements.js';\r\nimport getSelectable from '../../components/getselectable.js';\r\nimport checkPrerequisites from '../../components/checkprerequisites';\r\nimport exclusionSwap from '../../components/exclusionswap.js';\r\n// import getElement from '../../components/getelement.js';\r\nimport unselectUnconnected from '../../components/unselectunconnected.js';\r\n// import coursesJSON from \"../../webscraper/courses.json\";\r\nimport dataJSON from \"./data.json\"\r\n\r\nconst specialisations = ['COMPA1', 'INFSA2'];\r\nvar elementsData = dataJSON.slice()\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {};\r\nfor (const specialisation of specialisations) selectedNodes[specialisation] = 1;\r\nvar selectedEdges = {};\r\nvar selectableNodes = {};\r\nvar potentialEdges = {};\r\nvar hoverEdges = {};\r\n\r\n// Load up the chart with initial selectable nodes and edges\r\nfor (const node of nodesData) {\r\n    if (selectedNodes.hasOwnProperty(node.id)) {\r\n        if (node.data.unlocks === null) continue;\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n        }\r\n    } else if (checkPrerequisites(node, elementsData, selectedNodes)) {\r\n        selectableNodes[node.id] = 1;\r\n    }\r\n}\r\n\r\nvar exclusionGroups = require(\"./data_exclusion.json\");\r\nvar exclusionNodes = {};\r\nfor (const group of exclusionGroups) {\r\n    for (const exclusion of group) {\r\n        exclusionNodes[exclusion] = 1;\r\n    }\r\n}\r\n\r\nelementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\nconst nodeTypes = {\r\n    custom1: CustomNode1,\r\n    custom2: CustomNode2,\r\n    header1: HeaderNode1\r\n};\r\n\r\nconst layoutStyle = {overflowX: \"hidden\", overflowY: \"overlay\", width: \"100vw\", height: \"100vh\"};\r\n\r\nconst ComputerScienceCOMPA1INFSA2 = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverText, setHoverText] = useState(false);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    const [layout, setLayout] = useState(layoutStyle);\r\n    //const reactFlowInstance = useRef(null);\r\n    const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n\r\n    const onInstanceLoad = (instance) => {\r\n        for (var group of exclusionGroups) {\r\n            const last = group.pop();\r\n    \r\n            for (var course of elementsData) {\r\n                if (last === course.id) {\r\n                    course.isHidden = true;\r\n                    // console.log(\"Hiding \" + course.id);\r\n                    // Get all the edges and hide them too\r\n                    for (var edge of elementsData) {\r\n                        if (isNode(edge)) continue;\r\n                        if (edge.source === last || edge.target === last) {\r\n                            // console.log(\"hiding \" + edge.id);\r\n                            edge.isHidden = true;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            group.push(last);\r\n        }\r\n        setReactFlowInstance(instance);\r\n        instance.setTransform({x: 470, y: 350, zoom: 0.38});\r\n    };\r\n\r\n    const getCanvasSize = () => {\r\n        const size1 = reactFlowInstance.project({x: window.innerWidth * 0.75, y: window.innerHeight});\r\n        const size2 = reactFlowInstance.project({x: 0, y: 0});\r\n        return [(size1.x - size2.x) * 0.38, (size1.y - size2.y) * 0.38];\r\n    }\r\n\r\n\r\n    let dropSearch = null;\r\n    if (reactFlowInstance !== null) {\r\n        dropSearch = <DropdownSearch canvasSize={getCanvasSize()}/>\r\n    }\r\n\r\n    const selectUnselect = (element) => {\r\n        // NOTE: Might not need this?????\r\n        // EXPLANATION: Reason we dont need it is because we have to leave node\r\n        // anyways to hover another node. But maybe good practise to have just in case\r\n        // Unhover edges which lit up on nodeMouseEnter\r\n        unhoverPrerequisites(hoverEdges);\r\n\r\n        // 1. Select the node and fill in edges.\r\n        // - Deal with unselecting nodes\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"MAINSELECT\");\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"UNSELECTING\");\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n\r\n        console.log(\"==========SelectedNodes==========\");\r\n        console.log(selectedNodes);\r\n        console.log(\"==========SelectedEdges==========\");\r\n        console.log(selectedEdges);\r\n        console.log(\"==========SelectableNodes==========\");\r\n        console.log(selectableNodes);\r\n        console.log(\"==========PotentialEdges==========\");\r\n        console.log(potentialEdges);\r\n\r\n        // 2. Determine which nodes are now selectable\r\n        // - Determine which previously selectable nodes are now unselectable\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n\r\n        // Render graph accordingly\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const toggleExclusion = (element) => {\r\n        // TODO: ARE there courses which do not \r\n        // For all immediate edges of the element, swap\r\n        // with the exclusion course\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    // ==========ONCLICK==========\r\n    const onElementClick = (event, element) => {\r\n        // console.log(\"ONELEMENTCLICK\");\r\n        if (isEdge(element)) return; // Don't care about edges\r\n        if (specialisations.includes(element.id)) return; // Cannot click on main node\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return; // Cannot select non selectable nodes\r\n\r\n        // Determine double or single click for exclusion nodes\r\n        // This will prevent normal nodes from waiting the double click delay\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 200);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            // Not an exclusion node.\r\n            selectUnselect(element);\r\n        }\r\n    };\r\n    // ===========================\r\n\r\n    // ==========ONHOVER==========\r\n    const onNodeMouseEnter = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        // Display node information in top left\r\n        setHoverText(true);\r\n        setHoverNode(node);\r\n\r\n        // If the node is unselected, highlight prerequisite edges in purple\r\n        //if ((!selectedNodes.hasOwnProperty(node.id)) && (!selectableNodes.hasOwnProperty(node.id))) {\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        //}\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        setHoverText(false);\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    let hoverDisplay;\r\n    if (hoverText) {\r\n        hoverDisplay = <HoverInfo node={hoverNode}/>\r\n    }\r\n\r\n    // ===========================\r\n\r\n    const onNodeDragStop = (event, node) => {\r\n        for (var e of elements) {\r\n            if (e.id === node.id) {\r\n                e.position.x = node.position.x;\r\n                e.position.y = node.position.y;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const disableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'hidden'});\r\n    }\r\n\r\n    const enableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'overlay'});\r\n    }\r\n\r\n    return (\r\n        <div style={{positon: \"relative\"}}>\r\n            <div style={layout}>\r\n                <Grid columns={2} divided>\r\n                    <Grid.Column width=\"12\">\r\n                        <ReactFlowProvider onMouseEnter={disableBodyScroll} onMouseLeave={enableBodyScroll}>\r\n                            <ReactFlow\r\n                                elements={elements}\r\n                                style={{width: '100%', height: '100vh'}}\r\n                                onLoad={onInstanceLoad}\r\n                                nodeTypes={nodeTypes}\r\n                                nodesConnectable={false}\r\n                                onElementClick={onElementClick}\r\n                                minZoom={0.38}\r\n                                //setInitTransform={TransformUpdater({x: 100, y: 100, z: 1})}\r\n                                nodesDraggable={false}\r\n                                onNodeMouseEnter={onNodeMouseEnter}\r\n                                onNodeMouseLeave={onNodeMouseLeave}\r\n                                selectNodesOnDrag={false}\r\n                                onNodeDragStop={onNodeDragStop}\r\n                                elementsSelectable={false}\r\n                            >\r\n                                <div style={{position: \"absolute\", zIndex: \"10\", top: \"30px\", right: \"30px\"}}>\r\n                                    {dropSearch}\r\n                                </div>\r\n                            </ReactFlow>\r\n                        </ReactFlowProvider>\r\n                    </Grid.Column>\r\n                    <Grid.Column width=\"4\">\r\n                        <Sidebar selectedNodes={selectedNodes}/>\r\n                    </Grid.Column>\r\n                </Grid>\r\n                {hoverDisplay}\r\n                <button onClick={positionHelper(elements)}>GENERATE POSITION</button>\r\n                <div id=\"DegreePlanner\">\r\n                    <DegreePlanner id=\"DegreePlanner\" key={Object.keys(selectedNodes).join(\"\")}selectedCourses={Object.keys(selectedNodes)} />\r\n                </div>\r\n                <Container style={{textAlign: \"center\", height: \"auto\", padding: \"20px\"}}>\r\n                    <p>Made by SRKO, 2020</p>\r\n                    <a href=\"https://github.com/Circles360/Circles360.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>\r\n                </Container>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ComputerScienceCOMPA1INFSA2;","import React, {useState} from 'react';\r\nimport ReactFlow, { isNode, isEdge, ReactFlowProvider } from 'react-flow-renderer';\r\n\r\nimport CustomNode1 from '../../components/customnode1.js';\r\nimport CustomNode2 from '../../components/customnode2.js';\r\nimport HeaderNode1 from '../../components/headernode1.js';\r\n\r\nimport HoverInfo from '../../components/hoverinfo.js';\r\nimport hoverPrerequisites from '../../components/hoverprerequisites.js';\r\nimport unhoverPrerequisites from '../../components/unhoverprerequisites.js';\r\n\r\nimport { Grid, Container } from 'semantic-ui-react'\r\nimport Sidebar from \"../../components/sidebar.js\"\r\n// import pkg from 'semantic-ui-react/package.json'\r\n\r\nimport DegreePlanner from \"../../components/degreeplanner.js\"\r\nimport DropdownSearch from \"../../components/dropdownsearch.js\"\r\n\r\nimport positionHelper from '../../components/positionhelper.js';\r\nimport selectNode from '../../components/selectnode.js';\r\nimport unselectNode from '../../components/unselectnode.js';\r\nimport highlightElements from '../../components/highlightelements.js';\r\nimport getSelectable from '../../components/getselectable.js';\r\nimport checkPrerequisites from '../../components/checkprerequisites';\r\nimport exclusionSwap from '../../components/exclusionswap.js';\r\n// import getElement from '../../components/getelement.js';\r\nimport unselectUnconnected from '../../components/unselectunconnected.js';\r\n// import coursesJSON from \"../../webscraper/courses.json\";\r\nimport dataJSON from \"./data.json\"\r\n\r\n\r\nconst specialisations = ['COMPA1', 'PSYCM2'];\r\nvar elementsData = dataJSON.slice()\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {};\r\nfor (const specialisation of specialisations) selectedNodes[specialisation] = 1;\r\n\r\nvar selectedEdges = {};\r\nvar selectableNodes = {};\r\nvar potentialEdges = {};\r\nvar hoverEdges = {};\r\n\r\n// Load up the chart with initial selectable nodes and edges\r\nfor (const node of nodesData) {\r\n    if (selectedNodes.hasOwnProperty(node.id)) {\r\n        if (node.data.unlocks === null) continue;\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n        }\r\n    } else if (checkPrerequisites(node, elementsData, selectedNodes)) {\r\n        selectableNodes[node.id] = 1;\r\n    }\r\n}\r\n\r\nvar exclusionGroups = require(\"./data_exclusion.json\");\r\nvar exclusionNodes = {};\r\nfor (const group of exclusionGroups) {\r\n    for (const exclusion of group) {\r\n        exclusionNodes[exclusion] = 1;\r\n    }\r\n}\r\n\r\nelementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\nconst nodeTypes = {\r\n    custom1: CustomNode1,\r\n    custom2: CustomNode2,\r\n    header1: HeaderNode1\r\n};\r\n\r\nconst layoutStyle = {overflowX: \"hidden\", overflowY: \"overlay\", width: \"100vw\", height: \"100vh\"};\r\n\r\nconst ComputerScienceCOMPA1PSYCM2 = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverText, setHoverText] = useState(false);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    const [layout, setLayout] = useState(layoutStyle);\r\n    //const reactFlowInstance = useRef(null);\r\n    const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n\r\n    const onInstanceLoad = (instance) => {\r\n        for (var group of exclusionGroups) {\r\n            const last = group.pop();\r\n    \r\n            for (var course of elementsData) {\r\n                if (last === course.id) {\r\n                    course.isHidden = true;\r\n                    // console.log(\"Hiding \" + course.id);\r\n                    // Get all the edges and hide them too\r\n                    for (var edge of elementsData) {\r\n                        if (isNode(edge)) continue;\r\n                        if (edge.source === last || edge.target === last) {\r\n                            // console.log(\"hiding \" + edge.id);\r\n                            edge.isHidden = true;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            group.push(last);\r\n        }\r\n        setReactFlowInstance(instance);\r\n        instance.setTransform({x: 470, y: 350, zoom: 0.38});\r\n    };\r\n\r\n    const getCanvasSize = () => {\r\n        const size1 = reactFlowInstance.project({x: window.innerWidth * 0.75, y: window.innerHeight});\r\n        const size2 = reactFlowInstance.project({x: 0, y: 0});\r\n        return [(size1.x - size2.x) * 0.38, (size1.y - size2.y) * 0.38];\r\n    }\r\n\r\n\r\n    let dropSearch = null;\r\n    if (reactFlowInstance !== null) {\r\n        dropSearch = <DropdownSearch canvasSize={getCanvasSize()}/>\r\n    }\r\n\r\n    const selectUnselect = (element) => {\r\n        // NOTE: Might not need this?????\r\n        // EXPLANATION: Reason we dont need it is because we have to leave node\r\n        // anyways to hover another node. But maybe good practise to have just in case\r\n        // Unhover edges which lit up on nodeMouseEnter\r\n        unhoverPrerequisites(hoverEdges);\r\n\r\n        // 1. Select the node and fill in edges.\r\n        // - Deal with unselecting nodes\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"MAINSELECT\");\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            console.log(\"UNSELECTING\");\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n\r\n        console.log(\"==========SelectedNodes==========\");\r\n        console.log(selectedNodes);\r\n        console.log(\"==========SelectedEdges==========\");\r\n        console.log(selectedEdges);\r\n        console.log(\"==========SelectableNodes==========\");\r\n        console.log(selectableNodes);\r\n        console.log(\"==========PotentialEdges==========\");\r\n        console.log(potentialEdges);\r\n\r\n        // 2. Determine which nodes are now selectable\r\n        // - Determine which previously selectable nodes are now unselectable\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n\r\n        // Render graph accordingly\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const toggleExclusion = (element) => {\r\n        // TODO: ARE there courses which do not \r\n        // For all immediate edges of the element, swap\r\n        // with the exclusion course\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    // ==========ONCLICK==========\r\n    const onElementClick = (event, element) => {\r\n        // console.log(\"ONELEMENTCLICK\");\r\n        if (isEdge(element)) return; // Don't care about edges\r\n        if (specialisations.includes(element.id)) return; // Cannot click on main node\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return; // Cannot select non selectable nodes\r\n\r\n        // Determine double or single click for exclusion nodes\r\n        // This will prevent normal nodes from waiting the double click delay\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 200);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            // Not an exclusion node.\r\n            selectUnselect(element);\r\n        }\r\n    };\r\n    // ===========================\r\n\r\n    // ==========ONHOVER==========\r\n    const onNodeMouseEnter = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        // Display node information in top left\r\n        setHoverText(true);\r\n        setHoverNode(node);\r\n\r\n        // If the node is unselected, highlight prerequisite edges in purple\r\n        //if ((!selectedNodes.hasOwnProperty(node.id)) && (!selectableNodes.hasOwnProperty(node.id))) {\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        //}\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        if (specialisations.includes(node.id)) return;\r\n        setHoverText(false);\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    let hoverDisplay;\r\n    if (hoverText) {\r\n        hoverDisplay = <HoverInfo node={hoverNode}/>\r\n    }\r\n\r\n    // ===========================\r\n\r\n    const onNodeDragStop = (event, node) => {\r\n        for (var e of elements) {\r\n            if (e.id === node.id) {\r\n                e.position.x = node.position.x;\r\n                e.position.y = node.position.y;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const disableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'hidden'});\r\n    }\r\n\r\n    const enableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'overlay'});\r\n    }\r\n\r\n    return (\r\n        <div style={{positon: \"relative\"}}>\r\n            <div style={layout}>\r\n                <Grid columns={2} divided>\r\n                    <Grid.Column width=\"12\">\r\n                        <ReactFlowProvider onMouseEnter={disableBodyScroll} onMouseLeave={enableBodyScroll}>\r\n                            <ReactFlow\r\n                                elements={elements}\r\n                                style={{width: '100%', height: '100vh'}}\r\n                                onLoad={onInstanceLoad}\r\n                                nodeTypes={nodeTypes}\r\n                                nodesConnectable={false}\r\n                                onElementClick={onElementClick}\r\n                                minZoom={0.38}\r\n                                //setInitTransform={TransformUpdater({x: 100, y: 100, z: 1})}\r\n                                nodesDraggable={false}\r\n                                onNodeMouseEnter={onNodeMouseEnter}\r\n                                onNodeMouseLeave={onNodeMouseLeave}\r\n                                selectNodesOnDrag={false}\r\n                                onNodeDragStop={onNodeDragStop}\r\n                                elementsSelectable={false}\r\n                            >\r\n                                <div style={{position: \"absolute\", zIndex: \"10\", top: \"30px\", right: \"30px\"}}>\r\n                                    {dropSearch}\r\n                                </div>\r\n                            </ReactFlow>\r\n                        </ReactFlowProvider>\r\n                    </Grid.Column>\r\n                    <Grid.Column width=\"4\">\r\n                        <Sidebar selectedNodes={selectedNodes}/>\r\n                    </Grid.Column>\r\n                </Grid>\r\n                {hoverDisplay}\r\n                {/* <button onClick={positionHelper(elements)}>GENERATE POSITION</button> */}\r\n                <button onClick={positionHelper(elements)}>GENERATE POSITION</button>\r\n                <div id=\"DegreePlanner\">\r\n                    <DegreePlanner id=\"DegreePlanner\" key={Object.keys(selectedNodes).join(\"\")}selectedCourses={Object.keys(selectedNodes)} />\r\n                </div>\r\n                <Container style={{textAlign: \"center\", height: \"auto\", padding: \"20px\"}}>\r\n                    <p>Made by SRKO, 2020</p>\r\n                    <a href=\"https://github.com/Circles360/Circles360.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>\r\n                </Container>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ComputerScienceCOMPA1PSYCM2;","import React, {useState} from 'react';\r\n// import ReactFlow, {Background, Controls, getConnectedEdges, isNode, isEdge, useStoreState, useStoreActions, ReactFlowProvider, EdgeText} from 'react-flow-renderer';\r\nimport ReactFlow, { isNode, isEdge, ReactFlowProvider } from 'react-flow-renderer';\r\n\r\nimport CustomNode1 from '../../components/customnode1.js';\r\nimport CustomNode2 from '../../components/customnode2.js';\r\nimport HeaderNode1 from '../../components/headernode1.js';\r\n\r\nimport HoverInfo from '../../components/hoverinfo.js';\r\nimport hoverPrerequisites from '../../components/hoverprerequisites.js';\r\nimport unhoverPrerequisites from '../../components/unhoverprerequisites.js';\r\n\r\nimport { Grid, Container } from 'semantic-ui-react'\r\nimport Sidebar from \"../../components/sidebar.js\"\r\n// import pkg from 'semantic-ui-react/package.json'\r\n\r\nimport DegreePlanner from \"../../components/degreeplanner.js\"\r\nimport DropdownSearch from \"../../components/dropdownsearch.js\"\r\n\r\n// import positionHelper from '../../components/positionhelper.js';\r\nimport selectNode from '../../components/selectnode.js';\r\nimport unselectNode from '../../components/unselectnode.js';\r\nimport highlightElements from '../../components/highlightelements.js';\r\nimport getSelectable from '../../components/getselectable.js';\r\nimport checkPrerequisites from '../../components/checkprerequisites';\r\nimport exclusionSwap from '../../components/exclusionswap.js';\r\n// import getElement from '../../components/getelement.js';\r\nimport unselectUnconnected from '../../components/unselectunconnected.js';\r\n// import coursesJSON from \"../../webscraper/courses.json\";\r\nimport dataJSON from \"./data.json\"\r\n\r\n// import SearchPan from '../../components/searchpan.js';\r\n\r\n// import GetPan from '../../components/getpan.js';\r\n\r\nvar elementsData = dataJSON.slice()\r\nvar nodesData = elementsData.filter(e => isNode(e));\r\nvar edgesData = elementsData.filter(e => isEdge(e));\r\nvar selectedNodes = {\r\n    'SENGAH': 1,\r\n}\r\nvar selectedEdges = {};\r\nvar selectableNodes = {};\r\nvar potentialEdges = {};\r\nvar hoverEdges = {};\r\n\r\n// Load up the chart with initial selectable nodes and edges\r\nfor (const node of nodesData) {\r\n    if (selectedNodes.hasOwnProperty(node.id)) {\r\n        if (node.data.unlocks === null) continue;\r\n        for (const unlockCourse of node.data.unlocks) {\r\n            potentialEdges['e' + node.id + '-' + unlockCourse] = 1;\r\n        }\r\n    } else if (checkPrerequisites(node, elementsData, selectedNodes)) {\r\n        selectableNodes[node.id] = 1;\r\n    }\r\n}\r\n\r\nvar exclusionGroups = require(\"./data_exclusion.json\");\r\nvar exclusionNodes = {};\r\nfor (const group of exclusionGroups) {\r\n    for (const exclusion of group) {\r\n        exclusionNodes[exclusion] = 1;\r\n    }\r\n}\r\n\r\nelementsData = highlightElements(elementsData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n\r\nconst nodeTypes = {\r\n    custom1: CustomNode1,\r\n    custom2: CustomNode2,\r\n    header1: HeaderNode1\r\n};\r\n\r\nconst layoutStyle = {overflowX: \"hidden\", overflowY: \"overlay\", width: \"100vw\", height: \"100vh\"};\r\n\r\nconst Teaching = () => {\r\n    const [elements, setElements] = useState(elementsData);\r\n    const [hoverText, setHoverText] = useState(false);\r\n    const [hoverNode, setHoverNode] = useState();\r\n    const [layout, setLayout] = useState(layoutStyle);\r\n    //const reactFlowInstance = useRef(null);\r\n    const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n    var clickCount = 0;\r\n    var singleClickTimer = '';\r\n\r\n    const onInstanceLoad = (instance) => {\r\n        for (var group of exclusionGroups) {\r\n            const last = group.pop();\r\n    \r\n            for (var course of elementsData) {\r\n                if (last === course.id) {\r\n                    course.isHidden = true;\r\n                    // console.log(\"Hiding \" + course.id);\r\n                    // Get all the edges and hide them too\r\n                    for (var edge of elementsData) {\r\n                        if (isNode(edge)) continue;\r\n                        if (edge.source === last || edge.target === last) {\r\n                            // console.log(\"hiding \" + edge.id);\r\n                            edge.isHidden = true;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            group.push(last);\r\n        }\r\n        setReactFlowInstance(instance);\r\n        instance.setTransform({x: 470, y: 350, zoom: 0.38});\r\n    };\r\n\r\n    const getCanvasSize = () => {\r\n        const size1 = reactFlowInstance.project({x: window.innerWidth * 0.75, y: window.innerHeight});\r\n        const size2 = reactFlowInstance.project({x: 0, y: 0});\r\n        return [(size1.x - size2.x) * 0.38, (size1.y - size2.y) * 0.38];\r\n    }\r\n\r\n\r\n    let dropSearch = null;\r\n    if (reactFlowInstance !== null) {\r\n        dropSearch = <DropdownSearch canvasSize={getCanvasSize()}/>\r\n    }\r\n\r\n    const selectUnselect = (element) => {\r\n        // NOTE: Might not need this?????\r\n        // EXPLANATION: Reason we dont need it is because we have to leave node\r\n        // anyways to hover another node. But maybe good practise to have just in case\r\n        // Unhover edges which lit up on nodeMouseEnter\r\n        unhoverPrerequisites(hoverEdges);\r\n\r\n        // 1. Select the node and fill in edges.\r\n        // - Deal with unselecting nodes\r\n        if (selectableNodes.hasOwnProperty(element.id)) {\r\n            // console.log(\"MAINSELECT\");\r\n            selectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        } else if (selectedNodes.hasOwnProperty(element.id)) {\r\n            // console.log(\"UNSELECTING\");\r\n            unselectNode(elements, element, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n            unselectUnconnected(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n        }\r\n\r\n        // console.log(\"==========SelectedNodes==========\");\r\n        // console.log(selectedNodes);\r\n        // console.log(\"==========SelectedEdges==========\");\r\n        // console.log(selectedEdges);\r\n        // console.log(\"==========SelectableNodes==========\");\r\n        // console.log(selectableNodes);\r\n        // console.log(\"==========PotentialEdges==========\");\r\n        // console.log(potentialEdges);\r\n\r\n        // 2. Determine which nodes are now selectable\r\n        // - Determine which previously selectable nodes are now unselectable\r\n        getSelectable(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges);\r\n\r\n        // Render graph accordingly\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const toggleExclusion = (element) => {\r\n        // TODO: ARE there courses which do not \r\n        // For all immediate edges of the element, swap\r\n        // with the exclusion course\r\n        setElements(exclusionSwap(element, elements, edgesData, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges, exclusionGroups));\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    // ==========ONCLICK==========\r\n    const onElementClick = (event, element) => {\r\n        // console.log(\"ONELEMENTCLICK\");\r\n        if (isEdge(element)) return; // Don't care about edges\r\n        if (element.id === 'SENGAH') return; // Cannot click on main node\r\n        if ((! selectableNodes.hasOwnProperty(element.id)) && (! selectedNodes.hasOwnProperty(element.id))) return; // Cannot select non selectable nodes\r\n\r\n        // Determine double or single click for exclusion nodes\r\n        // This will prevent normal nodes from waiting the double click delay\r\n        if (exclusionNodes.hasOwnProperty(element.id)) {\r\n            clickCount++;\r\n            if (clickCount === 1) {\r\n                singleClickTimer = setTimeout(function() {\r\n                    clickCount = 0;\r\n                    selectUnselect(element);\r\n                }, 200);\r\n            } else if (clickCount === 2) {\r\n                clearTimeout(singleClickTimer);\r\n                clickCount = 0;\r\n                toggleExclusion(element);\r\n            }\r\n        } else {\r\n            // Not an exclusion node.\r\n            selectUnselect(element);\r\n        }\r\n    };\r\n    // ===========================\r\n\r\n    // ==========ONHOVER==========\r\n    const onNodeMouseEnter = (event, node) => {\r\n        if (node.id === 'SENGAH') return;\r\n        // Display node information in top left\r\n        setHoverText(true);\r\n        setHoverNode(node);\r\n\r\n        // If the node is unselected, highlight prerequisite edges in purple\r\n        //if ((!selectedNodes.hasOwnProperty(node.id)) && (!selectableNodes.hasOwnProperty(node.id))) {\r\n        hoverPrerequisites(node, elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges);\r\n        //}\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n    const onNodeMouseLeave = (event, node) => {\r\n        if (node.id === 'SENGAH') return;\r\n        setHoverText(false);\r\n        unhoverPrerequisites(hoverEdges);\r\n        setElements(highlightElements(elements, selectedNodes, selectedEdges, selectableNodes, potentialEdges, hoverEdges));\r\n    }\r\n\r\n\r\n    let hoverDisplay;\r\n    if (hoverText) {\r\n        hoverDisplay = <HoverInfo node={hoverNode}/>\r\n    }\r\n\r\n    // ===========================\r\n\r\n    const onNodeDragStop = (event, node) => {\r\n        for (var e of elements) {\r\n            if (e.id === node.id) {\r\n                e.position.x = node.position.x;\r\n                e.position.y = node.position.y;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const disableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'hidden'});\r\n    }\r\n\r\n    const enableBodyScroll = () => {\r\n        setLayout({...layout, overflowY: 'overlay'});\r\n    }\r\n\r\n    return (\r\n        <div style={{positon: \"relative\"}}>\r\n            <div style={layout}>\r\n                <Grid columns={2} divided>\r\n                    <Grid.Column width=\"12\">\r\n                        <ReactFlowProvider onMouseEnter={disableBodyScroll} onMouseLeave={enableBodyScroll}>\r\n                            <ReactFlow\r\n                                elements={elements}\r\n                                style={{width: '100%', height: '100vh'}}\r\n                                onLoad={onInstanceLoad}\r\n                                nodeTypes={nodeTypes}\r\n                                nodesConnectable={false}\r\n                                onElementClick={onElementClick}\r\n                                minZoom={0.38}\r\n                                //setInitTransform={TransformUpdater({x: 100, y: 100, z: 1})}\r\n                                //nodesDraggable={false}\r\n                                onNodeMouseEnter={onNodeMouseEnter}\r\n                                onNodeMouseLeave={onNodeMouseLeave}\r\n                                selectNodesOnDrag={false}\r\n                                onNodeDragStop={onNodeDragStop}\r\n                                elementsSelectable={false}\r\n                            >\r\n                                <div style={{position: \"absolute\", zIndex: \"10\", top: \"30px\", right: \"30px\"}}>\r\n                                    {dropSearch}\r\n                                </div>\r\n                            </ReactFlow>\r\n                        </ReactFlowProvider>\r\n                    </Grid.Column>\r\n                    <Grid.Column width=\"4\">\r\n                        <Sidebar selectedNodes={selectedNodes}/>\r\n                    </Grid.Column>\r\n                </Grid>\r\n                {hoverDisplay}\r\n                {/* <button onClick={positionHelper(elements)}>GENERATE POSITION</button> */}\r\n                <div id=\"DegreePlanner\">\r\n                    <DegreePlanner id=\"DegreePlanner\" key={Object.keys(selectedNodes).join(\"\")}selectedCourses={Object.keys(selectedNodes)} />\r\n                </div>\r\n                <Container style={{textAlign: \"center\", height: \"auto\", padding: \"20px\"}}>\r\n                    <p>Made by SRKO, 2020</p>\r\n                    <a href=\"https://github.com/Circles360/Circles360.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>\r\n                </Container>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Teaching;","import React, {Component} from 'react';\r\nimport { Route, HashRouter, Link } from 'react-router-dom';\r\n\r\nimport BESengah from './maps/EngineeringHonoursSoftware/map.js';\r\nimport ComputerScienceCOMPA1ACCTA2 from './maps/ComputerScienceCOMPA1ACCTA2/map.js';\r\nimport ComputerScienceCOMPA1MARKA2 from './maps/ComputerScienceCOMPA1MARKA2/map.js';\r\nimport ComputerScienceCOMPA1INFSA2 from './maps/ComputerScienceCOMPA1INFSA2/map.js';\r\nimport ComputerScienceCOMPA1PSYCM2 from './maps/ComputerScienceCOMPA1PSYCM2/map.js';\r\n\r\nimport Teaching from './maps/EngineeringHonoursSoftware/teaching.js';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <HashRouter basename='/'>\r\n        <div>\r\n          <Route path=\"/3707/SENGAH\" component={BESengah} />\r\n          <Route path=\"/3778/COMPA1-ACCTA2\" component={ComputerScienceCOMPA1ACCTA2} />\r\n          <Route path=\"/3778/COMPA1-MARKA2\" component={ComputerScienceCOMPA1MARKA2} />\r\n          <Route path=\"/3778/COMPA1-INFSA2\" component={ComputerScienceCOMPA1INFSA2} />\r\n          <Route path=\"/3778/COMPA1-PSYCM2\" component={ComputerScienceCOMPA1PSYCM2} />\r\n          <Route path=\"/James\" component={Teaching}/>\r\n        </div>\r\n      </HashRouter>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType !== null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}